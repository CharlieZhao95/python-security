{
    "Modified": "2016-12-23T21:59:36.810000",
    "Published": "2016-09-02T10:59:00.127000",
    "access": {
        "authentication": "NONE",
        "complexity": "MEDIUM",
        "vector": "NETWORK"
    },
    "capec": [
        {
            "id": "1",
            "name": "Accessing Functionality Not Properly Constrained by ACLs",
            "prerequisites": "The application must be navigable in a manner that associates elements (subsections) of the application with ACLs.\nThe various resources, or individual URLs, must be somehow discoverable by the attacker\nThe administrator must have forgotten to associate an ACL or has associated an inappropriately permissive ACL with a particular navigable resource.",
            "related_weakness": [
                "285",
                "732",
                "276",
                "693",
                "721",
                "434"
            ],
            "solutions": "In a more general setting, the administrator must mark every resource besides the ones supposed to be exposed to the user as accessible by a role impossible for the user to assume. The default security setting must be to deny access and then grant access only to those resources intended by business logic.",
            "summary": "In applications, particularly web applications, access to functionality is mitigated by the authorization framework, whose job it is to map ACLs to elements of the application's functionality; particularly URL's for web apps. In the case that the administrator failed to specify an ACL for a particular element, an attacker may be able to access it with impunity. An attacker with the ability to access functionality not properly constrained by ACLs can obtain sensitive information and possibly compromise the entire application. Such an attacker can access resources that must be available only to users at a higher privilege level, can access management sections of the application or can run queries for data that he is otherwise not supposed to."
        },
        {
            "id": "103",
            "name": "Clickjacking",
            "prerequisites": "The victim is communicating with the target application via a web based UI and not a thick client\nThe victim's browser security policies allow at least one of the following JavaScript, Flash, iFrames, ActiveX, or CSS.\nThe victim uses a modern browser that supports UI elements like clickable buttons (i.e. not using an old text only browser)\nThe victim has an active session with the target system.\nThe target system's interaction window is open in the victim's browser and supports the ability for initiating sensitive actions on behalf of the user in the target system",
            "related_weakness": [
                "693"
            ],
            "solutions": "If using the Firefox browser, use the NoScript plug-in that will help forbid iFrames.\nTurn off JavaScript, Flash and disable CSS.\nWhen maintaining an authenticated session with a privileged target system, do not use the same browser to navigate to unfamiliar sites to perform other activities. Finish working with the target system and logout first before proceeding to other tasks.",
            "summary": "In a clickjacking attack the victim is tricked into unknowingly initiating some action in one system while interacting with the UI from seemingly completely different system. While being logged in to some target system, the victim visits the attackers' malicious site which displays a UI that the victim wishes to interact with. In reality, the clickjacked page has a transparent layer above the visible UI with action controls that the attacker wishes the victim to execute. The victim clicks on buttons or other UI elements they see on the page which actually triggers the action controls in the transparent overlaying layer. Depending on what that action control is, the attacker may have just tricked the victim into executing some potentially privileged (and most certainly undesired) functionality in the target system to which the victim is authenticated. The basic problem here is that there is a dichotomy between what the victim thinks he's clicking on versus what he or she is actually clicking on."
        },
        {
            "id": "107",
            "name": "Cross Site Tracing",
            "prerequisites": "HTTP TRACE is enabled on the web server\nThe destination system is susceptible to XSS or an attacker can leverage some other weakness to bypass the same origin policy\nScripting is enabled in the client's browser\nHTTP is used as the communication protocol between the server and the client",
            "related_weakness": [
                "693",
                "648"
            ],
            "solutions": "Administrators should disable support for HTTP TRACE at the destination's web server. Vendors should disable TRACE by default.\nPatch web browser against known security origin policy bypass exploits.",
            "summary": "Cross Site Tracing (XST) enables an attacker to steal the victim's session cookie and possibly other authentication credentials transmitted in the header of the HTTP request when the victim's browser communicates to destination system's web server. The attacker first gets a malicious script to run in the victim's browser that induces the browser to initiate an HTTP TRACE request to the web server. If the destination web server allows HTTP TRACE requests, it will proceed to return a response to the victim's web browser that contains the original HTTP request in its body. The function of HTTP TRACE, as defined by the HTTP specification, is to echo the request that the web server receives from the client back to the client. Since the HTTP header of the original request had the victim's session cookie in it, that session cookie can now be picked off the HTTP TRACE response and sent to the attackers' malicious site. XST becomes relevant when direct access to the session cookie via the \"document.cookie\" object is disabled with the use of httpOnly attribute which ensures that the cookie can be transmitted in HTTP requests but cannot be accessed in other ways. Using SSL does not protect against XST.\nIf the system with which the victim is interacting is susceptible to XSS, an attacker can exploit that weakness directly to get his or her malicious script to issue an HTTP TRACE request to the destination system's web server. In the absence of an XSS weakness on the site with which the victim is interacting, an attacker can get the script to come from the site that he controls and get it to execute in the victim's browser (if he can trick the victim's into visiting his malicious website or clicking on the link that he supplies). However, in that case, due to the same origin policy protection mechanism in the browser, the attackers' malicious script cannot directly issue an HTTP TRACE request to the destination system's web server because the malicious script did not originate at that domain. An attacker will then need to find a way to exploit another weakness that would enable him or her to get around the same origin policy protection."
        },
        {
            "id": "127",
            "name": "Directory Indexing",
            "prerequisites": "The target must be misconfigured to return a list of a directory's content when it receives a request that ends in a directory name rather than a file name.\nThe adversary must be able to control the path that is requested of the target.\nThe administrator must have failed to properly configure an ACL or has associated an overly permissive ACL with a particular directory.\nThe server version or patch level must not inherently prevent known directory listing attacks from working.",
            "related_weakness": [
                "424",
                "425",
                "288",
                "285",
                "732",
                "276",
                "693",
                "721"
            ],
            "solutions": "1. Using blank index.html: putting blank index.html simply prevent directory listings from displaying to site visitors.\n2. Preventing with .htaccess in Apache web server: In .htaccess, write \"Options-indexes\".\n3. Suppressing error messages: using error 403 \"Forbidden\" message exactly like error 404 \"Not Found\" message.",
            "summary": "An adversary crafts a request to a target that results in the target listing/indexing the content of a directory as output. One common method of triggering directory contents as output is to construct a request containing a path that terminates in a directory name rather than a file name since many applications are configured to provide a list of the directory's contents when such a request is received. An adversary can use this to explore the directory tree on a target as well as learn the names of files. This can often end up revealing test files, backup files, temporary files, hidden files, configuration files, user accounts, script contents, as well as naming conventions, all of which can be used by an attacker to mount additional attacks."
        },
        {
            "id": "16",
            "name": "Dictionary-based Password Attack",
            "prerequisites": "The system uses one factor password based authentication.\nThe system does not have a sound password policy that is being enforced.\nThe system does not implement an effective password throttling mechanism.",
            "related_weakness": [
                "521",
                "262",
                "263",
                "693"
            ],
            "solutions": "Create a strong password policy and ensure that your system enforces this policy.\nImplement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-02.",
            "summary": "An attacker tries each of the words in a dictionary as passwords to gain access to the system via some user's account. If the password chosen by the user was a word within the dictionary, this attack will be successful (in the absence of other mitigations). This is a specific instance of the password brute forcing attack pattern."
        },
        {
            "id": "17",
            "name": "Accessing, Modifying or Executing Executable Files",
            "prerequisites": "System's configuration must allow an attacker to directly access executable files or upload files to execute. This means that any access control system that is supposed to mediate communications between the subject and the object is set incorrectly or assumes a benign environment.",
            "related_weakness": [
                "732",
                "285",
                "272",
                "59",
                "282",
                "275",
                "264",
                "270",
                "693"
            ],
            "solutions": "Design: Enforce principle of least privilege\nDesign: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.\nImplementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.",
            "summary": "An attack of this type exploits a system's configuration that allows an attacker to either directly access an executable file, for example through shell access; or in a possible worst case allows an attacker to upload a file and then execute it. Web servers, ftp servers, and message oriented middleware systems which have many integration points are particularly vulnerable, because both the programmers and the administrators must be in synch regarding the interfaces and the correct privileges for each interface."
        },
        {
            "id": "20",
            "name": "Encryption Brute Forcing",
            "prerequisites": "Ciphertext is known.\nEncryption algorithm and key size are known.",
            "related_weakness": [
                "326",
                "327",
                "693",
                "719"
            ],
            "solutions": "Use commonly accepted algorithms and recommended key sizes. The key size used will depend on how important it is to keep the data confidential and for how long.\nIn theory a brute force attack performing an exhaustive key space search will always succeed, so the goal is to have computational security. Moore's law needs to be taken into account that suggests that computing resources double every eighteen months.",
            "summary": "An attacker, armed with the cipher text and the encryption algorithm used, performs an exhaustive (brute force) search on the key space to determine the key that decrypts the cipher text to obtain the plaintext."
        },
        {
            "id": "22",
            "name": "Exploiting Trust in Client (aka Make the Client Invisible)",
            "prerequisites": "Server software must rely on client side formatted and validated values, and not reinforce these checks on the server side.",
            "related_weakness": [
                "290",
                "287",
                "20",
                "200",
                "693"
            ],
            "solutions": "Design: Ensure that client process and/or message is authenticated so that anonymous communications and/or messages are not accepted by the system.\nDesign: Do not rely on client validation or encoding for security purposes.\nDesign: Utilize digital signatures to increase authentication assurance.\nDesign: Utilize two factor authentication to increase authentication assurance.\nImplementation: Perform input validation for all remote content.",
            "summary": "An attack of this type exploits a programs' vulnerabilities in client/server communication channel authentication and data integrity. It leverages the implicit trust a server places in the client, or more importantly, that which the server believes is the client.\nAn attacker executes this type of attack by placing themselves in the communication channel between client and server such that communication directly to the server is possible where the server believes it is communicating only with a valid client.\nThere are numerous variations of this type of attack."
        },
        {
            "id": "237",
            "name": "Calling Signed Code From Another Language Within A Sandbox Allow This ",
            "prerequisites": "A framework-based language that supports code signing and sandbox (such as Java, .Net, JavaScript, and Flash) Deployed code that has been signed by its authoring vendor, or a partner",
            "related_weakness": [
                "693"
            ],
            "solutions": "Assurance: Sanitize the code of the standard libraries to make sure there is no security weaknesses in them.\nDesign: Use obfuscation and other techniques to prevent reverse engineering the standard libraries.\nAssurance: Use static analysis tool to do code review and dynamic tool to do penetration test on the standard library.\nConfiguration: Get latest updates for the computer.",
            "summary": "The attacker may submit a malicious signed code from another language to obtain access to privileges that were not intentionally exposed by the sandbox, thus escaping the sandbox. For instance, Java code cannot perform unsafe operations, such as modifying arbitrary memory locations, due to restrictions placed on it by the Byte code Verifier and the JVM. If allowed, Java code can call directly into native C code, which may perform unsafe operations, such as call system calls and modify arbitrary memory locations on their behave. To provide isolation, Java does not grant untrusted code with unmediated access to native C code. Instead, the sandboxed code is typically allowed to call some subset of the pre-existing native code that is part of standard libraries."
        },
        {
            "id": "36",
            "name": "Using Unpublished Web Service APIs",
            "prerequisites": "This might include listening on a well-known port. Ultimately, the likelihood of exploit depends on discoverability of the vulnerable service.",
            "related_weakness": [
                "306",
                "693",
                "695"
            ],
            "solutions": "Authenticating both services and their discovery, and protecting that authentication mechanism simply fixes the bulk of this problem. Protecting the authentication involves the standard means, including: 1) protecting the channel over which authentication occurs, 2) preventing the theft, forgery, or prediction of authentication credentials or the resultant tokens, or 3) subversion of password reset and the like.",
            "summary": "An attacker searches for and invokes Web Services APIs that the target system designers did not intend to be publicly available. If these APIs fail to authenticate requests the attacker may be able to invoke services and/or gain privileges they are not authorized for."
        },
        {
            "id": "474",
            "name": "Signature Spoofing by Key Theft",
            "prerequisites": "An authoritative or reputable signer is storing their private signature key with insufficient protection.",
            "related_weakness": [
                "284",
                "693",
                "216"
            ],
            "solutions": "Ensure all services are patched and up to date",
            "summary": "An attacker obtains an authoritative or reputable signer's private signature key by theft and then uses this key to forge signatures from the original signer to mislead a victim into performing actions that benefit the attacker."
        },
        {
            "id": "475",
            "name": "Signature Spoofing by Improper Validation",
            "prerequisites": "Recipient is using a weak cryptographic signature verification algorithm or a weak implementation of a cryptographic signature verification algorithm, or the configuration of the recipient's application accepts the use of keys generated using cryptographically weak signature verification algorithms.",
            "related_weakness": [
                "693"
            ],
            "solutions": "Use programs and products that contain cryptographic elements that have been thoroughly tested for flaws in the signature verification routines.",
            "summary": "An attacker exploits a cryptographic weakness in the signature verification algorithm implementation to generate a valid signature without knowing the key."
        },
        {
            "id": "477",
            "name": "Signature Spoofing by Mixing Signed and Unsigned Content",
            "prerequisites": "Signer and recipient are using complex data storage structures that allow for a mix between signed and unsigned data\nRecipient is using signature verification software that does not maintain separation between signed and unsigned data once the signature has been verified.",
            "related_weakness": [
                "693",
                "311",
                "319"
            ],
            "solutions": "Ensure the application is fully patched and does not allow the processing of unsigned data as if it is signed data.",
            "summary": "An attacker exploits the underlying complexity of a data structure that allows for both signed and unsigned content, to cause unsigned data to be processed as though it were signed data."
        },
        {
            "id": "49",
            "name": "Password Brute Forcing",
            "prerequisites": "An attacker needs to know a username to target.\nThe system uses password based authentication as the one factor authentication mechanism.\nAn application does not have a password throttling mechanism in place. A good password throttling mechanism will make it almost impossible computationally to brute force a password as it may either lock out the user after a certain number of incorrect attempts or introduce time out periods. Both of these would make a brute force attack impractical.",
            "related_weakness": [
                "521",
                "262",
                "263",
                "257",
                "693"
            ],
            "solutions": "Implement a password throttling mechanism. This mechanism should take into account both the IP address and the log in name of the user.\nPut together a strong password policy and make sure that all user created passwords comply with it. Alternatively automatically generate strong passwords for users.\nPasswords need to be recycled to prevent aging, that is every once in a while a new password must be chosen.",
            "summary": "In this attack, the attacker tries every possible value for a password until they succeed. A brute force attack, if feasible computationally, will always be successful because it will essentially go through all possible passwords given the alphabet used (lower case letters, upper case letters, numbers, symbols, etc.) and the maximum length of the password.\nA system will be particularly vulnerable to this type of an attack if it does not have a proper enforcement mechanism in place to ensure that passwords selected by users are strong passwords that comply with an adequate password policy.\nIn practice a pure brute force attack on passwords is rarely used, unless the password is suspected to be weak. Other password cracking methods exist that are far more effective (e.g. dictionary attacks, rainbow tables, etc.)."
        },
        {
            "id": "51",
            "name": "Poison Web Service Registry",
            "prerequisites": "The attacker must be able to write to resources or redirect access to the service registry.",
            "related_weakness": [
                "285",
                "74",
                "693"
            ],
            "solutions": "Design: Enforce principle of least privilege\nDesign: Harden registry server and file access permissions\nImplementation: Implement communications to and from the registry using secure protocols",
            "summary": "SOA and Web Services often use a registry to perform look up, get schema information, and metadata about services. A poisoned registry can redirect (think phishing for servers) the service requester to a malicious service provider, provide incorrect information in schema or metadata (to effect a denial of service), and delete information about service provider interfaces.\nWS-Addressing is used to virtualize services, provide return addresses and other routing information, however, unless the WS-Addressing headers are protected they are vulnerable to rewriting. The attacker that can rewrite WS-addressing information gains the ability to route service requesters to any service providers, and the ability to route service provider response to any service.\nContent in a registry is deployed by the service provider. The registry in an SOA or Web Services system can be accessed by the service requester via UDDI or other protocol. The basic flow for the attacker consists of either altering the data at rest in the registry or uploading malicious content by spoofing a service provider. The service requester is then redirected to send its requests and/or responses to services the attacker controls."
        },
        {
            "id": "55",
            "name": "Rainbow Table Password Cracking",
            "prerequisites": "Hash of the original password is available to the attacker. For a better chance of success, an attacker should have more than one hash of the original password, and ideally the whole table.\nSalt was not used to create the hash of the original password. Otherwise the rainbow tables have to be re-computed, which is very expensive and will make the attack effectively infeasible (especially if salt was added in iterations).\nThe system uses one factor password based authentication.",
            "related_weakness": [
                "261",
                "521",
                "262",
                "263",
                "693",
                "719"
            ],
            "solutions": "Use salt when computing password hashes. That is, concatenate the salt (random bits) with the original password prior to hashing it.",
            "summary": "An attacker gets access to the database table where hashes of passwords are stored. He then uses a rainbow table of pre-computed hash chains to attempt to look up the original password. Once the original password corresponding to the hash is obtained, the attacker uses the original password to gain access to the system.\nA password rainbow table stores hash chains for various passwords. A password chain is computed, starting from the original password, P, via a reduce(compression) function R and a hash function H. A recurrence relation exists where Xi+1 = R(H(Xi)), X0 = P. Then the hash chain of length n for the original password P can be formed: X1, X2, X3, ... , Xn-2, Xn-1, Xn, H(Xn). P and H(Xn) are then stored together in the rainbow table.\nConstructing the rainbow tables takes a very long time and is computationally expensive. A separate table needs to be constructed for the various hash algorithms (e.g. SHA1, MD5, etc.). However, once a rainbow table is computed, it can be very effective in cracking the passwords that have been hashed without the use of salt."
        },
        {
            "id": "56",
            "name": "Removing/short-circuiting 'guard logic'",
            "prerequisites": "The Attacker must have reverse-engineered the application and its design extensively enough to have determined that a guard element exists. This may have been done as simply as through probing (and likely receiving too verbose an error message) or could have involved high-brow techniques supported by advanced reverse engineering/debugging tools.",
            "related_weakness": [
                "288",
                "372",
                "510",
                "693",
                "721"
            ],
            "solutions": "",
            "summary": "Attackers can, in some cases, get around logic put in place to 'guard' sensitive functionality or data.\nThe attack may involve gaining access to and calling protected functionality (or accessing protected data) directly, may involve subverting some aspect of the guard's implementation, or outright removal of the guard, if possible."
        },
        {
            "id": "57",
            "name": "Utilizing REST's Trust in the System Resource to Register Man in the Middle",
            "prerequisites": "Opportunity to intercept must exist beyond the point where SSL is terminated.\nThe attacker must be able to insert a listener actively (proxying the communication) or passively (sniffing the communication) in the client-server communication path.",
            "related_weakness": [
                "300",
                "287",
                "724",
                "693"
            ],
            "solutions": "Implementation: Implement message level security such as HMAC in the HTTP communication\nDesign: Utilize defense in depth, do not rely on a single security mechanism like SSL\nDesign: Enforce principle of least privilege",
            "summary": "This attack utilizes a REST(REpresentational State Transfer)-style applications' trust in the system resources and environment to place man in the middle once SSL is terminated. Rest applications premise is that they leverage existing infrastructure to deliver web services functionality. An example of this is a Rest application that uses HTTP Get methods and receives a HTTP response with an XML document. These Rest style web services are deployed on existing infrastructure such as Apache and IIS web servers with no SOAP stack required. Unfortunately from a security standpoint, there frequently is no interoperable identity security mechanism deployed, so Rest developers often fall back to SSL to deliver security. In large data centers, SSL is typically terminated at the edge of the network - at the firewall, load balancer, or router. Once the SSL is terminated the HTTP request is in the clear (unless developers have hashed or encrypted the values, but this is rare). The attacker can utilize a sniffer such as Wireshark to snapshot the credentials, such as username and password that are passed in the clear once SSL is terminated.\nOnce the attacker gathers these credentials, they can submit requests to the web service provider just as authorized user do. There is not typically an authentication on the client side, beyond what is passed in the request itself so once this is compromised, then this is generally sufficient to compromise the service's authentication scheme."
        },
        {
            "id": "59",
            "name": "Session Credential Falsification through Prediction",
            "prerequisites": "The target host uses session IDs to keep track of the users.\nSession IDs are used to control access to resources.\nThe session IDs used by the target host are predictable. For example, the session IDs are generated using predictable information (e.g., time).",
            "related_weakness": [
                "290",
                "330",
                "331",
                "346",
                "488",
                "539",
                "200",
                "6",
                "285",
                "384",
                "693",
                "719"
            ],
            "solutions": "Use a strong source of randomness to generate a session ID.\nUse adequate length session IDs\nDo not use information available to the user in order to generate session ID (e.g., time).\nIdeas for creating random numbers are offered by Eastlake [RFC1750]\nEncrypt the session ID if you expose it to the user. For instance session ID can be stored in a cookie in encrypted format.",
            "summary": "This attack targets predictable session ID in order to gain privileges. The attacker can predict the session ID used during a transaction to perform spoofing and session hijacking."
        },
        {
            "id": "65",
            "name": "Passively Sniff and Capture Application Code Bound for Authorized Client",
            "prerequisites": "The attacker must have the ability to place himself in the communication path between the client and server.\nThe targeted application must receive some application code from the server; for example, dynamic updates, patches, applets or scripts.\nThe attacker must be able to employ a sniffer on the network without being detected.",
            "related_weakness": [
                "319",
                "311",
                "318",
                "693",
                "719"
            ],
            "solutions": "Design: Encrypt all communication between the client and server.\nImplementation: Use SSL, SSH, SCP.\nOperation: Use \"ifconfig/ipconfig\" or other tools to detect the sniffer installed in the network.",
            "summary": "Attackers can capture application code bound for the client and can use it, as-is or through reverse-engineering, to glean sensitive information or exploit the trust relationship between the client and server.\nSuch code may belong to a dynamic update to the client, a patch being applied to a client component or any such interaction where the client is authorized to communicate with the server."
        },
        {
            "id": "70",
            "name": "Try Common(default) Usernames and Passwords",
            "prerequisites": "The system uses one factor password based authentication.",
            "related_weakness": [
                "521",
                "262",
                "263",
                "798",
                "693"
            ],
            "solutions": "Delete all default account credentials that may be put in by the product vendor.\nImplement a password throttling mechanism. This mechanism should take into account both the IP address and the log in name of the user.\nPut together a strong password policy and make sure that all user created passwords comply with it. Alternatively automatically generate strong passwords for users.\nPasswords need to be recycled to prevent aging, that is every once in a while a new password must be chosen.",
            "summary": "An attacker may try certain common (default) usernames and passwords to gain access into the system and perform unauthorized actions. An attacker may try an intelligent brute force using known vendor default credentials as well as a dictionary of common usernames and passwords.\nMany vendor products come preconfigured with default (and thus well-known) usernames and passwords that should be deleted prior to usage in a production environment. It is a common mistake to forget to remove these default login credentials. Another problem is that users would pick very simple (common) passwords (e.g. \"secret\" or \"password\") that make it easier for the attacker to gain access to the system compared to using a brute force attack or even a dictionary attack using a full dictionary."
        },
        {
            "id": "74",
            "name": "Manipulating User State",
            "prerequisites": "",
            "related_weakness": [
                "372",
                "371",
                "315",
                "353",
                "693"
            ],
            "solutions": "Do not rely solely on user-controllable locations, such as cookies or URL parameters, to maintain user state\nDo not store sensitive information, such as usernames or authentication and authorization information, in user-controllable locations.\nAt all times sensitive information that is part of the user state must be appropriately protected to ensure confidentiality and integrity at each request",
            "summary": "An attacker modifies state information maintained by the target software in user-accessible locations. If successful, the target software will use this tainted state information and execute in an unintended manner.\nState management is an important function within an application. User state maintained by the application can include usernames, payment information, browsing history as well as application-specific contents such as items in a shopping cart.\nManipulating user state can be employed by an attacker to elevate privilege, conduct fraudulent transactions or otherwise modify the flow of the application to derive certain benefits."
        },
        {
            "id": "87",
            "name": "Forceful Browsing",
            "prerequisites": "The forcibly browseable pages or accessible resources must be discoverable and improperly protected.",
            "related_weakness": [
                "425",
                "285",
                "693"
            ],
            "solutions": "Authenticate request to every resource. In addition, every page or resource must ensure that the request it is handling has been made in an authorized context.\nForceful browsing can also be made difficult to a large extent by not hard-coding names of application pages or resources. This way, the attacker cannot figure out, from the application alone, the resources available from the present context.",
            "summary": "An attacker employs forceful browsing to access portions of a website that are otherwise unreachable through direct URL entry.\nUsually, a front controller or similar design pattern is employed to protect access to portions of a web application.\nForceful browsing enables an attacker to access information, perform privileged operations and otherwise reach sections of the web application that have been improperly protected."
        },
        {
            "id": "97",
            "name": "Cryptanalysis",
            "prerequisites": "The target software utilizes some sort of cryptographic algorithm.\nAn underlying weaknesses exists either in the cryptographic algorithm used or in the way that it was applied to a particular chunk of plaintext.\nThe encryption algorithm is known to the attacker.\nAn attacker has access to the ciphertext.",
            "related_weakness": [
                "327",
                "693",
                "719"
            ],
            "solutions": "Use proven cryptographic algorithms with recommended key sizes.\n5. Picking the most appropriate cryptographic algorithm for your usage context and data",
            "summary": "Cryptanalysis is a process of finding weaknesses in cryptographic algorithms and using these weaknesses to decipher the ciphertext without knowing the secret key (instance deduction). Sometimes the weakness is not in the cryptographic algorithm itself, but rather in how it is applied that makes cryptanalysis successful. An attacker may have other goals as well, such as:\n1. Total Break - Finding the secret key\n2. Global Deduction - Finding a functionally equivalent algorithm for encryption and decryption that does not require knowledge of the secret key.\n3. Information Deduction - Gaining some information about plaintexts or ciphertexts that was not previously known\n4. Distinguishing Algorithm - The attacker has the ability to distinguish the output of the encryption (ciphertext) from a random permutation of bits\nThe goal of the attacker performing cryptanalysis will depend on the specific needs of the attacker in a given attack context. In most cases, if cryptanalysis is successful at all, an attacker will not be able to go past being able to deduce some information about the plaintext (goal 3). However, that may be sufficient for an attacker, depending on the context."
        }
    ],
    "cvss": "5.8",
    "cvss-time": "2016-09-02T14:52:00.157000",
    "cwe": "CWE-693",
    "exploit-db": [
        {
            "description": "Python smtplib 2.7.11 / 3.4.4 / 3.5.1 - Man In The Middle StartTLS Stripping. CVE-2016-0772. Local exploit for Multiple platform",
            "id": "EDB-ID:43500",
            "last seen": "2018-01-24",
            "modified": "2016-07-03",
            "published": "2016-07-03",
            "reporter": "Exploit-DB",
            "source": "https://www.exploit-db.com/download/43500/",
            "title": "Python smtplib 2.7.11 / 3.4.4 / 3.5.1 - Man In The Middle StartTLS Stripping"
        }
    ],
    "id": "CVE-2016-0772",
    "impact": {
        "availability": "NONE",
        "confidentiality": "PARTIAL",
        "integrity": "PARTIAL"
    },
    "last-modified": "2019-02-09T06:29:00.307000",
    "nessus": [
        {
            "NASL family": "Fedora Local Security Checks",
            "NASL id": "FEDORA_2016-EF784CF9F7.NASL",
            "description": "Security fix for CVE-2016-5699\n\n----\n\nSecurity fix for CVE-2016-0772\n\nNote that Tenable Network Security has extracted the preceding description block directly from the Fedora update system website.\nTenable has attempted to automatically clean and format it as much as possible without introducing additional issues.",
            "last seen": "2019-02-21",
            "modified": "2016-10-18",
            "plugin id": "92301",
            "published": "2016-07-15",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=92301",
            "title": "Fedora 23 : python3 (2016-ef784cf9f7)"
        },
        {
            "NASL family": "Fedora Local Security Checks",
            "NASL id": "FEDORA_2016-105B80D1BE.NASL",
            "description": "Security fix for CVE-2016-0772\n\nNote that Tenable Network Security has extracted the preceding description block directly from the Fedora update system website.\nTenable has attempted to automatically clean and format it as much as possible without introducing additional issues.",
            "last seen": "2019-02-21",
            "modified": "2016-10-18",
            "plugin id": "92230",
            "published": "2016-07-15",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=92230",
            "title": "Fedora 24 : python3 (2016-105b80d1be)"
        },
        {
            "NASL family": "Fedora Local Security Checks",
            "NASL id": "FEDORA_2016-A0853405EB.NASL",
            "description": "Security fix for CVE-2016-0772\n\nNote that Tenable Network Security has extracted the preceding description block directly from the Fedora update system website.\nTenable has attempted to automatically clean and format it as much as possible without introducing additional issues.",
            "last seen": "2019-02-21",
            "modified": "2016-10-18",
            "plugin id": "92274",
            "published": "2016-07-15",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=92274",
            "title": "Fedora 23 : python (2016-a0853405eb)"
        },
        {
            "NASL family": "Fedora Local Security Checks",
            "NASL id": "FEDORA_2016-AAE6BB9433.NASL",
            "description": "Security fix for CVE-2016-0772\n\nNote that Tenable Network Security has extracted the preceding description block directly from the Fedora update system website.\nTenable has attempted to automatically clean and format it as much as possible without introducing additional issues.",
            "last seen": "2019-02-21",
            "modified": "2016-10-18",
            "plugin id": "92279",
            "published": "2016-07-15",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=92279",
            "title": "Fedora 23 : pypy (2016-aae6bb9433)"
        },
        {
            "NASL family": "Fedora Local Security Checks",
            "NASL id": "FEDORA_2016-13BE2EE499.NASL",
            "description": "Security fix for CVE-2016-0772\n\nNote that Tenable Network Security has extracted the preceding description block directly from the Fedora update system website.\nTenable has attempted to automatically clean and format it as much as possible without introducing additional issues.",
            "last seen": "2019-02-21",
            "modified": "2016-10-18",
            "plugin id": "92231",
            "published": "2016-07-15",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=92231",
            "title": "Fedora 24 : pypy (2016-13be2ee499)"
        },
        {
            "NASL family": "FreeBSD Local Security Checks",
            "NASL id": "FREEBSD_PKG_8D5368EF40FE11E6B2ECB499BAEBFEAF.NASL",
            "description": "Red Hat reports :\n\nA vulnerability in smtplib allowing MITM attacker to perform a startTLS stripping attack. smtplib does not seem to raise an exception when the remote end (smtp server) is capable of negotiating starttls but fails to respond with 220 (ok) to an explicit call of SMTP.starttls(). This may allow a malicious MITM to perform a startTLS stripping attack if the client code does not explicitly check the response code for startTLS.",
            "last seen": "2019-02-21",
            "modified": "2018-11-10",
            "plugin id": "91931",
            "published": "2016-07-05",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=91931",
            "title": "FreeBSD : Python -- smtplib StartTLS stripping vulnerability (8d5368ef-40fe-11e6-b2ec-b499baebfeaf)"
        },
        {
            "NASL family": "Fedora Local Security Checks",
            "NASL id": "FEDORA_2016-2869023091.NASL",
            "description": "Security fix for CVE-2016-0772\n\nNote that Tenable Network Security has extracted the preceding description block directly from the Fedora update system website.\nTenable has attempted to automatically clean and format it as much as possible without introducing additional issues.",
            "last seen": "2019-02-21",
            "modified": "2016-10-18",
            "plugin id": "92070",
            "published": "2016-07-14",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=92070",
            "title": "Fedora 24 : python (2016-2869023091)"
        },
        {
            "NASL family": "Debian Local Security Checks",
            "NASL id": "DEBIAN_DLA-871.NASL",
            "description": "It was discovered that there was a TLS stripping vulnerability in the smptlib library distributed with the CPython interpreter.\n\nThe library did not return an error if StartTLS failed, which might have allowed man-in-the-middle attackers to bypass the TLS protections by leveraging a network position to block the StartTLS command.\n\nFor Debian 7 'Wheezy', this issue has been fixed in python3.2 version 3.2.3-7+deb7u1.\n\nWe recommend that you upgrade your python3.2 packages.\n\nNOTE: Tenable Network Security has extracted the preceding description block directly from the DLA security advisory. Tenable has attempted to automatically clean and format it as much as possible without introducing additional issues.",
            "last seen": "2019-02-21",
            "modified": "2018-07-09",
            "plugin id": "97966",
            "published": "2017-03-27",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=97966",
            "title": "Debian DLA-871-1 : python3.2 security update"
        },
        {
            "NASL family": "SuSE Local Security Checks",
            "NASL id": "SUSE_SU-2019-0223-1.NASL",
            "description": "This update for python fixes the following issues :\n\nSecurity issues fixed :\n\nCVE-2016-0772: smtplib vulnerability opens startTLS stripping attack (bsc#984751)\n\nCVE-2016-5636: heap overflow when importing malformed zip files (bsc#985177)\n\nCVE-2016-5699: incorrect validation of HTTP headers allow header injection (bsc#985348)\n\nCVE-2016-1000110: HTTPoxy vulnerability in urllib, fixed by disregarding HTTP_PROXY when REQUEST_METHOD is also set (bsc#989523)\n\nCVE-2019-5010: Fixed a denial-of-service vulnerability in the X509 certificate parser (bsc#1122191)\n\nNote that Tenable Network Security has extracted the preceding description block directly from the SUSE security advisory. Tenable has attempted to automatically clean and format it as much as possible without introducing additional issues.",
            "last seen": "2019-02-21",
            "modified": "2019-02-04",
            "plugin id": "121570",
            "published": "2019-02-04",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=121570",
            "title": "SUSE SLES12 Security Update : python (SUSE-SU-2019:0223-1) (httpoxy)"
        },
        {
            "NASL family": "Fedora Local Security Checks",
            "NASL id": "FEDORA_2016-5C52DCFE47.NASL",
            "description": "Security fix for CVE-2016-0772\n\n----\n\nAdded patch for fixing possible integer overflow and heap corruption in zipimporter.get_data()\n\nNote that Tenable Network Security has extracted the preceding description block directly from the Fedora update system website.\nTenable has attempted to automatically clean and format it as much as possible without introducing additional issues.",
            "last seen": "2019-02-21",
            "modified": "2016-10-18",
            "plugin id": "92251",
            "published": "2016-07-15",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=92251",
            "title": "Fedora 22 : python3 (2016-5c52dcfe47)"
        },
        {
            "NASL family": "Scientific Linux Local Security Checks",
            "NASL id": "SL_20160818_PYTHON_ON_SL6_X.NASL",
            "description": "Security Fix(es) :\n\n  - It was discovered that the Python CGIHandler class did     not properly protect against the HTTP_PROXY variable     name clash in a CGI context. A remote attacker could     possibly use this flaw to redirect HTTP requests     performed by a Python CGI script to an     attacker-controlled proxy via a malicious HTTP request.\n    (CVE-2016-1000110)\n\n  - It was found that Python's smtplib library did not     return an exception when StartTLS failed to be     established in the SMTP.starttls() function. A man in     the middle attacker could strip out the STARTTLS command     without generating an exception on the Python SMTP     client application, preventing the establishment of the     TLS layer. (CVE-2016-0772)\n\n  - It was found that the Python's httplib library (used by     urllib, urllib2 and others) did not properly check     HTTPConnection.putheader() function arguments. An     attacker could use this flaw to inject additional     headers in a Python application that allowed user     provided header names or values. (CVE-2016-5699)",
            "last seen": "2019-02-21",
            "modified": "2018-12-28",
            "plugin id": "93072",
            "published": "2016-08-22",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=93072",
            "title": "Scientific Linux Security Update : python on SL6.x, SL7.x i386/x86_64 (httpoxy)"
        },
        {
            "NASL family": "Red Hat Local Security Checks",
            "NASL id": "REDHAT-RHSA-2016-1626.NASL",
            "description": "An update for python is now available for Red Hat Enterprise Linux 6 and Red Hat Enterprise Linux 7.\n\nRed Hat Product Security has rated this update as having a security impact of Moderate. A Common Vulnerability Scoring System (CVSS) base score, which gives a detailed severity rating, is available for each vulnerability from the CVE link(s) in the References section.\n\nPython is an interpreted, interactive, object-oriented programming language, which includes modules, classes, exceptions, very high level dynamic data types and dynamic typing. Python supports interfaces to many system calls and libraries, as well as to various windowing systems.\n\nSecurity Fix(es) :\n\n* It was discovered that the Python CGIHandler class did not properly protect against the HTTP_PROXY variable name clash in a CGI context. A remote attacker could possibly use this flaw to redirect HTTP requests performed by a Python CGI script to an attacker-controlled proxy via a malicious HTTP request. (CVE-2016-1000110)\n\n* It was found that Python's smtplib library did not return an exception when StartTLS failed to be established in the SMTP.starttls() function. A man in the middle attacker could strip out the STARTTLS command without generating an exception on the Python SMTP client application, preventing the establishment of the TLS layer. (CVE-2016-0772)\n\n* It was found that the Python's httplib library (used by urllib, urllib2 and others) did not properly check HTTPConnection.putheader() function arguments. An attacker could use this flaw to inject additional headers in a Python application that allowed user provided header names or values. (CVE-2016-5699)\n\nRed Hat would like to thank Scott Geary (VendHQ) for reporting CVE-2016-1000110.",
            "last seen": "2019-02-21",
            "modified": "2018-11-10",
            "plugin id": "93039",
            "published": "2016-08-19",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=93039",
            "title": "RHEL 6 / 7 : python (RHSA-2016:1626) (httpoxy)"
        },
        {
            "NASL family": "CentOS Local Security Checks",
            "NASL id": "CENTOS_RHSA-2016-1626.NASL",
            "description": "An update for python is now available for Red Hat Enterprise Linux 6 and Red Hat Enterprise Linux 7.\n\nRed Hat Product Security has rated this update as having a security impact of Moderate. A Common Vulnerability Scoring System (CVSS) base score, which gives a detailed severity rating, is available for each vulnerability from the CVE link(s) in the References section.\n\nPython is an interpreted, interactive, object-oriented programming language, which includes modules, classes, exceptions, very high level dynamic data types and dynamic typing. Python supports interfaces to many system calls and libraries, as well as to various windowing systems.\n\nSecurity Fix(es) :\n\n* It was discovered that the Python CGIHandler class did not properly protect against the HTTP_PROXY variable name clash in a CGI context. A remote attacker could possibly use this flaw to redirect HTTP requests performed by a Python CGI script to an attacker-controlled proxy via a malicious HTTP request. (CVE-2016-1000110)\n\n* It was found that Python's smtplib library did not return an exception when StartTLS failed to be established in the SMTP.starttls() function. A man in the middle attacker could strip out the STARTTLS command without generating an exception on the Python SMTP client application, preventing the establishment of the TLS layer. (CVE-2016-0772)\n\n* It was found that the Python's httplib library (used by urllib, urllib2 and others) did not properly check HTTPConnection.putheader() function arguments. An attacker could use this flaw to inject additional headers in a Python application that allowed user provided header names or values. (CVE-2016-5699)\n\nRed Hat would like to thank Scott Geary (VendHQ) for reporting CVE-2016-1000110.",
            "last seen": "2019-02-21",
            "modified": "2018-11-10",
            "plugin id": "93029",
            "published": "2016-08-19",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=93029",
            "title": "CentOS 6 / 7 : python (CESA-2016:1626) (httpoxy)"
        },
        {
            "NASL family": "Oracle Linux Local Security Checks",
            "NASL id": "ORACLELINUX_ELSA-2016-1626.NASL",
            "description": "From Red Hat Security Advisory 2016:1626 :\n\nAn update for python is now available for Red Hat Enterprise Linux 6 and Red Hat Enterprise Linux 7.\n\nRed Hat Product Security has rated this update as having a security impact of Moderate. A Common Vulnerability Scoring System (CVSS) base score, which gives a detailed severity rating, is available for each vulnerability from the CVE link(s) in the References section.\n\nPython is an interpreted, interactive, object-oriented programming language, which includes modules, classes, exceptions, very high level dynamic data types and dynamic typing. Python supports interfaces to many system calls and libraries, as well as to various windowing systems.\n\nSecurity Fix(es) :\n\n* It was discovered that the Python CGIHandler class did not properly protect against the HTTP_PROXY variable name clash in a CGI context. A remote attacker could possibly use this flaw to redirect HTTP requests performed by a Python CGI script to an attacker-controlled proxy via a malicious HTTP request. (CVE-2016-1000110)\n\n* It was found that Python's smtplib library did not return an exception when StartTLS failed to be established in the SMTP.starttls() function. A man in the middle attacker could strip out the STARTTLS command without generating an exception on the Python SMTP client application, preventing the establishment of the TLS layer. (CVE-2016-0772)\n\n* It was found that the Python's httplib library (used by urllib, urllib2 and others) did not properly check HTTPConnection.putheader() function arguments. An attacker could use this flaw to inject additional headers in a Python application that allowed user provided header names or values. (CVE-2016-5699)\n\nRed Hat would like to thank Scott Geary (VendHQ) for reporting CVE-2016-1000110.",
            "last seen": "2019-02-21",
            "modified": "2018-07-25",
            "plugin id": "93034",
            "published": "2016-08-19",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=93034",
            "title": "Oracle Linux 6 / 7 : python (ELSA-2016-1626) (httpoxy)"
        },
        {
            "NASL family": "Amazon Linux Local Security Checks",
            "NASL id": "ALA_ALAS-2016-724.NASL",
            "description": "It was found that Python's httplib library (used urllib, urllib2 and others) did not properly check HTTP header input in HTTPConnection.putheader(). An attacker could use this flow to inject additional headers in a Python application that allows user provided header name or values. (CVE-2016-5699)\n\nIt was found that Python's smtplib library did not return an exception if StartTLS fails to establish correctly in the SMTP.starttls() function. An attacker with ability to launch an active man in the middle attack could strip out the STARTTLS command without generating an exception on the python SMTP client application, preventing the establishment of the TLS layer. (CVE-2016-0772)\n\nA vulnerability was discovered in Python, in the built-in zipimporter.\nA specially crafted zip file placed in a module path such that it would be loaded by a later 'import' statement could cause a heap overflow, leading to arbitrary code execution. (CVE-2016-5636)",
            "last seen": "2019-02-21",
            "modified": "2018-04-18",
            "plugin id": "92471",
            "published": "2016-07-21",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=92471",
            "title": "Amazon Linux AMI : python26 / python27,python34 (ALAS-2016-724)"
        },
        {
            "NASL family": "Gentoo Local Security Checks",
            "NASL id": "GENTOO_GLSA-201701-18.NASL",
            "description": "The remote host is affected by the vulnerability described in GLSA-201701-18 (Python: Multiple vulnerabilities)\n\n    Multiple vulnerabilities have been discovered in Python. Please review       the CVE identifiers referenced below for details.\n  Impact :\n\n    A remote attacker could entice a user to open a specially crafted index       file using Python&rsquo;s dumbdbm module, possibly resulting in execution of       arbitrary code with the privileges of the process.\n    A remote attacker could entice a user to process a specially crafted       input stream using Python&rsquo;s zipimporter module, possibly allowing       attackers to cause unspecified impact.\n    A man in the middle attacker could strip out the STARTTLS command       without generating an exception on the Python SMTP client application,       preventing the establishment of the TLS layer.\n  Workaround :\n\n    There is no known workaround at this time.",
            "last seen": "2019-02-21",
            "modified": "2017-02-27",
            "plugin id": "96399",
            "published": "2017-01-11",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=96399",
            "title": "GLSA-201701-18 : Python: Multiple vulnerabilities"
        },
        {
            "NASL family": "Debian Local Security Checks",
            "NASL id": "DEBIAN_DLA-1663.NASL",
            "description": "This DLA fixes a a problem parsing x509 certificates, an pickle integer overflow, and some other minor issues :\n\nCVE-2016-0772\n\nThe smtplib library in CPython does not return an error when StartTLS fails, which might allow man-in-the-middle attackers to bypass the TLS protections by leveraging a network position between the client and the registry to block the StartTLS command, aka a 'StartTLS stripping attack.'\n\nCVE-2016-5636\n\nInteger overflow in the get_data function in zipimport.c in CPython allows remote attackers to have unspecified impact via a negative data size value, which triggers a heap-based buffer overflow.\n\nCVE-2016-5699\n\nCRLF injection vulnerability in the HTTPConnection.putheader function in urllib2 and urllib in CPython allows remote attackers to inject arbitrary HTTP headers via CRLF sequences in a URL.\n\nCVE-2018-20406\n\nModules/_pickle.c has an integer overflow via a large LONG_BINPUT value that is mishandled during a 'resize to twice the size' attempt.\nThis issue might cause memory exhaustion, but is only relevant if the pickle format is used for serializing tens or hundreds of gigabytes of data.\n\nCVE-2019-5010\n\nNULL pointer dereference using a specially crafted X509 certificate.\n\nFor Debian 8 'Jessie', these problems have been fixed in version 3.4.2-1+deb8u2.\n\nWe recommend that you upgrade your python3.4 packages.\n\nNOTE: Tenable Network Security has extracted the preceding description block directly from the DLA security advisory. Tenable has attempted to automatically clean and format it as much as possible without introducing additional issues.",
            "last seen": "2019-02-21",
            "modified": "2019-02-08",
            "plugin id": "122036",
            "published": "2019-02-08",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=122036",
            "title": "Debian DLA-1663-1 : python3.4 security update"
        },
        {
            "NASL family": "Fedora Local Security Checks",
            "NASL id": "FEDORA_2016-6C2B74BB96.NASL",
            "description": "Security fixes for CVE-2016-0772 and CVE-2016-5699\n\nNote that Tenable Network Security has extracted the preceding description block directly from the Fedora update system website.\nTenable has attempted to automatically clean and format it as much as possible without introducing additional issues.",
            "last seen": "2019-02-21",
            "modified": "2016-10-18",
            "plugin id": "92254",
            "published": "2016-07-15",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=92254",
            "title": "Fedora 24 : pypy3 (2016-6c2b74bb96)"
        },
        {
            "NASL family": "Debian Local Security Checks",
            "NASL id": "DEBIAN_DLA-522.NASL",
            "description": "- CVE-2016-0772 A vulnerability in smtplib allowing MITM     attacker to perform a startTLS stripping attack. smtplib     does not seem to raise an exception when the remote end     (smtp server) is capable of negotiating starttls but     fails to respond with 220 (ok) to an explicit call of     SMTP.starttls(). This may allow a malicious MITM to     perform a startTLS stripping attack if the client code     does not explicitly check the response code for     startTLS.\n\n  - CVE-2016-5636 Issue #26171: Fix possible integer     overflow and heap corruption in zipimporter.get_data().\n\n  - CVE-2016-5699 Protocol injection can occur not only if     an application sets a header based on user-supplied     values, but also if the application ever tries to fetch     a URL specified by an attacker (SSRF case) OR if the     application ever accesses any malicious web server     (redirection case).\n\nFor Debian 7 'Wheezy', these problems have been fixed in version 2.7.3-6+deb7u3.\n\nWe recommend that you upgrade your python2.7 packages.\n\nNOTE: Tenable Network Security has extracted the preceding description block directly from the DLA security advisory. Tenable has attempted to automatically clean and format it as much as possible without introducing additional issues.",
            "last seen": "2019-02-21",
            "modified": "2018-07-06",
            "plugin id": "91733",
            "published": "2016-06-22",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=91733",
            "title": "Debian DLA-522-1 : python2.7 security update"
        },
        {
            "NASL family": "SuSE Local Security Checks",
            "NASL id": "OPENSUSE-2016-906.NASL",
            "description": "Python was updated to fix three security issues.\n\nThe following vulnerabilities were fixed :\n\n  - CVE-2016-0772: TLS stripping attack on smtplib     (bsc#984751)\n\n  - CVE-2016-5636: zipimporter heap overflow (bsc#985177)\n\n  - CVE-2016-5699: httplib header injection (bsc#985348)\n\nThis update also includes all upstream bug fixes and improvements in Python 2.7.12.\n\nIt also includes the following packaging changes :\n\n  - reintroduce support for CA directory path\n\nThe following tracked packaging issues were fixed :\n\n  - broken overflow checks (bsc#964182)",
            "last seen": "2019-02-21",
            "modified": "2016-10-13",
            "plugin id": "92595",
            "published": "2016-07-28",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=92595",
            "title": "openSUSE Security Update : python (openSUSE-2016-906)"
        },
        {
            "NASL family": "SuSE Local Security Checks",
            "NASL id": "SUSE_SU-2016-2270-1.NASL",
            "description": "This update for python fixes the following issues :\n\n  - CVE-2016-0772: smtplib vulnerability opens startTLS     stripping attack (bsc#984751)\n\n  - CVE-2016-5699: incorrect validation of HTTP headers     allow header injection (bsc#985348)\n\n  - CVE-2016-1000110: HTTPoxy vulnerability in urllib, fixed     by disregarding HTTP_PROXY when REQUEST_METHOD is also     set (bsc#989523)\n\nNote that Tenable Network Security has extracted the preceding description block directly from the SUSE security advisory. Tenable has attempted to automatically clean and format it as much as possible without introducing additional issues.",
            "last seen": "2019-02-21",
            "modified": "2018-11-29",
            "plugin id": "93438",
            "published": "2016-09-12",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=93438",
            "title": "SUSE SLES11 Security Update : python (SUSE-SU-2016:2270-1) (httpoxy)"
        },
        {
            "NASL family": "Fedora Local Security Checks",
            "NASL id": "FEDORA_2016-E37F15A5F4.NASL",
            "description": "Security fix for CVE-2016-0772\n\n----\n\nAdded patch for fixing possible integer overflow and heap corruption in zipimporter.get_data()\n\nNote that Tenable Network Security has extracted the preceding description block directly from the Fedora update system website.\nTenable has attempted to automatically clean and format it as much as possible without introducing additional issues.",
            "last seen": "2019-02-21",
            "modified": "2016-10-18",
            "plugin id": "92295",
            "published": "2016-07-15",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=92295",
            "title": "Fedora 22 : python (2016-e37f15a5f4)"
        },
        {
            "NASL family": "Ubuntu Local Security Checks",
            "NASL id": "UBUNTU_USN-3134-1.NASL",
            "description": "It was discovered that the smtplib library in Python did not return an error when StartTLS fails. A remote attacker could possibly use this to expose sensitive information. (CVE-2016-0772)\n\nRemi Rampin discovered that Python would not protect CGI applications from contents of the HTTP_PROXY environment variable when based on the contents of the Proxy header from HTTP requests. A remote attacker could possibly use this to cause a CGI application to redirect outgoing HTTP requests. (CVE-2016-1000110)\n\nInsu Yun discovered an integer overflow in the zipimporter module in Python that could lead to a heap-based overflow. An attacker could use this to craft a special zip file that when read by Python could possibly execute arbitrary code. (CVE-2016-5636)\n\nGuido Vranken discovered that the urllib modules in Python did not properly handle carriage return line feed (CRLF) in headers. A remote attacker could use this to craft URLs that inject arbitrary HTTP headers. This issue only affected Ubuntu 12.04 LTS and Ubuntu 14.04 LTS. (CVE-2016-5699).\n\nNote that Tenable Network Security has extracted the preceding description block directly from the Ubuntu security advisory. Tenable has attempted to automatically clean and format it as much as possible without introducing additional issues.",
            "last seen": "2019-02-21",
            "modified": "2018-12-01",
            "plugin id": "95284",
            "published": "2016-11-23",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=95284",
            "title": "Ubuntu 12.04 LTS / 14.04 LTS / 16.04 LTS : python2.7, python3.2, python3.4, python3.5 vulnerabilities (USN-3134-1) (httpoxy)"
        },
        {
            "NASL family": "SuSE Local Security Checks",
            "NASL id": "SUSE_SU-2016-2859-1.NASL",
            "description": "This update provides Python 3.4.5, which brings many fixes and enhancements. The following security issues have been fixed :\n\n  - CVE-2016-1000110: CGIHandler could have allowed setting     of HTTP_PROXY environment variable based on     user-supplied Proxy request header. (bsc#989523)\n\n  - CVE-2016-0772: A vulnerability in smtplib could have     allowed a MITM attacker to perform a startTLS stripping     attack. (bsc#984751)\n\n  - CVE-2016-5636: A heap overflow in Python's zipimport     module. (bsc#985177)\n\n  - CVE-2016-5699: A header injection flaw in     urrlib2/urllib/httplib/http.client. (bsc#985348) The     update also includes the following non-security fixes :\n\n  - Don't force 3rd party C extensions to be built with\n\n    -Werror=declaration-after-statement. (bsc#951166)\n\n  - Make urllib proxy var handling behave as usual on POSIX.\n    (bsc#983582) For a comprehensive list of changes please     refer to the upstream change log:\n    https://docs.python.org/3.4/whatsnew/changelog.html\n\nNote that Tenable Network Security has extracted the preceding description block directly from the SUSE security advisory. Tenable has attempted to automatically clean and format it as much as possible without introducing additional issues.",
            "last seen": "2019-02-21",
            "modified": "2018-11-29",
            "plugin id": "94969",
            "published": "2016-11-18",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=94969",
            "title": "SUSE SLED12 / SLES12 Security Update : python3 (SUSE-SU-2016:2859-1) (httpoxy)"
        },
        {
            "NASL family": "Fedora Local Security Checks",
            "NASL id": "FEDORA_2016-B046B56518.NASL",
            "description": "Security fixes for CVE-2016-0772 and CVE-2016-5699\n\nNote that Tenable Network Security has extracted the preceding description block directly from the Fedora update system website.\nTenable has attempted to automatically clean and format it as much as possible without introducing additional issues.",
            "last seen": "2019-02-21",
            "modified": "2016-10-18",
            "plugin id": "92281",
            "published": "2016-07-15",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=92281",
            "title": "Fedora 22 : pypy3 (2016-b046b56518)"
        },
        {
            "NASL family": "SuSE Local Security Checks",
            "NASL id": "SUSE_SU-2016-2106-1.NASL",
            "description": "This update for python fixes the following issues :\n\n  - CVE-2016-0772: smtplib vulnerability opens startTLS     stripping attack (bsc#984751)\n\n  - CVE-2016-5636: heap overflow when importing malformed     zip files (bsc#985177)\n\n  - CVE-2016-5699: incorrect validation of HTTP headers     allow header injection (bsc#985348)\n\n  - CVE-2016-1000110: HTTPoxy vulnerability in urllib, fixed     by disregarding HTTP_PROXY when REQUEST_METHOD is also     set (bsc#989523)\n\nNote that Tenable Network Security has extracted the preceding description block directly from the SUSE security advisory. Tenable has attempted to automatically clean and format it as much as possible without introducing additional issues.",
            "last seen": "2019-02-21",
            "modified": "2018-11-29",
            "plugin id": "93300",
            "published": "2016-09-02",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=93300",
            "title": "SUSE SLED12 / SLES12 Security Update : python (SUSE-SU-2016:2106-1) (httpoxy)"
        },
        {
            "NASL family": "SuSE Local Security Checks",
            "NASL id": "OPENSUSE-2016-997.NASL",
            "description": "This update for python3 fixes the following issues :\n\n  - apply fix for CVE-2016-1000110 - CGIHandler: sets     environmental variable based on user-supplied Proxy     request header (fixes boo#989523, CVE-2016-1000110)\n\n  - update to 3.4.5 check:\n    https://docs.python.org/3.4/whatsnew/changelog.html     (fixes boo#984751, CVE-2016-0772) (fixes boo#985177,     CVE-2016-5636) (fixes boo#985348, CVE-2016-5699)\n\n  - Bump DH parameters to 2048 bit to fix logjam security     issue. boo#935856\n\n  - apply fix for CVE-2016-1000110 - CGIHandler: sets     environmental variable based on user-supplied Proxy     request header: (fixes boo#989523, CVE-2016-1000110)",
            "last seen": "2019-02-21",
            "modified": "2016-10-24",
            "plugin id": "93069",
            "published": "2016-08-22",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=93069",
            "title": "openSUSE Security Update : python3 (openSUSE-2016-997) (httpoxy)"
        },
        {
            "NASL family": "Fedora Local Security Checks",
            "NASL id": "FEDORA_2016-34CA5273E9.NASL",
            "description": "Security fixes for CVE-2016-0772 and CVE-2016-5699\n\nNote that Tenable Network Security has extracted the preceding description block directly from the Fedora update system website.\nTenable has attempted to automatically clean and format it as much as possible without introducing additional issues.",
            "last seen": "2019-02-21",
            "modified": "2016-10-18",
            "plugin id": "92240",
            "published": "2016-07-15",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=92240",
            "title": "Fedora 23 : pypy3 (2016-34ca5273e9)"
        },
        {
            "NASL family": "SuSE Local Security Checks",
            "NASL id": "SUSE_SU-2016-2653-1.NASL",
            "description": "This update provides Python 3.4.5, which brings many fixes and enhancements. The following security issues have been fixed :\n\n  - CVE-2016-1000110: CGIHandler could have allowed setting     of HTTP_PROXY environment variable based on     user-supplied Proxy request header. (bsc#989523)\n\n  - CVE-2016-0772: A vulnerability in smtplib could have     allowed a MITM attacker to perform a startTLS stripping     attack. (bsc#984751)\n\n  - CVE-2016-5636: A heap overflow in Python's zipimport     module. (bsc#985177)\n\n  - CVE-2016-5699: A header injection flaw in     urrlib2/urllib/httplib/http.client. (bsc#985348) The     update also includes the following non-security fixes :\n\n  - Don't force 3rd party C extensions to be built with\n\n    -Werror=declaration-after-statement. (bsc#951166)\n\n  - Make urllib proxy var handling behave as usual on POSIX.\n    (bsc#983582) For a comprehensive list of changes please     refer to the upstream change log:\n    https://docs.python.org/3.4/whatsnew/changelog.html\n\nNote that Tenable Network Security has extracted the preceding description block directly from the SUSE security advisory. Tenable has attempted to automatically clean and format it as much as possible without introducing additional issues.",
            "last seen": "2019-02-21",
            "modified": "2019-01-02",
            "plugin id": "94321",
            "published": "2016-10-27",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=94321",
            "title": "SUSE SLED12 / SLES12 Security Update : python3 (SUSE-SU-2016:2653-1) (httpoxy)"
        },
        {
            "NASL family": "CGI abuses",
            "NASL id": "SPLUNK_650.NASL",
            "description": "According to its self-reported version number, the version of Splunk Enterprise hosted on the remote web server is 5.0.x prior to 5.0.17, 6.0.x prior to 6.0.13, 6.1.x prior to 6.1.12, 6.2.x prior to 6.2.12, 6.3.x prior to 6.3.8, or 6.4.x prior to 6.4.4; or else it is Splunk Light prior to 6.5.0. It is, therefore, affected by multiple vulnerabilities :\n\n  - A heap buffer overflow condition exists in Python,     specifically in the get_data() function within file     Modules/zipimport.c, due to improper validation of     user-supplied input. An unauthenticated, remote attacker     can exploit this, via negative data size values, to     cause a denial of service condition or the possible     execution of arbitrary code. (CVE-2016-5636)\n\n  - A CRLF injection vulnerability exists in Python,     specifically in the HTTPConnection.putheader() function     within file Modules/zipimport.c. An unauthenticated,     remote attacker can exploit this to inject arbitrary     HTTP headers via CRLF sequences in a URL, allowing     cross-site scripting (XSS) and other attacks.\n    (CVE-2016-5699)\n\n  - A flaw exists in Python within the smtplib library due     to a failure to properly raise exceptions when smtp     servers are able to negotiate starttls but fail to     respond properly. A man-in-the-middle attacker can     exploit this issue to bypass TLS protections via a     'StartTLS stripping attack.' (CVE-2016-0772)\n\n  - An HTTP request injection vulnerability exists in Splunk     that permits leakage of authentication tokens. An     unauthenticated, remote attacker can exploit this to     access the Splunk REST API with the same rights as the     user.\n\nNote that the Python vulnerabilities stated above do not affect the Splunk Enterprise 6.4.x versions, and the HTTP request injection vulnerability does not affect the Splunk Light versions.",
            "last seen": "2019-02-21",
            "modified": "2019-01-02",
            "plugin id": "94932",
            "published": "2016-11-17",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=94932",
            "title": "Splunk Enterprise < 5.0.17 / 6.0.13 / 6.1.12 / 6.2.12 / 6.3.8 / 6.4.4 or Splunk Light < 6.5.0 Multiple Vulnerabilities"
        },
        {
            "NASL family": "OracleVM Local Security Checks",
            "NASL id": "ORACLEVM_OVMSA-2016-0099.NASL",
            "description": "The remote OracleVM system is missing necessary patches to address critical security updates :\n\n  - Add Oracle Linux distribution in platform.py [orabug     21288328] (Keshav Sharma)\n\n  - Fix for CVE-2016-1000110 HTTPoxy attack Resolves:\n    rhbz#1359161\n\n  - Fix for CVE-2016-0772 python: smtplib StartTLS stripping     attack (rhbz#1303647) Raise an error when STARTTLS fails     (upstream patch)\n\n  - Fix for CVE-2016-5699 python: http protocol steam     injection attack (rhbz#1303699) Disabled HTTP header     injections in httplib (upstream patch) Resolves:\n    rhbz#1346354",
            "last seen": "2019-02-21",
            "modified": "2018-07-24",
            "plugin id": "93038",
            "published": "2016-08-19",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=93038",
            "title": "OracleVM 3.3 / 3.4 : python (OVMSA-2016-0099) (httpoxy)"
        },
        {
            "NASL family": "Huawei Local Security Checks",
            "NASL id": "EULEROS_SA-2016-1036.NASL",
            "description": "According to the versions of the python packages installed, the EulerOS installation on the remote host is affected by the following vulnerabilities :\n\n  - It was discovered that the Python CGIHandler class did     not properly protect against the HTTP_PROXY variable     name clash in a CGI context. A remote attacker could     possibly use this flaw to redirect HTTP requests     performed by a Python CGI script to an     attacker-controlled proxy via a malicious HTTP request.\n    (CVE-2016-1000110)\n\n  - It was found that Python's smtplib library did not     return an exception when StartTLS failed to be     established in the SMTP.starttls() function. A man in     the middle attacker could strip out the STARTTLS     command without generating an exception on the Python     SMTP client application, preventing the establishment     of the TLS layer. (CVE-2016-0772)\n\n  - It was found that the Python's httplib library (used by     urllib, urllib2 and others) did not properly check     HTTPConnection.putheader() function arguments. An     attacker could use this flaw to inject additional     headers in a Python application that allowed user     provided header names or values. (CVE-2016-5699)\n\nNote that Tenable Network Security has extracted the preceding description block directly from the EulerOS security advisory. Tenable has attempted to automatically clean and format it as much as possible without introducing additional issues.",
            "last seen": "2019-02-21",
            "modified": "2018-11-14",
            "plugin id": "99799",
            "published": "2017-05-01",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=99799",
            "title": "EulerOS 2.0 SP1 : python (EulerOS-SA-2016-1036)"
        }
    ],
    "ranking": [
        [
            {
                "circl": 3
            }
        ]
    ],
    "redhat": {
        "advisories": [
            {
                "rhsa": {
                    "id": "RHSA-2016:1626"
                }
            },
            {
                "rhsa": {
                    "id": "RHSA-2016:1627"
                }
            },
            {
                "rhsa": {
                    "id": "RHSA-2016:1628"
                }
            },
            {
                "rhsa": {
                    "id": "RHSA-2016:1629"
                }
            },
            {
                "rhsa": {
                    "id": "RHSA-2016:1630"
                }
            }
        ],
        "rpms": [
            "python-0:2.7.5-38.el7_2",
            "python-debug-0:2.7.5-38.el7_2",
            "python-devel-0:2.7.5-38.el7_2",
            "python-libs-0:2.7.5-38.el7_2",
            "python-test-0:2.7.5-38.el7_2",
            "python-tools-0:2.7.5-38.el7_2",
            "tkinter-0:2.7.5-38.el7_2",
            "python-0:2.6.6-66.el6_8",
            "python-devel-0:2.6.6-66.el6_8",
            "python-libs-0:2.6.6-66.el6_8",
            "python-test-0:2.6.6-66.el6_8",
            "python-tools-0:2.6.6-66.el6_8",
            "tkinter-0:2.6.6-66.el6_8"
        ]
    },
    "references": [
        "http://rhn.redhat.com/errata/RHSA-2016-1626.html",
        "http://rhn.redhat.com/errata/RHSA-2016-1627.html",
        "http://rhn.redhat.com/errata/RHSA-2016-1628.html",
        "http://rhn.redhat.com/errata/RHSA-2016-1629.html",
        "http://rhn.redhat.com/errata/RHSA-2016-1630.html",
        "http://www.openwall.com/lists/oss-security/2016/06/14/9",
        "http://www.securityfocus.com/bid/91225",
        "http://www.splunk.com/view/SP-CAAAPSV",
        "http://www.splunk.com/view/SP-CAAAPUE",
        "https://bugzilla.redhat.com/show_bug.cgi?id=1303647",
        "https://docs.python.org/3.4/whatsnew/changelog.html#python-3-4-5",
        "https://docs.python.org/3.5/whatsnew/changelog.html#python-3-5-2",
        "https://hg.python.org/cpython/raw-file/v2.7.12/Misc/NEWS",
        "https://hg.python.org/cpython/rev/b3ce713fb9be",
        "https://hg.python.org/cpython/rev/d590114c2394",
        "https://lists.debian.org/debian-lts-announce/2019/02/msg00011.html",
        "https://security.gentoo.org/glsa/201701-18"
    ],
    "refmap": {
        "bid": [
            "91225"
        ],
        "confirm": [
            "http://www.splunk.com/view/SP-CAAAPSV",
            "http://www.splunk.com/view/SP-CAAAPUE",
            "https://bugzilla.redhat.com/show_bug.cgi?id=1303647",
            "https://docs.python.org/3.4/whatsnew/changelog.html#python-3-4-5",
            "https://docs.python.org/3.5/whatsnew/changelog.html#python-3-5-2",
            "https://hg.python.org/cpython/raw-file/v2.7.12/Misc/NEWS",
            "https://hg.python.org/cpython/rev/b3ce713fb9be",
            "https://hg.python.org/cpython/rev/d590114c2394"
        ],
        "gentoo": [
            "GLSA-201701-18"
        ],
        "mlist": [
            "[debian-lts-announce] 20190207 [SECURITY] [DLA 1663-1] python3.4 security update",
            "[oss-security] 20160614 Python CVE-2016-0772: smtplib StartTLS stripping attack"
        ]
    },
    "summary": "The smtplib library in CPython (aka Python) before 2.7.12, 3.x before 3.4.5, and 3.5.x before 3.5.2 does not return an error when StartTLS fails, which might allow man-in-the-middle attackers to bypass the TLS protections by leveraging a network position between the client and the registry to block the StartTLS command, aka a \"StartTLS stripping attack.\"",
    "vulnerable_configuration": [
        {
            "id": "cpe:2.3:a:python:python:3.5.0",
            "title": "Python 3.5.0"
        },
        {
            "id": "cpe:2.3:a:python:python:3.5.1",
            "title": "Python 3.5.1"
        },
        {
            "id": "cpe:2.3:a:python:python:3.0",
            "title": "Python 3.0"
        },
        {
            "id": "cpe:2.3:a:python:python:3.0.1",
            "title": "Python 3.0.1"
        },
        {
            "id": "cpe:2.3:a:python:python:3.1.0",
            "title": "Python 3.1.0"
        },
        {
            "id": "cpe:2.3:a:python:python:3.1.1",
            "title": "Python 3.1.1"
        },
        {
            "id": "cpe:2.3:a:python:python:3.1.2",
            "title": "Python 3.1.2"
        },
        {
            "id": "cpe:2.3:a:python:python:3.1.3",
            "title": "Python 3.1.3"
        },
        {
            "id": "cpe:2.3:a:python:python:3.1.4",
            "title": "Python 3.1.4"
        },
        {
            "id": "cpe:2.3:a:python:python:3.1.5",
            "title": "Python 3.1.5"
        },
        {
            "id": "cpe:2.3:a:python:python:3.2.0",
            "title": "Python 3.2.0"
        },
        {
            "id": "cpe:2.3:a:python:python:3.2.1",
            "title": "Python 3.2.1"
        },
        {
            "id": "cpe:2.3:a:python:python:3.2.2",
            "title": "Python 3.2.2"
        },
        {
            "id": "cpe:2.3:a:python:python:3.2.3",
            "title": "Python 3.2.3"
        },
        {
            "id": "cpe:2.3:a:python:python:3.2.4",
            "title": "Python 3.2.4"
        },
        {
            "id": "cpe:2.3:a:python:python:3.2.5",
            "title": "Python 3.2.5"
        },
        {
            "id": "cpe:2.3:a:python:python:3.2.6",
            "title": "Python 3.2.6"
        },
        {
            "id": "cpe:2.3:a:python:python:3.3.0",
            "title": "Python 3.3.0"
        },
        {
            "id": "cpe:2.3:a:python:python:3.3.1",
            "title": "Python 3.3.1"
        },
        {
            "id": "cpe:2.3:a:python:python:3.3.2",
            "title": "Python 3.3.2"
        },
        {
            "id": "cpe:2.3:a:python:python:3.3.3",
            "title": "Python 3.3.3"
        },
        {
            "id": "cpe:2.3:a:python:python:3.3.4",
            "title": "Python 3.3.4"
        },
        {
            "id": "cpe:2.3:a:python:python:3.3.5",
            "title": "Python 3.3.5"
        },
        {
            "id": "cpe:2.3:a:python:python:3.3.6",
            "title": "Python 3.3.6"
        },
        {
            "id": "cpe:2.3:a:python:python:3.4.0",
            "title": "Python 3.4.0"
        },
        {
            "id": "cpe:2.3:a:python:python:3.4.1",
            "title": "Python 3.4.1"
        },
        {
            "id": "cpe:2.3:a:python:python:3.4.2",
            "title": "Python 3.4.2"
        },
        {
            "id": "cpe:2.3:a:python:python:3.4.3",
            "title": "Python 3.4.3"
        },
        {
            "id": "cpe:2.3:a:python:python:3.4.4",
            "title": "Python 3.4.4"
        },
        {
            "id": "cpe:2.3:a:python:python:2.7.11",
            "title": "Python 2.7.11"
        }
    ],
    "vulnerable_configuration_cpe_2_2": [
        "cpe:/a:python:python:3.5.0",
        "cpe:/a:python:python:3.5.1",
        "cpe:/a:python:python:3.0",
        "cpe:/a:python:python:3.0.1",
        "cpe:/a:python:python:3.1.0",
        "cpe:/a:python:python:3.1.1",
        "cpe:/a:python:python:3.1.2",
        "cpe:/a:python:python:3.1.3",
        "cpe:/a:python:python:3.1.4",
        "cpe:/a:python:python:3.1.5",
        "cpe:/a:python:python:3.2.0",
        "cpe:/a:python:python:3.2.1",
        "cpe:/a:python:python:3.2.2",
        "cpe:/a:python:python:3.2.3",
        "cpe:/a:python:python:3.2.4",
        "cpe:/a:python:python:3.2.5",
        "cpe:/a:python:python:3.2.6",
        "cpe:/a:python:python:3.3.0",
        "cpe:/a:python:python:3.3.1",
        "cpe:/a:python:python:3.3.2",
        "cpe:/a:python:python:3.3.3",
        "cpe:/a:python:python:3.3.4",
        "cpe:/a:python:python:3.3.5",
        "cpe:/a:python:python:3.3.6",
        "cpe:/a:python:python:3.4.0",
        "cpe:/a:python:python:3.4.1",
        "cpe:/a:python:python:3.4.2",
        "cpe:/a:python:python:3.4.3",
        "cpe:/a:python:python:3.4.4",
        "cpe:/a:python:python:2.7.11"
    ]
}