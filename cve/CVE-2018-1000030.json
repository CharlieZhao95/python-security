{
    "Modified": "2018-02-08T12:29:00.190000",
    "Published": "2018-02-08T12:29:00.177000",
    "capec": [
        {
            "id": "26",
            "name": "Leveraging Race Conditions",
            "prerequisites": "A resource is accessed/modified concurrently by multiple processes such that a race condition exists.\nThe attacker has the ability to modify the resource.",
            "related_weakness": [
                "368",
                "363",
                "366",
                "370",
                "362",
                "662",
                "689",
                "667",
                "665"
            ],
            "solutions": "Use safe libraries to access resources such as files.\nBe aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition.\nUse synchronization to control the flow of execution.\nUse static analysis tools to find race conditions.\nPay attention to concurrency problems related to the access of resources.",
            "summary": "This attack targets a race condition occurring when multiple processes access and manipulate the same resource concurrently and the outcome of the execution depends on the particular order in which the access takes place. The attacker can leverage a race condition by \"running the race\", modifying the resource and modifying the normal execution flow. For instance a race condition can occur while accessing a file, the attacker can trick the system by replacing the original file with his version and cause the system to read the malicious file."
        },
        {
            "id": "29",
            "name": "Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions",
            "prerequisites": "A resource is access/modified concurrently by multiple processes.\nThe attacker is able to modify resource.\nA race condition exists while accessing a resource.",
            "related_weakness": [
                "367",
                "368",
                "366",
                "370",
                "362",
                "662",
                "691",
                "663",
                "665"
            ],
            "solutions": "Use safe libraries to access resources such as files.\nBe aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition.\nUse synchronization to control the flow of execution.\nUse static analysis tools to find race conditions.\nPay attention to concurrency problems related to the access of resources.",
            "summary": "This attack targets a race condition occurring between the time of check (state) for a resource and the time of use of a resource. The typical example is the file access. The attacker can leverage a file access race condition by \"running the race\", meaning that he would modify the resource between the first time the target program accesses the file and the time the target program uses the file. During that period of time, the attacker could do something such as replace the file and cause an escalation of privilege."
        }
    ],
    "cvss": 6.8,
    "cwe": "CWE-362",
    "id": "CVE-2018-1000030",
    "last-modified": "2018-03-10T10:12:20.607000",
    "nessus": [
        {
            "NASL family": "SuSE Local Security Checks",
            "NASL id": "OPENSUSE-2018-511.NASL",
            "description": "This update for python fixes the following issues :\n\nSecurity issues fixed :\n\n  - CVE-2017-1000158: Fixed integer overflows in     PyString_DecodeEscape that could have resulted in     heap-based buffer overflow attacks and possible     arbitrary code execution (bsc#1068664).\n\n  - CVE-2018-1000030: Fixed crash inside the Python     interpreter when multiple threads used the same I/O     stream concurrently (bsc#1079300).\n\nThis update was imported from the SUSE:SLE-12-SP1:Update update project.",
            "last seen": "2018-05-30",
            "modified": "2018-05-24",
            "plugin id": "110069",
            "published": "2018-05-24",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=110069",
            "title": "openSUSE Security Update : python (openSUSE-2018-511)"
        },
        {
            "NASL family": "SuSE Local Security Checks",
            "NASL id": "SUSE_SU-2018-1372-1.NASL",
            "description": "This update for python fixes the following issues: Security issues fixed :\n\n  - CVE-2017-1000158: Fixed integer overflows in     PyString_DecodeEscape that could have resulted in     heap-based buffer overflow attacks and possible     arbitrary code execution (bsc#1068664).\n\n  - CVE-2018-1000030: Fixed crash inside the Python     interpreter when multiple threads used the same I/O     stream concurrently (bsc#1079300).\n\nNote that Tenable Network Security has extracted the preceding description block directly from the SUSE security advisory. Tenable has attempted to automatically clean and format it as much as possible without introducing additional issues.",
            "last seen": "2018-05-24",
            "modified": "2018-05-23",
            "plugin id": "110037",
            "published": "2018-05-23",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=110037",
            "title": "SUSE SLED12 / SLES12 Security Update : python (SUSE-SU-2018:1372-1)"
        },
        {
            "NASL family": "Huawei Local Security Checks",
            "NASL id": "EULEROS_SA-2018-1078.NASL",
            "description": "According to the version of the python packages installed, the EulerOS installation on the remote host is affected by the following vulnerability :\n\n  - python 2.7.14 is vulnerable to a Heap-Buffer-Overflow     as well as a Heap-Use-After-Free. Python versions prior     to 2.7.14 may also be vulnerable and it appears that     Python 2.7.17 and prior may also be vulnerable however     this has not been confirmed. The vulnerability lies     when multiply threads are handling large amounts of     data. In both cases there is essentially a race     condition that occurs. For the Heap-Buffer-Overflow,     Thread 2 is creating the size for a buffer, but Thread1     is already writing to the buffer without knowing how     much to write. So when a large amount of data is being     processed, it is very easy to cause memory corruption     using a Heap-Buffer-Overflow. As for the     Use-After-Free,     Thread3->Malloc->Thread1->Free's->Thread2-Re-uses-Free'     d Memory. The PSRT has stated that this is not a     security vulnerability due to the fact that the     attacker must be able to run code, however in some     situations, such as function as a service, this     vulnerability can potentially be used by an attacker to     violate a trust boundary, as such the DWF feels this     issue deserves a CVE.(CVE-2018-1000030)\n\nNote that Tenable Network Security has extracted the preceding description block directly from the EulerOS security advisory. Tenable has attempted to automatically clean and format it as much as possible without introducing additional issues.",
            "last seen": "2018-06-14",
            "modified": "2018-06-13",
            "plugin id": "109476",
            "published": "2018-05-02",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=109476",
            "title": "EulerOS 2.0 SP1 : python (EulerOS-SA-2018-1078)"
        }
    ],
    "ranking": [
        [
            {
                "circl": 3
            }
        ]
    ],
    "references": [
        "https://bugs.python.org/issue31530",
        "https://drive.google.com/file/d/1oyR9DAZjZK_SCn3mor6NRAYLJS6ueXaY/view",
        "https://www.dropbox.com/sh/sj3ee7xv55j36k7/AADwP-YfOYikBMuy32e0uvPFa?dl=0"
    ],
    "refmap": {
        "confirm": [
            "https://bugs.python.org/issue31530"
        ],
        "misc": [
            "https://drive.google.com/file/d/1oyR9DAZjZK_SCn3mor6NRAYLJS6ueXaY/view",
            "https://www.dropbox.com/sh/sj3ee7xv55j36k7/AADwP-YfOYikBMuy32e0uvPFa?dl=0"
        ]
    },
    "summary": "Python 2.7.14 is vulnerable to a Heap-Buffer-Overflow as well as a Heap-Use-After-Free. Python versions prior to 2.7.14 may also be vulnerable and it appears that Python 2.7.17 and prior may also be vulnerable however this has not been confirmed. The vulnerability lies when multiply threads are handling large amounts of data. In both cases there is essentially a race condition that occurs. For the Heap-Buffer-Overflow, Thread 2 is creating the size for a buffer, but Thread1 is already writing to the buffer without knowing how much to write. So when a large amount of data is being processed, it is very easy to cause memory corruption using a Heap-Buffer-Overflow. As for the Use-After-Free, Thread3->Malloc->Thread1->Free's->Thread2-Re-uses-Free'd Memory. The PSRT has stated that this is not a security vulnerability due to the fact that the attacker must be able to run code, however in some situations, such as function as a service, this vulnerability can potentially be used by an attacker to violate a trust boundary, as such the DWF feels this issue deserves a CVE.",
    "vulnerable_configuration": [
        {
            "id": "cpe:2.3:a:python:python:2.7.14",
            "title": "Python 2.7.14"
        }
    ],
    "vulnerable_configuration_cpe_2_2": [
        "cpe:/a:python:python:2.7.14"
    ]
}