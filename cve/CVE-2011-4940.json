{
    "Modified": "2013-05-14T23:22:23.143000",
    "Published": "2012-06-27T06:18:36.433000",
    "access": {
        "authentication": "NONE",
        "complexity": "HIGH",
        "vector": "NETWORK"
    },
    "capec": [
        {
            "id": "106",
            "name": "Cross Site Scripting through Log Files",
            "prerequisites": "The system uses a web based interface\nThe system does not cleanse / validate user supplied data before writing it to logs\nInformation from logs is displayed in a web based interface\nThe web based log interface does not HTML output encode the log data prior to displaying it in the administrator console.",
            "related_weakness": [
                "79",
                "117",
                "74",
                "20"
            ],
            "solutions": "Cleanse all user supplied data before placing it in the logs. Reject all bad data. Ensure that the data is in the expected form.\nUse proper HTML output encoding techniques to strip the log data of potentially dangerous scripting characters before displaying it in the administrative console\nIf possible, disable script execution in the administrative interface.",
            "summary": "An attacker may leverage a system weakness where logs are susceptible to log injection to insert scripts into the system's logs. If these logs are later viewed by an administrator through a thin administrative interface and the log data is not properly HTML encoded before being written to the page, the attackers' scripts stored in the log will be executed in the administrative interface with potentially serious consequences. This attack pattern is really a combination of two other attack patterns: log injection and stored cross site scripting."
        },
        {
            "id": "18",
            "name": "Embedding Scripts in Non-Script Elements",
            "prerequisites": "Target client software must be a client that allows script execution based on scripts generated by remote hosts.",
            "related_weakness": [
                "79",
                "80",
                "83",
                "84",
                "82",
                "348",
                "96",
                "20",
                "116",
                "184",
                "86",
                "350",
                "692",
                "697",
                "713",
                "71"
            ],
            "solutions": "Design: Use browser technologies that do not allow client side scripting.\nImplementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.\nImplementation: Perform input validation for all remote content.\nImplementation: Perform output validation for all remote content.\nImplementation: Disable scripting languages such as JavaScript in browser\nImplementation: Session tokens for specific host\nImplementation: Service provider should not use the XMLHttpRequest method to create a local proxy for content from other sites, because the client will not be able to discern what content comes from which host.",
            "summary": "This attack is a form of Cross-Site Scripting (XSS) where malicious scripts are embedded in elements that are not expected to host scripts such as image tags (<img>), comments in XML documents (< !-CDATA->), etc. These tags may not be subject to the same input validation, output validation, and other content filtering and checking routines, so this can create an opportunity for an attacker to tunnel through the application's elements and launch a XSS attack through other elements.\nAs with all remote attacks, it is important to differentiate the ability to launch an attack (such as probing an internal network for unpatched servers) and the ability of the remote attacker to collect and interpret the output of said attack."
        },
        {
            "id": "19",
            "name": "Embedding Scripts within Scripts",
            "prerequisites": "Target software must be able to execute scripts, and also allow attacker to write/upload script",
            "related_weakness": [
                "79",
                "276",
                "279",
                "284",
                "692",
                "697",
                "713",
                "71"
            ],
            "solutions": "Design: Use browser technologies that do not allow client side scripting.\nDesign: Utilize strict type, character, and encoding enforcement\nDesign: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.\nImplementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.\nImplementation: Perform input validation for all remote content.\nImplementation: Perform output validation for all remote content.\nImplementation: Disable scripting languages such as JavaScript in browser\nImplementation: Session tokens for specific host\nImplementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.\nImplementation: Privileges are constrained, if a script is loaded, ensure system runs in chroot jail or other limited authority mode",
            "summary": "An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute scripts. The attacker leverages this capability to execute scripts to execute his/her own script by embedding it within other scripts that the target software is likely to execute. The attacker must have the ability to inject script into script that is likely to be executed. If this is done, then the attacker can potentially launch a variety of probes and attacks against the web server's local environment, in many cases the so-called DMZ, back end resources the web server can communicate with, and other hosts.\nWith the proliferation of intermediaries, such as Web App Firewalls, network devices, and even printers having JVMs and Web servers, there are many locales where an attacker can inject malicious scripts. Since this attack pattern defines scripts within scripts, there are likely privileges to execute said attack on the host.\nOf course, these attacks are not solely limited to the server side, client side scripts like Ajax and client side JavaScript can contain malicious scripts as well. In general all that is required is for there to be sufficient privileges to execute a script, but not protected against writing."
        },
        {
            "id": "198",
            "name": "Cross-Site Scripting in Error Pages",
            "prerequisites": "A third party web server which fails to adequately sanitize messages sent in error pages.\nThe victim must be made to execute a query crafted by the attacker which results in the infected error report.",
            "related_weakness": [
                "79",
                "81"
            ],
            "solutions": "Design: Use libraries and templates that minimize unfiltered input.\nImplementation: Normalize, filter and white list any input that will be used in error messages.\nImplementation: The victim should configure the browser to minimize active content from untrusted sources.",
            "summary": "An attacker distributes a link (or possibly some other query structure) with a request to a third party web server that is malformed and also contains a block of exploit code in order to have the exploit become live code in the resulting error page. When the third party web server receives the crafted request and notes the error it then creates an error message that echoes the malformed message, including the exploit. Doing this converts the exploit portion of the message into to valid language elements that are executed by the viewing browser. When a victim executes the query provided by the attacker the infected error message error message is returned including the exploit code which then runs in the victim's browser. XSS can result in execution of code as well as data leakage (e.g. session cookies can be sent to the attacker). This type of attack is especially dangerous since the exploit appears to come from the third party web server, who the victim may trust and hence be more vulnerable to deception."
        },
        {
            "id": "199",
            "name": "Cross-Site Scripting Using Alternate Syntax",
            "prerequisites": "Target client software must allow scripting such as JavaScript.",
            "related_weakness": [
                "79",
                "87",
                "85",
                "20",
                "86",
                "692",
                "697",
                "713",
                "71"
            ],
            "solutions": "Design: Use browser technologies that do not allow client side scripting.\nDesign: Utilize strict type, character, and encoding enforcement\nImplementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.\nImplementation: Ensure all content coming from the client is using the same encoding; if not, the server-side application must canonicalize the data before applying any filtering.\nImplementation: Perform input validation for all remote content, including remote and user-generated content\nImplementation: Perform output validation for all remote content.\nImplementation: Disable scripting languages such as JavaScript in browser\nImplementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.",
            "summary": "The attacker uses alternate forms of keywords or commands that result in the same action as the primary form but which may not be caught by filters. For example, many keywords are processed in a case insensitive manner. If the site's web filtering algorithm does not convert all tags into a consistent case before the comparison with forbidden keywords it is possible to bypass filters (e.g., incomplete black lists) by using an alternate case structure. For example, the \"script\" tag using the alternate forms of \"Script\" or \"ScRiPt\" may bypass filters where \"script\" is the only form tested. Other variants using different syntax representations are also possible as well as using pollution meta-characters or entities that are eventually ignored by the rendering engine. The attack can result in the execution of otherwise prohibited functionality."
        },
        {
            "id": "209",
            "name": "Cross-Site Scripting Using MIME Type Mismatch",
            "prerequisites": "The victim must follow a crafted link that references a scripting file that is mis-typed as a non-executable file.\nThe victim's browser must detect the true type of a mis-labeled scripting file and invoke the appropriate script interpreter without first performing filtering on the content.",
            "related_weakness": [
                "79",
                "345",
                "646"
            ],
            "solutions": "",
            "summary": "An attacker creates a file with scripting content but where the specified MIME type of the file is such that scripting is not expected. Some browsers will detect that the specified MIME type of the file does not match the actual type of the content and will automatically switch to using an interpreter for the real content type. If the browser does not invoke script filters before doing this, the attackers' script may run on the target unsanitized. For example, the MIME type text/plain may be used where the actual content is text/javascript or text/html. Since text does not contain scripting instructions, the stated MIME type would indicate that filtering is unnecessary. However, if the target application subsequently determines the file's real type and invokes the appropriate interpreter, scripted content could be invoked. In another example, img tags in HTML content could reference a renderable type file instead of an expected image file. The file extension and MIME type can describe an image file, but the file content can be text/javascript or text/html resulting in script execution. If the browser assumes all references in img tags are images, and therefore do not need to be filtered for scripts, this would bypass content filters. In a cross-site scripting attack, the attacker tricks the victim into accessing a URL that uploads a script file with an incorrectly specified MIME type. If the victim's browser switches to the appropriate interpreter without filtering, the attack will execute as a standard XSS attack, possibly revealing the victim's cookies or executing arbitrary script in their browser."
        },
        {
            "id": "243",
            "name": "Cross-Site Scripting in Attributes",
            "prerequisites": "The target application must fail to adequately sanitize HTML attributes against the presence of dangerous commands.",
            "related_weakness": [
                "79",
                "83"
            ],
            "solutions": "Design: Use libraries and templates that minimize unfiltered input.\nImplementation: Normalize, filter and white list all input including that which is not expected to have any scripting content.\nImplementation: The victim should configure the browser to minimize active content from untrusted sources.",
            "summary": "The attacker inserts commands to perform cross-site scripting (XSS) actions in HTML attributes. Many filters do not adequately sanitize attributes against the presence of potentially dangerous commands even if they adequately sanitize tags. For example, dangerous expressions could be inserted into a style attribute in an anchor tag, resulting in the execution of malicious code when the resulting page is rendered. If a victim is tricked into viewing the rendered page the attack proceeds like a normal XSS attack, possibly resulting in the loss of sensitive cookies or other malicious activities."
        },
        {
            "id": "244",
            "name": "Cross-Site Scripting via Encoded URI Schemes ",
            "prerequisites": "Target client software must allow scripting such as JavaScript and allows executable content delivered using a data URI scheme.",
            "related_weakness": [
                "79",
                "84",
                "85",
                "20",
                "86",
                "692",
                "697",
                "713",
                "71"
            ],
            "solutions": "Design: Use browser technologies that do not allow client side scripting.\nDesign: Utilize strict type, character, and encoding enforcement.\nImplementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.\nImplementation: Ensure all content coming from the client is using the same encoding; if not, the server-side application must canonicalize the data before applying any filtering.\nImplementation: Perform input validation for all remote content, including remote and user-generated content\nImplementation: Perform output validation for all remote content.\nImplementation: Disable scripting languages such as JavaScript in browser\nImplementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.",
            "summary": "An attack of this type exploits the ability of most browsers to interpret \"data\", \"javascript\" or other URI schemes as client-side executable content placeholders. This attack consists of passing a malicious URI in an anchor tag HREF attribute or any other similar attributes in other HTML tags. Such malicious URI contains, for example, a base64 encoded HTML content with an embedded cross-site scripting payload. The attack is executed when the browser interprets the malicious content i.e., for example, when the victim clicks on the malicious link."
        },
        {
            "id": "245",
            "name": "Cross-Site Scripting Using Doubled Characters, e.g. %3C%3Cscript",
            "prerequisites": "The targeted web application does not fully normalize input before checking for prohibited syntax. In particular, it must fail to recognize prohibited methods preceded by certain sequences of repeated characters.",
            "related_weakness": [
                "79",
                "85"
            ],
            "solutions": "Design: Use libraries and templates that minimize unfiltered input.\nImplementation: Normalize, filter and sanitize all user supplied fields.\nImplementation: The victim should configure the browser to minimize active content from untrusted sources.",
            "summary": "The attacker bypasses input validation by using doubled characters in order to perform a cross-site scripting attack. Some filters fail to recognize dangerous sequences if they are preceded by repeated characters. For example, by doubling the < before a script command, (<<script or %3C%3script using URI encoding) the filters of some web applications may fail to recognize the presence of a script tag. If the targeted server is vulnerable to this type of bypass, the attacker can create a crafted URL or other trap to cause a victim to view a page on the targeted server where the malicious content is executed, as per a normal XSS attack."
        },
        {
            "id": "246",
            "name": "Cross-Site Scripting Using Flash",
            "prerequisites": "",
            "related_weakness": [
                "79"
            ],
            "solutions": "",
            "summary": "An attacker injects malicious script to global parameters in a Flash movie via a crafted URL. The malicious script is executed in the context of the Flash movie. As such, this is a form of Cross-Site Scripting (XSS), but the abilities granted to the Flash movie make this attack more flexible."
        },
        {
            "id": "247",
            "name": "Cross-Site Scripting with Masking through Invalid Characters in Identifiers",
            "prerequisites": "The target must fail to remove invalid characters from input and fail to adequately scan beyond these characters.",
            "related_weakness": [
                "79",
                "86"
            ],
            "solutions": "Design: Use libraries and templates that minimize unfiltered input.\nImplementation: Normalize, filter and white list any input that will be included in any subsequent web pages or back end operations.\nImplementation: The victim should configure the browser to minimize active content from untrusted sources.",
            "summary": "The attacker inserts invalid characters in identifiers to bypass application filtering of input. Filters may not scan beyond invalid characters but during later stages of processing content that follows these invalid characters may still be processed. This allows the attacker to sneak prohibited commands past filters and perform normally prohibited operations. Invalid characters may include null, carriage return, line feed or tab in an identifier. Successful bypassing of the filter can result in a XSS attack, resulting in the disclosure of web cookies or possibly other results."
        },
        {
            "id": "32",
            "name": "Embedding Scripts in HTTP Query Strings",
            "prerequisites": "Target client software must allow scripting such as JavaScript. Server software must allow display of remote generated HTML without sufficient input or output validation.",
            "related_weakness": [
                "79",
                "84",
                "85",
                "20",
                "86",
                "692",
                "697",
                "713",
                "71"
            ],
            "solutions": "Design: Use browser technologies that do not allow client side scripting.\nDesign: Utilize strict type, character, and encoding enforcement\nDesign: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.\nImplementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.\nImplementation: Perform input validation for all remote content, including remote and user-generated content\nImplementation: Perform output validation for all remote content.\nImplementation: Disable scripting languages such as JavaScript in browser\nImplementation: Session tokens for specific host\nImplementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.\nImplementation: Privileges are constrained, if a script is loaded, ensure system runs in chroot jail or other limited authority mode",
            "summary": "A variant of cross-site scripting called \"reflected\" cross-site scripting, the HTTP Query Strings attack consists of passing a malicious script inside an otherwise valid HTTP request query string. This is of significant concern for sites that rely on dynamic, user-generated content such as bulletin boards, news sites, blogs, and web enabled administration GUIs. The malicious script may steal session data, browse history, probe files, or otherwise execute attacks on the client side. Once the attacker has prepared the malicious HTTP query it is sent to a victim user (perhaps by email, IM, or posted on an online forum), who clicks on a normal looking link that contains a poison query string. This technique can be made more effective through the use of services like http://tinyurl.com/, which makes very small URLs that will redirect to very large, complex ones. The victim will not know what he is really clicking on."
        },
        {
            "id": "63",
            "name": "Simple Script Injection",
            "prerequisites": "Target client software must be a client that allows scripting communication from remote hosts, such as a JavaScript-enabled Web Browser",
            "related_weakness": [
                "79",
                "20",
                "184",
                "96",
                "113",
                "348",
                "116",
                "350",
                "86",
                "602",
                "692",
                "697",
                "713",
                "71"
            ],
            "solutions": "Design: Use browser technologies that do not allow client side scripting.\nDesign: Utilize strict type, character, and encoding enforcement\nDesign: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.\nImplementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.\nImplementation: Perform input validation for all remote content.\nImplementation: Perform output validation for all remote content.\nImplementation: Session tokens for specific host\nImplementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.",
            "summary": "An attacker embeds malicious scripts in content that will be served to web browsers. The goal of the attack is for the target software, the client-side browser, to execute the script with the users' privilege level.\nAn attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute code and scripts. Web browsers, for example, have some simple security controls in place, but if a remote attacker is allowed to execute scripts (through injecting them in to user-generated content like bulletin boards) then these controls may be bypassed. Further, these attacks are very difficult for an end user to detect."
        },
        {
            "id": "85",
            "name": "AJAX Fingerprinting",
            "prerequisites": "The user must allow JavaScript to execute in their browser",
            "related_weakness": [
                "79",
                "113",
                "348",
                "96",
                "20",
                "116",
                "184",
                "86",
                "712",
                "692"
            ],
            "solutions": "Design: Use browser technologies that do not allow client side scripting.\nDesign: Utilize strict type, character, and encoding enforcement\nImplementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.\nImplementation: Perform input validation for all remote content.\nImplementation: Perform output validation for all remote content.\nImplementation: Disable scripting languages such as JavaScript in browser\nImplementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.",
            "summary": "This attack utilizes the frequent client-server roundtrips in Ajax conversation to scan a system. While Ajax does not open up new vulnerabilities per se, it does optimize them from an attacker point of view. In many XSS attacks the attacker must get a \"hole in one\" and successfully exploit the vulnerability on the victim side the first time, once the client is redirected the attacker has many chances to engage in follow on probes, but there is only one first chance. In a widely used web application this is not a major problem because 1 in a 1,000 is good enough in a widely used application.\nA common first step for an attacker is to footprint the environment to understand what attacks will work. Since footprinting relies on enumeration, the conversational pattern of rapid, multiple requests and responses that are typical in Ajax applications enable an attacker to look for many vulnerabilities, well-known ports, network locations and so on."
        },
        {
            "id": "86",
            "name": "Embedding Script (XSS) in HTTP Headers",
            "prerequisites": "Target software must be a client that allows scripting communication from remote hosts, and attacker must control a remote site of some sort to redirect client and data to.",
            "related_weakness": [
                "79",
                "184",
                "348",
                "96",
                "20",
                "116",
                "86",
                "692",
                "697",
                "713",
                "71"
            ],
            "solutions": "Design: Use browser technologies that do not allow client side scripting.\nDesign: Utilize strict type, character, and encoding enforcement\nDesign: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.\nImplementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.\nImplementation: Perform input validation for all remote content.\nImplementation: Perform output validation for all remote content.\nImplementation: Disable scripting languages such as JavaScript in browser\nImplementation: Session tokens for specific host\nImplementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.",
            "summary": "An attack of this type exploits web applications that generate web content, such as links in a HTML page, based on unvalidated or improperly validated data submitted by other actors. XSS in HTTP Headers attacks target the HTTP headers which are hidden from most users and may not be validated by web applications."
        },
        {
            "id": "91",
            "name": "XSS in IMG Tags",
            "prerequisites": "Application permitting the inclusion or use of IMG tags",
            "related_weakness": [
                "82",
                "79",
                "74",
                "20",
                "692",
                "697",
                "713",
                "71"
            ],
            "solutions": "In addition to the traditional input fields, all other user controllable inputs, such as image tags within messages or the likes, must also be subjected to input validation. Such validation should ensure that content that can be potentially interpreted as script by the browser is appropriately filtered.\nAll output displayed to clients must be properly escaped. Escaping ensures that the browser interprets special scripting characters literally and not as script to be executed.",
            "summary": "Image tags are an often overlooked, but convenient, means for a Cross Site Scripting attack. The attacker can inject script contents into an image (IMG) tag in order to steal information from a victim's browser and execute malicious scripts."
        }
    ],
    "cvss": 2.6,
    "cvss-time": "2012-06-27T17:22:00",
    "cwe": "CWE-79",
    "id": "CVE-2011-4940",
    "impact": {
        "availability": "NONE",
        "confidentiality": "NONE",
        "integrity": "PARTIAL"
    },
    "nessus": [
        {
            "NASL family": "Misc.",
            "NASL id": "VMWARE_VMSA-2012-0016_REMOTE.NASL",
            "description": "The remote VMware ESX / ESXi host is missing a security-related patch.\nIt is, therefore, affected by multiple vulnerabilities, including remote code execution vulnerabilities, in several components and third-party libraries :\n\n  - bind\n  - expat\n  - nspr and nss\n  - python\n  - vSphere API",
            "last seen": "2019-02-21",
            "modified": "2018-08-06",
            "plugin id": "89039",
            "published": "2016-02-29",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=89039",
            "title": "VMware ESX / ESXi Multiple Vulnerabilities (VMSA-2012-0016) (remote check)"
        },
        {
            "NASL family": "Mandriva Local Security Checks",
            "NASL id": "MANDRIVA_MDVSA-2012-096.NASL",
            "description": "Multiple vulnerabilities has been discovered and corrected in python :\n\nThe _ssl module would always disable the CBC IV attack countermeasure (CVE-2011-3389).\n\nA flaw was found in the way the Python SimpleHTTPServer module generated directory listings. An attacker able to upload a file with a specially crafted name to a server could possibly perform a cross-site scripting (XSS) attack against victims visiting a listing page generated by SimpleHTTPServer, for a directory containing the crafted file (if the victims were using certain web browsers) (CVE-2011-4940).\n\nA race condition was found in the way the Python distutils module set file permissions during the creation of the .pypirc file. If a local user had access to the home directory of another user who is running distutils, they could use this flaw to gain access to that user's .pypirc file, which can contain usernames and passwords for code repositories (CVE-2011-4944).\n\nA flaw was found in the way the Python SimpleXMLRPCServer module handled clients disconnecting prematurely. A remote attacker could use this flaw to cause excessive CPU consumption on a server using SimpleXMLRPCServer (CVE-2012-0845).\n\nHash table collisions CPU usage DoS for the embedded copy of expat (CVE-2012-0876).\n\nA denial of service flaw was found in the implementation of associative arrays (dictionaries) in Python. An attacker able to supply a large number of inputs to a Python application (such as HTTP POST request parameters sent to a web application) that are used as keys when inserting data into an array could trigger multiple hash function collisions, making array operations take an excessive amount of CPU time. To mitigate this issue, randomization has been added to the hash function to reduce the chance of an attacker successfully causing intentional collisions (CVE-2012-1150).\n\nThe updated packages have been patched to correct these issues.",
            "last seen": "2019-02-21",
            "modified": "2018-07-19",
            "plugin id": "59635",
            "published": "2012-06-21",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=59635",
            "title": "Mandriva Linux Security Advisory : python (MDVSA-2012:096)"
        },
        {
            "NASL family": "VMware ESX Local Security Checks",
            "NASL id": "VMWARE_VMSA-2012-0016.NASL",
            "description": "a. VMware vSphere API denial of service vulnerability\n\n   The VMware vSphere API contains a denial of service    vulnerability.  This issue allows an unauthenticated user to    send a maliciously crafted API request and disable the host    daemon. Exploitation of the issue would prevent management    activities on the host but any virtual machines running on the    host would be unaffected.\n\n   VMware would like to thank Sebastian Tello of Core Security    Technologies for reporting this issue to us.\n    The Common Vulnerabilities and Exposures project (cve.mitre.org)    has assigned the name CVE-2012-5703 to this issue.\n\nb. Update to ESX service console bind packages\n\n   The ESX service console bind packages are updated to the    following versions :\n\n       bind-libs-9.3.6-20.P1.el5_8.2        bind-utils-9.3.6-20.P1.el5_8.2\n\n   These updates fix multiple security issues. The Common    Vulnerabilities and Exposures project (cve.mitre.org) has    assigned the names CVE-2012-1033, CVE-2012-1667, and    CVE-2012-3817 to these issues.\n\nc. Update to ESX service console python packages\n\n   The ESX service console Python packages are updated to the    following versions :\n\n       python-2.4.3-46.el5_8.2.x86_64        python-libs-2.4.3-46.el5_8.2.x86_64      These updates fix multiple security issues. The Common    Vulnerabilities and Exposures project (cve.mitre.org) has    assigned the names CVE-2011-4940, CVE-2011-4944, and    CVE-2012-1150 to these issues.\n\nd. Update to ESX service console expat package\n\n   The ESX service console expat package is updated to    expat-1.95.8-11.el5_8.\n\n   This update fixes multiple security issues. The Common    Vulnerabilities and Exposures project (cve.mitre.org) has    assigned the names CVE-2012-0876 and CVE-2012-1148 to these    issues.\n\ne. Update to ESX service console nspr and nss packages\n\n   This patch updates the ESX service console Netscape Portable    Runtime and Network Security Services RPMs to versions    nspr-4.9.1.4.el5_8 and nss-3.13.5.4.9834, respectively, to    resolve multiple security issues.\n\n   The Common Vulnerabilities and Exposures project (cve.mitre.org)    has assigned the name CVE-2012-0441 to this issue. This patch    also resolves a certificate trust issue caused by a fraudulent    DigiNotar root certificate.",
            "last seen": "2019-02-21",
            "modified": "2018-08-06",
            "plugin id": "62944",
            "published": "2012-11-16",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=62944",
            "title": "VMSA-2012-0016 : VMware security updates for vSphere API and ESX Service Console"
        },
        {
            "NASL family": "Ubuntu Local Security Checks",
            "NASL id": "UBUNTU_USN-1596-1.NASL",
            "description": "It was discovered that Python would prepend an empty string to sys.path under certain circumstances. A local attacker with write access to the current working directory could exploit this to execute arbitrary code. (CVE-2008-5983)\n\nIt was discovered that the audioop module did not correctly perform input validation. If a user or automated system were tricked into opening a crafted audio file, an attacker could cause a denial of service via application crash. (CVE-2010-1634, CVE-2010-2089)\n\nGiampaolo Rodola discovered several race conditions in the smtpd module. A remote attacker could exploit this to cause a denial of service via daemon outage. (CVE-2010-3493)\n\nIt was discovered that the CGIHTTPServer module did not properly perform input validation on certain HTTP GET requests. A remote attacker could potentially obtain access to CGI script source files.\n(CVE-2011-1015)\n\nNiels Heinen discovered that the urllib and urllib2 modules would process Location headers that specify a redirection to file: URLs. A remote attacker could exploit this to obtain sensitive information or cause a denial of service. This issue only affected Ubuntu 11.04.\n(CVE-2011-1521)\n\nIt was discovered that SimpleHTTPServer did not use a charset parameter in the Content-Type HTTP header. An attacker could potentially exploit this to conduct cross-site scripting (XSS) attacks against Internet Explorer 7 users. This issue only affected Ubuntu 11.04. (CVE-2011-4940)\n\nIt was discovered that Python distutils contained a race condition when creating the ~/.pypirc file. A local attacker could exploit this to obtain sensitive information. (CVE-2011-4944)\n\nIt was discovered that SimpleXMLRPCServer did not properly validate its input when handling HTTP POST requests. A remote attacker could exploit this to cause a denial of service via excessive CPU utilization. (CVE-2012-0845)\n\nIt was discovered that Python was susceptible to hash algorithm attacks. An attacker could cause a denial of service under certian circumstances. This update adds the '-R' command line option and honors setting the PYTHONHASHSEED environment variable to 'random' to salt str and datetime objects with an unpredictable value.\n(CVE-2012-1150).\n\nNote that Tenable Network Security has extracted the preceding description block directly from the Ubuntu security advisory. Tenable has attempted to automatically clean and format it as much as possible without introducing additional issues.",
            "last seen": "2019-02-21",
            "modified": "2018-12-01",
            "plugin id": "62436",
            "published": "2012-10-05",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=62436",
            "title": "Ubuntu 10.04 LTS / 11.04 / 11.10 : python2.6 vulnerabilities (USN-1596-1)"
        },
        {
            "NASL family": "Ubuntu Local Security Checks",
            "NASL id": "UBUNTU_USN-1613-1.NASL",
            "description": "It was discovered that Python would prepend an empty string to sys.path under certain circumstances. A local attacker with write access to the current working directory could exploit this to execute arbitrary code. (CVE-2008-5983)\n\nIt was discovered that the audioop module did not correctly perform input validation. If a user or automated system were tricked into opening a crafted audio file, an attacker could cause a denial of service via application crash. (CVE-2010-1634, CVE-2010-2089)\n\nGiampaolo Rodola discovered several race conditions in the smtpd module. A remote attacker could exploit this to cause a denial of service via daemon outage. (CVE-2010-3493)\n\nIt was discovered that the CGIHTTPServer module did not properly perform input validation on certain HTTP GET requests. A remote attacker could potentially obtain access to CGI script source files.\n(CVE-2011-1015)\n\nNiels Heinen discovered that the urllib and urllib2 modules would process Location headers that specify a redirection to file: URLs. A remote attacker could exploit this to obtain sensitive information or cause a denial of service. (CVE-2011-1521)\n\nIt was discovered that SimpleHTTPServer did not use a charset parameter in the Content-Type HTTP header. An attacker could potentially exploit this to conduct cross-site scripting (XSS) attacks against Internet Explorer 7 users. (CVE-2011-4940)\n\nIt was discovered that Python distutils contained a race condition when creating the ~/.pypirc file. A local attacker could exploit this to obtain sensitive information. (CVE-2011-4944)\n\nIt was discovered that SimpleXMLRPCServer did not properly validate its input when handling HTTP POST requests. A remote attacker could exploit this to cause a denial of service via excessive CPU utilization. (CVE-2012-0845)\n\nIt was discovered that the Expat module in Python 2.5 computed hash values without restricting the ability to trigger hash collisions predictably. If a user or application using pyexpat were tricked into opening a crafted XML file, an attacker could cause a denial of service by consuming excessive CPU resources. (CVE-2012-0876)\n\nTim Boddy discovered that the Expat module in Python 2.5 did not properly handle memory reallocation when processing XML files. If a user or application using pyexpat were tricked into opening a crafted XML file, an attacker could cause a denial of service by consuming excessive memory resources. (CVE-2012-1148).\n\nNote that Tenable Network Security has extracted the preceding description block directly from the Ubuntu security advisory. Tenable has attempted to automatically clean and format it as much as possible without introducing additional issues.",
            "last seen": "2019-02-21",
            "modified": "2018-12-01",
            "plugin id": "62619",
            "published": "2012-10-18",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=62619",
            "title": "Ubuntu 8.04 LTS : python2.5 vulnerabilities (USN-1613-1)"
        },
        {
            "NASL family": "CentOS Local Security Checks",
            "NASL id": "CENTOS_RHSA-2012-0745.NASL",
            "description": "Updated python packages that fix multiple security issues are now available for Red Hat Enterprise Linux 5.\n\nThe Red Hat Security Response Team has rated this update as having moderate security impact. Common Vulnerability Scoring System (CVSS) base scores, which give detailed severity ratings, are available for each vulnerability from the CVE links in the References section.\n\nPython is an interpreted, interactive, object-oriented programming language.\n\nA denial of service flaw was found in the implementation of associative arrays (dictionaries) in Python. An attacker able to supply a large number of inputs to a Python application (such as HTTP POST request parameters sent to a web application) that are used as keys when inserting data into an array could trigger multiple hash function collisions, making array operations take an excessive amount of CPU time. To mitigate this issue, randomization has been added to the hash function to reduce the chance of an attacker successfully causing intentional collisions. (CVE-2012-1150)\n\nNote: The hash randomization is not enabled by default as it may break applications that incorrectly depend on dictionary ordering. To enable the protection, the new 'PYTHONHASHSEED' environment variable or the Python interpreter's '-R' command line option can be used. Refer to the python(1) manual page for details.\n\nThe RHSA-2012:0731 expat erratum must be installed with this update, which adds hash randomization to the Expat library used by the Python pyexpat module.\n\nA flaw was found in the way the Python SimpleHTTPServer module generated directory listings. An attacker able to upload a file with a specially crafted name to a server could possibly perform a cross-site scripting (XSS) attack against victims visiting a listing page generated by SimpleHTTPServer, for a directory containing the crafted file (if the victims were using certain web browsers). (CVE-2011-4940)\n\nA race condition was found in the way the Python distutils module set file permissions during the creation of the .pypirc file. If a local user had access to the home directory of another user who is running distutils, they could use this flaw to gain access to that user's .pypirc file, which can contain usernames and passwords for code repositories. (CVE-2011-4944)\n\nRed Hat would like to thank oCERT for reporting CVE-2012-1150. oCERT acknowledges Julian Walde and Alexander Klink as the original reporters of CVE-2012-1150.\n\nAll Python users should upgrade to these updated packages, which contain backported patches to correct these issues.",
            "last seen": "2019-02-21",
            "modified": "2018-11-10",
            "plugin id": "59560",
            "published": "2012-06-19",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=59560",
            "title": "CentOS 5 : python (CESA-2012:0745)"
        },
        {
            "NASL family": "Oracle Linux Local Security Checks",
            "NASL id": "ORACLELINUX_ELSA-2012-0744.NASL",
            "description": "From Red Hat Security Advisory 2012:0744 :\n\nUpdated python packages that fix multiple security issues are now available for Red Hat Enterprise Linux 6.\n\nThe Red Hat Security Response Team has rated this update as having moderate security impact. Common Vulnerability Scoring System (CVSS) base scores, which give detailed severity ratings, are available for each vulnerability from the CVE links in the References section.\n\nPython is an interpreted, interactive, object-oriented programming language.\n\nA denial of service flaw was found in the implementation of associative arrays (dictionaries) in Python. An attacker able to supply a large number of inputs to a Python application (such as HTTP POST request parameters sent to a web application) that are used as keys when inserting data into an array could trigger multiple hash function collisions, making array operations take an excessive amount of CPU time. To mitigate this issue, randomization has been added to the hash function to reduce the chance of an attacker successfully causing intentional collisions. (CVE-2012-1150)\n\nNote: The hash randomization is not enabled by default as it may break applications that incorrectly depend on dictionary ordering. To enable the protection, the new 'PYTHONHASHSEED' environment variable or the Python interpreter's '-R' command line option can be used. Refer to the python(1) manual page for details.\n\nThe RHSA-2012:0731 expat erratum must be installed with this update, which adds hash randomization to the Expat library used by the Python pyexpat module.\n\nA flaw was found in the way the Python SimpleXMLRPCServer module handled clients disconnecting prematurely. A remote attacker could use this flaw to cause excessive CPU consumption on a server using SimpleXMLRPCServer. (CVE-2012-0845)\n\nA flaw was found in the way the Python SimpleHTTPServer module generated directory listings. An attacker able to upload a file with a specially crafted name to a server could possibly perform a cross-site scripting (XSS) attack against victims visiting a listing page generated by SimpleHTTPServer, for a directory containing the crafted file (if the victims were using certain web browsers). (CVE-2011-4940)\n\nA race condition was found in the way the Python distutils module set file permissions during the creation of the .pypirc file. If a local user had access to the home directory of another user who is running distutils, they could use this flaw to gain access to that user's .pypirc file, which can contain usernames and passwords for code repositories. (CVE-2011-4944)\n\nRed Hat would like to thank oCERT for reporting CVE-2012-1150. oCERT acknowledges Julian Walde and Alexander Klink as the original reporters of CVE-2012-1150.\n\nAll Python users should upgrade to these updated packages, which contain backported patches to correct these issues.",
            "last seen": "2019-02-21",
            "modified": "2018-07-18",
            "plugin id": "68545",
            "published": "2013-07-12",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=68545",
            "title": "Oracle Linux 6 : python (ELSA-2012-0744)"
        },
        {
            "NASL family": "Ubuntu Local Security Checks",
            "NASL id": "UBUNTU_USN-1592-1.NASL",
            "description": "Niels Heinen discovered that the urllib and urllib2 modules would process Location headers that specify a redirection to file: URLs. A remote attacker could exploit this to obtain sensitive information or cause a denial of service. This issue only affected Ubuntu 11.04.\n(CVE-2011-1521)\n\nIt was discovered that SimpleHTTPServer did not use a charset parameter in the Content-Type HTTP header. An attacker could potentially exploit this to conduct cross-site scripting (XSS) attacks against Internet Explorer 7 users. This issue only affected Ubuntu 11.04. (CVE-2011-4940)\n\nIt was discovered that Python distutils contained a race condition when creating the ~/.pypirc file. A local attacker could exploit this to obtain sensitive information. (CVE-2011-4944)\n\nIt was discovered that SimpleXMLRPCServer did not properly validate its input when handling HTTP POST requests. A remote attacker could exploit this to cause a denial of service via excessive CPU utilization. (CVE-2012-0845)\n\nIt was discovered that Python was susceptible to hash algorithm attacks. An attacker could cause a denial of service under certian circumstances. This update adds the '-R' command line option and honors setting the PYTHONHASHSEED environment variable to 'random' to salt str and datetime objects with an unpredictable value.\n(CVE-2012-1150).\n\nNote that Tenable Network Security has extracted the preceding description block directly from the Ubuntu security advisory. Tenable has attempted to automatically clean and format it as much as possible without introducing additional issues.",
            "last seen": "2019-02-21",
            "modified": "2018-12-01",
            "plugin id": "62410",
            "published": "2012-10-03",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=62410",
            "title": "Ubuntu 11.04 / 11.10 : python2.7 vulnerabilities (USN-1592-1)"
        },
        {
            "NASL family": "Ubuntu Local Security Checks",
            "NASL id": "UBUNTU_USN-1613-2.NASL",
            "description": "USN-1613-1 fixed vulnerabilities in Python 2.5. This update provides the corresponding updates for Python 2.4.\n\nIt was discovered that Python would prepend an empty string to sys.path under certain circumstances. A local attacker with write access to the current working directory could exploit this to execute arbitrary code. (CVE-2008-5983)\n\nIt was discovered that the audioop module did not correctly perform input validation. If a user or automated system were tricked into opening a crafted audio file, an attacker could cause a denial of service via application crash.\n(CVE-2010-1634, CVE-2010-2089)\n\nGiampaolo Rodola discovered several race conditions in the smtpd module. A remote attacker could exploit this to cause a denial of service via daemon outage. (CVE-2010-3493)\n\nIt was discovered that the CGIHTTPServer module did not properly perform input validation on certain HTTP GET requests. A remote attacker could potentially obtain access to CGI script source files. (CVE-2011-1015)\n\nNiels Heinen discovered that the urllib and urllib2 modules would process Location headers that specify a redirection to file: URLs. A remote attacker could exploit this to obtain sensitive information or cause a denial of service.\n(CVE-2011-1521)\n\nIt was discovered that SimpleHTTPServer did not use a charset parameter in the Content-Type HTTP header. An attacker could potentially exploit this to conduct cross-site scripting (XSS) attacks against Internet Explorer 7 users. (CVE-2011-4940)\n\nIt was discovered that Python distutils contained a race condition when creating the ~/.pypirc file. A local attacker could exploit this to obtain sensitive information.\n(CVE-2011-4944)\n\nIt was discovered that SimpleXMLRPCServer did not properly validate its input when handling HTTP POST requests. A remote attacker could exploit this to cause a denial of service via excessive CPU utilization. (CVE-2012-0845)\n\nIt was discovered that the Expat module in Python 2.5 computed hash values without restricting the ability to trigger hash collisions predictably. If a user or application using pyexpat were tricked into opening a crafted XML file, an attacker could cause a denial of service by consuming excessive CPU resources.\n(CVE-2012-0876)\n\nTim Boddy discovered that the Expat module in Python 2.5 did not properly handle memory reallocation when processing XML files. If a user or application using pyexpat were tricked into opening a crafted XML file, an attacker could cause a denial of service by consuming excessive memory resources.\n(CVE-2012-1148).\n\nNote that Tenable Network Security has extracted the preceding description block directly from the Ubuntu security advisory. Tenable has attempted to automatically clean and format it as much as possible without introducing additional issues.",
            "last seen": "2019-02-21",
            "modified": "2018-12-01",
            "plugin id": "62620",
            "published": "2012-10-18",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=62620",
            "title": "Ubuntu 8.04 LTS : python2.4 vulnerabilities (USN-1613-2)"
        },
        {
            "NASL family": "Oracle Linux Local Security Checks",
            "NASL id": "ORACLELINUX_ELSA-2012-0745.NASL",
            "description": "From Red Hat Security Advisory 2012:0745 :\n\nUpdated python packages that fix multiple security issues are now available for Red Hat Enterprise Linux 5.\n\nThe Red Hat Security Response Team has rated this update as having moderate security impact. Common Vulnerability Scoring System (CVSS) base scores, which give detailed severity ratings, are available for each vulnerability from the CVE links in the References section.\n\nPython is an interpreted, interactive, object-oriented programming language.\n\nA denial of service flaw was found in the implementation of associative arrays (dictionaries) in Python. An attacker able to supply a large number of inputs to a Python application (such as HTTP POST request parameters sent to a web application) that are used as keys when inserting data into an array could trigger multiple hash function collisions, making array operations take an excessive amount of CPU time. To mitigate this issue, randomization has been added to the hash function to reduce the chance of an attacker successfully causing intentional collisions. (CVE-2012-1150)\n\nNote: The hash randomization is not enabled by default as it may break applications that incorrectly depend on dictionary ordering. To enable the protection, the new 'PYTHONHASHSEED' environment variable or the Python interpreter's '-R' command line option can be used. Refer to the python(1) manual page for details.\n\nThe RHSA-2012:0731 expat erratum must be installed with this update, which adds hash randomization to the Expat library used by the Python pyexpat module.\n\nA flaw was found in the way the Python SimpleHTTPServer module generated directory listings. An attacker able to upload a file with a specially crafted name to a server could possibly perform a cross-site scripting (XSS) attack against victims visiting a listing page generated by SimpleHTTPServer, for a directory containing the crafted file (if the victims were using certain web browsers). (CVE-2011-4940)\n\nA race condition was found in the way the Python distutils module set file permissions during the creation of the .pypirc file. If a local user had access to the home directory of another user who is running distutils, they could use this flaw to gain access to that user's .pypirc file, which can contain usernames and passwords for code repositories. (CVE-2011-4944)\n\nRed Hat would like to thank oCERT for reporting CVE-2012-1150. oCERT acknowledges Julian Walde and Alexander Klink as the original reporters of CVE-2012-1150.\n\nAll Python users should upgrade to these updated packages, which contain backported patches to correct these issues.",
            "last seen": "2019-02-21",
            "modified": "2018-07-18",
            "plugin id": "68546",
            "published": "2013-07-12",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=68546",
            "title": "Oracle Linux 5 : python (ELSA-2012-0745)"
        },
        {
            "NASL family": "Red Hat Local Security Checks",
            "NASL id": "REDHAT-RHSA-2012-0745.NASL",
            "description": "Updated python packages that fix multiple security issues are now available for Red Hat Enterprise Linux 5.\n\nThe Red Hat Security Response Team has rated this update as having moderate security impact. Common Vulnerability Scoring System (CVSS) base scores, which give detailed severity ratings, are available for each vulnerability from the CVE links in the References section.\n\nPython is an interpreted, interactive, object-oriented programming language.\n\nA denial of service flaw was found in the implementation of associative arrays (dictionaries) in Python. An attacker able to supply a large number of inputs to a Python application (such as HTTP POST request parameters sent to a web application) that are used as keys when inserting data into an array could trigger multiple hash function collisions, making array operations take an excessive amount of CPU time. To mitigate this issue, randomization has been added to the hash function to reduce the chance of an attacker successfully causing intentional collisions. (CVE-2012-1150)\n\nNote: The hash randomization is not enabled by default as it may break applications that incorrectly depend on dictionary ordering. To enable the protection, the new 'PYTHONHASHSEED' environment variable or the Python interpreter's '-R' command line option can be used. Refer to the python(1) manual page for details.\n\nThe RHSA-2012:0731 expat erratum must be installed with this update, which adds hash randomization to the Expat library used by the Python pyexpat module.\n\nA flaw was found in the way the Python SimpleHTTPServer module generated directory listings. An attacker able to upload a file with a specially crafted name to a server could possibly perform a cross-site scripting (XSS) attack against victims visiting a listing page generated by SimpleHTTPServer, for a directory containing the crafted file (if the victims were using certain web browsers). (CVE-2011-4940)\n\nA race condition was found in the way the Python distutils module set file permissions during the creation of the .pypirc file. If a local user had access to the home directory of another user who is running distutils, they could use this flaw to gain access to that user's .pypirc file, which can contain usernames and passwords for code repositories. (CVE-2011-4944)\n\nRed Hat would like to thank oCERT for reporting CVE-2012-1150. oCERT acknowledges Julian Walde and Alexander Klink as the original reporters of CVE-2012-1150.\n\nAll Python users should upgrade to these updated packages, which contain backported patches to correct these issues.",
            "last seen": "2019-02-21",
            "modified": "2018-11-10",
            "plugin id": "59564",
            "published": "2012-06-19",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=59564",
            "title": "RHEL 5 : python (RHSA-2012:0745)"
        },
        {
            "NASL family": "CentOS Local Security Checks",
            "NASL id": "CENTOS_RHSA-2012-0744.NASL",
            "description": "Updated python packages that fix multiple security issues are now available for Red Hat Enterprise Linux 6.\n\nThe Red Hat Security Response Team has rated this update as having moderate security impact. Common Vulnerability Scoring System (CVSS) base scores, which give detailed severity ratings, are available for each vulnerability from the CVE links in the References section.\n\nPython is an interpreted, interactive, object-oriented programming language.\n\nA denial of service flaw was found in the implementation of associative arrays (dictionaries) in Python. An attacker able to supply a large number of inputs to a Python application (such as HTTP POST request parameters sent to a web application) that are used as keys when inserting data into an array could trigger multiple hash function collisions, making array operations take an excessive amount of CPU time. To mitigate this issue, randomization has been added to the hash function to reduce the chance of an attacker successfully causing intentional collisions. (CVE-2012-1150)\n\nNote: The hash randomization is not enabled by default as it may break applications that incorrectly depend on dictionary ordering. To enable the protection, the new 'PYTHONHASHSEED' environment variable or the Python interpreter's '-R' command line option can be used. Refer to the python(1) manual page for details.\n\nThe RHSA-2012:0731 expat erratum must be installed with this update, which adds hash randomization to the Expat library used by the Python pyexpat module.\n\nA flaw was found in the way the Python SimpleXMLRPCServer module handled clients disconnecting prematurely. A remote attacker could use this flaw to cause excessive CPU consumption on a server using SimpleXMLRPCServer. (CVE-2012-0845)\n\nA flaw was found in the way the Python SimpleHTTPServer module generated directory listings. An attacker able to upload a file with a specially crafted name to a server could possibly perform a cross-site scripting (XSS) attack against victims visiting a listing page generated by SimpleHTTPServer, for a directory containing the crafted file (if the victims were using certain web browsers). (CVE-2011-4940)\n\nA race condition was found in the way the Python distutils module set file permissions during the creation of the .pypirc file. If a local user had access to the home directory of another user who is running distutils, they could use this flaw to gain access to that user's .pypirc file, which can contain usernames and passwords for code repositories. (CVE-2011-4944)\n\nRed Hat would like to thank oCERT for reporting CVE-2012-1150. oCERT acknowledges Julian Walde and Alexander Klink as the original reporters of CVE-2012-1150.\n\nAll Python users should upgrade to these updated packages, which contain backported patches to correct these issues.",
            "last seen": "2019-02-21",
            "modified": "2018-11-10",
            "plugin id": "59570",
            "published": "2012-06-20",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=59570",
            "title": "CentOS 6 : python (CESA-2012:0744)"
        },
        {
            "NASL family": "Amazon Linux Local Security Checks",
            "NASL id": "ALA_ALAS-2012-98.NASL",
            "description": "A denial of service flaw was found in the implementation of associative arrays (dictionaries) in Python. An attacker able to supply a large number of inputs to a Python application (such as HTTP POST request parameters sent to a web application) that are used as keys when inserting data into an array could trigger multiple hash function collisions, making array operations take an excessive amount of CPU time. To mitigate this issue, randomization has been added to the hash function to reduce the chance of an attacker successfully causing intentional collisions. (CVE-2012-1150)\n\nNote: The hash randomization is not enabled by default as it may break applications that incorrectly depend on dictionary ordering. To enable the protection, the new 'PYTHONHASHSEED' environment variable or the Python interpreter's '-R' command line option can be used. Refer to the python(1) manual page for details.\n\nA flaw was found in the way the Python SimpleXMLRPCServer module handled clients disconnecting prematurely. A remote attacker could use this flaw to cause excessive CPU consumption on a server using SimpleXMLRPCServer. (CVE-2012-0845)\n\nA flaw was found in the way the Python SimpleHTTPServer module generated directory listings. An attacker able to upload a file with a specially crafted name to a server could possibly perform a cross-site scripting (XSS) attack against victims visiting a listing page generated by SimpleHTTPServer, for a directory containing the crafted file (if the victims were using certain web browsers). (CVE-2011-4940)\n\nA race condition was found in the way the Python distutils module set file permissions during the creation of the .pypirc file. If a local user had access to the home directory of another user who is running distutils, they could use this flaw to gain access to that user's .pypirc file, which can contain usernames and passwords for code repositories. (CVE-2011-4944)",
            "last seen": "2019-02-21",
            "modified": "2018-04-18",
            "plugin id": "69705",
            "published": "2013-09-04",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=69705",
            "title": "Amazon Linux AMI : python26 (ALAS-2012-98)"
        },
        {
            "NASL family": "Red Hat Local Security Checks",
            "NASL id": "REDHAT-RHSA-2012-0744.NASL",
            "description": "Updated python packages that fix multiple security issues are now available for Red Hat Enterprise Linux 6.\n\nThe Red Hat Security Response Team has rated this update as having moderate security impact. Common Vulnerability Scoring System (CVSS) base scores, which give detailed severity ratings, are available for each vulnerability from the CVE links in the References section.\n\nPython is an interpreted, interactive, object-oriented programming language.\n\nA denial of service flaw was found in the implementation of associative arrays (dictionaries) in Python. An attacker able to supply a large number of inputs to a Python application (such as HTTP POST request parameters sent to a web application) that are used as keys when inserting data into an array could trigger multiple hash function collisions, making array operations take an excessive amount of CPU time. To mitigate this issue, randomization has been added to the hash function to reduce the chance of an attacker successfully causing intentional collisions. (CVE-2012-1150)\n\nNote: The hash randomization is not enabled by default as it may break applications that incorrectly depend on dictionary ordering. To enable the protection, the new 'PYTHONHASHSEED' environment variable or the Python interpreter's '-R' command line option can be used. Refer to the python(1) manual page for details.\n\nThe RHSA-2012:0731 expat erratum must be installed with this update, which adds hash randomization to the Expat library used by the Python pyexpat module.\n\nA flaw was found in the way the Python SimpleXMLRPCServer module handled clients disconnecting prematurely. A remote attacker could use this flaw to cause excessive CPU consumption on a server using SimpleXMLRPCServer. (CVE-2012-0845)\n\nA flaw was found in the way the Python SimpleHTTPServer module generated directory listings. An attacker able to upload a file with a specially crafted name to a server could possibly perform a cross-site scripting (XSS) attack against victims visiting a listing page generated by SimpleHTTPServer, for a directory containing the crafted file (if the victims were using certain web browsers). (CVE-2011-4940)\n\nA race condition was found in the way the Python distutils module set file permissions during the creation of the .pypirc file. If a local user had access to the home directory of another user who is running distutils, they could use this flaw to gain access to that user's .pypirc file, which can contain usernames and passwords for code repositories. (CVE-2011-4944)\n\nRed Hat would like to thank oCERT for reporting CVE-2012-1150. oCERT acknowledges Julian Walde and Alexander Klink as the original reporters of CVE-2012-1150.\n\nAll Python users should upgrade to these updated packages, which contain backported patches to correct these issues.",
            "last seen": "2019-02-21",
            "modified": "2018-12-20",
            "plugin id": "59563",
            "published": "2012-06-19",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=59563",
            "title": "RHEL 6 : python (RHSA-2012:0744)"
        },
        {
            "NASL family": "Scientific Linux Local Security Checks",
            "NASL id": "SL_20120618_PYTHON_ON_SL5_X.NASL",
            "description": "Python is an interpreted, interactive, object-oriented programming language.\n\nA denial of service flaw was found in the implementation of associative arrays (dictionaries) in Python. An attacker able to supply a large number of inputs to a Python application (such as HTTP POST request parameters sent to a web application) that are used as keys when inserting data into an array could trigger multiple hash function collisions, making array operations take an excessive amount of CPU time. To mitigate this issue, randomization has been added to the hash function to reduce the chance of an attacker successfully causing intentional collisions. (CVE-2012-1150)\n\nNote: The hash randomization is not enabled by default as it may break applications that incorrectly depend on dictionary ordering. To enable the protection, the new 'PYTHONHASHSEED' environment variable or the Python interpreter's '-R' command line option can be used. Refer to the python(1) manual page for details.\n\nThe previous expat erratum must be installed with this update, which adds hash randomization to the Expat library used by the Python pyexpat module.\n\nA flaw was found in the way the Python SimpleHTTPServer module generated directory listings. An attacker able to upload a file with a specially crafted name to a server could possibly perform a cross-site scripting (XSS) attack against victims visiting a listing page generated by SimpleHTTPServer, for a directory containing the crafted file (if the victims were using certain web browsers). (CVE-2011-4940)\n\nA race condition was found in the way the Python distutils module set file permissions during the creation of the .pypirc file. If a local user had access to the home directory of another user who is running distutils, they could use this flaw to gain access to that user's .pypirc file, which can contain usernames and passwords for code repositories. (CVE-2011-4944)\n\nAll Python users should upgrade to these updated packages, which contain backported patches to correct these issues.",
            "last seen": "2019-02-21",
            "modified": "2018-12-31",
            "plugin id": "61332",
            "published": "2012-08-01",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=61332",
            "title": "Scientific Linux Security Update : python on SL5.x i386/x86_64"
        },
        {
            "NASL family": "Scientific Linux Local Security Checks",
            "NASL id": "SL_20120618_PYTHON_ON_SL6_X.NASL",
            "description": "Python is an interpreted, interactive, object-oriented programming language.\n\nA denial of service flaw was found in the implementation of associative arrays (dictionaries) in Python. An attacker able to supply a large number of inputs to a Python application (such as HTTP POST request parameters sent to a web application) that are used as keys when inserting data into an array could trigger multiple hash function collisions, making array operations take an excessive amount of CPU time. To mitigate this issue, randomization has been added to the hash function to reduce the chance of an attacker successfully causing intentional collisions. (CVE-2012-1150)\n\nNote: The hash randomization is not enabled by default as it may break applications that incorrectly depend on dictionary ordering. To enable the protection, the new 'PYTHONHASHSEED' environment variable or the Python interpreter's '-R' command line option can be used. Refer to the python(1) manual page for details.\n\nThe previous expat erratum must be installed with this update, which adds hash randomization to the Expat library used by the Python pyexpat module.\n\nA flaw was found in the way the Python SimpleXMLRPCServer module handled clients disconnecting prematurely. A remote attacker could use this flaw to cause excessive CPU consumption on a server using SimpleXMLRPCServer. (CVE-2012-0845)\n\nA flaw was found in the way the Python SimpleHTTPServer module generated directory listings. An attacker able to upload a file with a specially crafted name to a server could possibly perform a cross-site scripting (XSS) attack against victims visiting a listing page generated by SimpleHTTPServer, for a directory containing the crafted file (if the victims were using certain web browsers). (CVE-2011-4940)\n\nA race condition was found in the way the Python distutils module set file permissions during the creation of the .pypirc file. If a local user had access to the home directory of another user who is running distutils, they could use this flaw to gain access to that user's .pypirc file, which can contain usernames and passwords for code repositories. (CVE-2011-4944)\n\nAll Python users should upgrade to these updated packages, which contain backported patches to correct these issues.",
            "last seen": "2019-02-21",
            "modified": "2018-12-31",
            "plugin id": "61333",
            "published": "2012-08-01",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=61333",
            "title": "Scientific Linux Security Update : python on SL6.x i386/x86_64"
        }
    ],
    "ranking": [
        [
            {
                "circl": 3
            }
        ]
    ],
    "redhat": {
        "rpms": [
            "python-0:2.6.6-29.el6_2.2",
            "python-devel-0:2.6.6-29.el6_2.2",
            "python-libs-0:2.6.6-29.el6_2.2",
            "python-test-0:2.6.6-29.el6_2.2",
            "python-tools-0:2.6.6-29.el6_2.2",
            "tkinter-0:2.6.6-29.el6_2.2",
            "python-0:2.4.3-46.el5_8.2",
            "python-devel-0:2.4.3-46.el5_8.2",
            "python-libs-0:2.4.3-46.el5_8.2",
            "python-tools-0:2.4.3-46.el5_8.2",
            "tkinter-0:2.4.3-46.el5_8.2"
        ]
    },
    "references": [
        "http://bugs.python.org/issue11442",
        "http://jvn.jp/en/jp/JVN51176027/index.html",
        "http://jvndb.jvn.jp/jvndb/JVNDB-2012-000063",
        "http://www.securityfocus.com/bid/54083",
        "http://www.ubuntu.com/usn/USN-1592-1",
        "http://www.ubuntu.com/usn/USN-1596-1",
        "http://www.ubuntu.com/usn/USN-1613-1",
        "http://www.ubuntu.com/usn/USN-1613-2",
        "https://bugzilla.redhat.com/show_bug.cgi?id=803500"
    ],
    "refmap": {
        "bid": [
            "54083"
        ],
        "confirm": [
            "http://bugs.python.org/issue11442",
            "https://bugzilla.redhat.com/show_bug.cgi?id=803500"
        ],
        "jvn": [
            "JVN#51176027"
        ],
        "jvndb": [
            "JVNDB-2012-000063"
        ],
        "secunia": [
            "50858",
            "51024",
            "51040"
        ],
        "ubuntu": [
            "USN-1592-1",
            "USN-1596-1",
            "USN-1613-1",
            "USN-1613-2"
        ]
    },
    "summary": "The list_directory function in Lib/SimpleHTTPServer.py in SimpleHTTPServer in Python before 2.5.6c1, 2.6.x before 2.6.7 rc2, and 2.7.x before 2.7.2 does not place a charset parameter in the Content-Type HTTP header, which makes it easier for remote attackers to conduct cross-site scripting (XSS) attacks against Internet Explorer 7 via UTF-7 encoding.",
    "vmware": [
        {
            "description": "The ESX service console Python packages are updated to the following versions: python-2.4.3-46.el5_8.2.x86_64 python-libs-2.4.3-46.el5_8.2.x86_64",
            "id": "VMSA-2012-0016",
            "last_updated": "2012-11-15T00:00:00",
            "published": "2012-11-15T00:00:00",
            "title": "Update to ESX service console python packages"
        }
    ],
    "vulnerable_configuration": [
        {
            "id": "cpe:2.3:a:python:python:2.5.6",
            "title": "Python 2.5.6"
        },
        {
            "id": "cpe:2.3:a:python:python:2.5.4",
            "title": "Python 2.5.4"
        },
        {
            "id": "cpe:2.3:a:python:python:2.5.3",
            "title": "Python 2.5.3"
        },
        {
            "id": "cpe:2.3:a:python:python:2.5.2",
            "title": "Python 2.5.2"
        },
        {
            "id": "cpe:2.3:a:python:python:2.5.1",
            "title": "Python 2.5.1"
        },
        {
            "id": "cpe:2.3:a:python:python:2.4.3",
            "title": "Python Python 2.4.3"
        },
        {
            "id": "cpe:2.3:a:python:python:2.4.6",
            "title": "Python 2.4.6"
        },
        {
            "id": "cpe:2.3:a:python:python:2.4.4",
            "title": "Python 2.4.4"
        },
        {
            "id": "cpe:2.3:a:python:python:2.4.2",
            "title": "Python 2.4.2"
        },
        {
            "id": "cpe:2.3:a:python:python:2.4.1",
            "title": "Python 2.4.1"
        },
        {
            "id": "cpe:2.3:a:python:python:2.3.7",
            "title": "Python 2.3.7"
        },
        {
            "id": "cpe:2.3:a:python:python:2.3.2",
            "title": "Python 2.3.2"
        },
        {
            "id": "cpe:2.3:a:python:python:2.3.1",
            "title": "Python 2.3.1"
        },
        {
            "id": "cpe:2.3:a:python:python:2.3.4",
            "title": "Python 2.3.4"
        },
        {
            "id": "cpe:2.3:a:python:python:2.3.5",
            "title": "Python 2.3.5"
        },
        {
            "id": "cpe:2.3:a:python:python:2.3.3",
            "title": "Python 2.3.3"
        },
        {
            "id": "cpe:2.3:a:python:python:2.2.1",
            "title": "Python 2.2.1"
        },
        {
            "id": "cpe:2.3:a:python:python:2.2.2",
            "title": "Python 2.2.2"
        },
        {
            "id": "cpe:2.3:a:python:python:2.2.3",
            "title": "Python 2.2.3"
        },
        {
            "id": "cpe:2.3:a:python:python:2.1.3",
            "title": "Python 2.1.3"
        },
        {
            "id": "cpe:2.3:a:python:python:2.1.2",
            "title": "Python 2.1.2"
        },
        {
            "id": "cpe:2.3:a:python:python:2.1.1",
            "title": "Python 2.1.1"
        },
        {
            "id": "cpe:2.3:a:python:python:2.0.1",
            "title": "Python 2.0.1"
        },
        {
            "id": "cpe:2.3:a:python:python:1.6.1",
            "title": "Python 1.6.1"
        },
        {
            "id": "cpe:2.3:a:python:python:1.6",
            "title": "Python 1.6"
        },
        {
            "id": "cpe:2.3:a:python:python:1.2",
            "title": "Python 1.2"
        },
        {
            "id": "cpe:2.3:a:python:python:1.3",
            "title": "Python 1.3"
        },
        {
            "id": "cpe:2.3:a:python:python:1.5.2",
            "title": "Python 1.5.2"
        },
        {
            "id": "cpe:2.3:a:python:python:0.9.1",
            "title": "Python 0.9.1"
        },
        {
            "id": "cpe:2.3:a:python:python:0.9.0",
            "title": "Python 0.9.0"
        },
        {
            "id": "cpe:2.3:a:python:python:2.6.6",
            "title": "Python 2.6.6"
        },
        {
            "id": "cpe:2.3:a:python:python:2.6.5",
            "title": "Python 2.6.5"
        },
        {
            "id": "cpe:2.3:a:python:python:2.6.4",
            "title": "Python 2.6.4"
        },
        {
            "id": "cpe:2.3:a:python:python:2.6.3",
            "title": "Python 2.6.3"
        },
        {
            "id": "cpe:2.3:a:python:python:2.6.2",
            "title": "Python 2.6.2"
        },
        {
            "id": "cpe:2.3:a:python:python:2.6.1",
            "title": "Python 2.6.1"
        },
        {
            "id": "cpe:2.3:a:python:python:2.7",
            "title": "Python 2.7"
        },
        {
            "id": "cpe:2.3:a:python:python:2.7.1:rc1",
            "title": "Python 2.7.1 Release Candiate 1"
        },
        {
            "id": "cpe:2.3:a:python:python:2.7.1",
            "title": "Python 2.7.1"
        },
        {
            "id": "cpe:2.3:a:python:python:2.7.2:rc1",
            "title": "Python 2.7.2 Release Candidate 1"
        }
    ],
    "vulnerable_configuration_cpe_2_2": [
        "cpe:/a:python:python:2.5.6",
        "cpe:/a:python:python:2.5.4",
        "cpe:/a:python:python:2.5.3",
        "cpe:/a:python:python:2.5.2",
        "cpe:/a:python:python:2.5.1",
        "cpe:/a:python:python:2.4.3",
        "cpe:/a:python:python:2.4.6",
        "cpe:/a:python:python:2.4.4",
        "cpe:/a:python:python:2.4.2",
        "cpe:/a:python:python:2.4.1",
        "cpe:/a:python:python:2.3.7",
        "cpe:/a:python:python:2.3.2",
        "cpe:/a:python:python:2.3.1",
        "cpe:/a:python:python:2.3.4",
        "cpe:/a:python:python:2.3.5",
        "cpe:/a:python:python:2.3.3",
        "cpe:/a:python:python:2.2.1",
        "cpe:/a:python:python:2.2.2",
        "cpe:/a:python:python:2.2.3",
        "cpe:/a:python:python:2.1.3",
        "cpe:/a:python:python:2.1.2",
        "cpe:/a:python:python:2.1.1",
        "cpe:/a:python:python:2.0.1",
        "cpe:/a:python:python:1.6.1",
        "cpe:/a:python:python:1.6",
        "cpe:/a:python:python:1.2",
        "cpe:/a:python:python:1.3",
        "cpe:/a:python:python:1.5.2",
        "cpe:/a:python:python:0.9.1",
        "cpe:/a:python:python:0.9.0",
        "cpe:/a:python:python:2.6.6",
        "cpe:/a:python:python:2.6.5",
        "cpe:/a:python:python:2.6.4",
        "cpe:/a:python:python:2.6.3",
        "cpe:/a:python:python:2.6.2",
        "cpe:/a:python:python:2.6.1",
        "cpe:/a:python:python:2.7",
        "cpe:/a:python:python:2.7.1:rc1",
        "cpe:/a:python:python:2.7.1",
        "cpe:/a:python:python:2.7.2:rc1"
    ]
}