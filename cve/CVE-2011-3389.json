{
    "Modified": "2017-01-06T21:59:04.183000",
    "Published": "2011-09-06T15:55:03.197000",
    "access": {
        "authentication": "NONE",
        "complexity": "MEDIUM",
        "vector": "NETWORK"
    },
    "capec": [
        {
            "id": "10",
            "name": "Buffer Overflow via Environment Variables",
            "prerequisites": "The application uses environment variables.\nAn environment variable exposed to the user is vulnerable to a buffer overflow.\nThe vulnerable environment variable uses untrusted data.\nTainted data used in the environment variables is not properly validated. For instance boundary checking is not done before copying the input data to a buffer.",
            "related_weakness": [
                "120",
                "302",
                "118",
                "119",
                "74",
                "99",
                "20",
                "680",
                "733",
                "697"
            ],
            "solutions": "Do not expose environment variable to the user.\nDo not use untrusted data in your environment variables.\nUse a language or compiler that performs automatic bounds checking\nThere are tools such as Sharefuzz [R.10.3] which is an environment variable fuzzer for Unix that support loading a shared library. You can use Sharefuzz to determine if you are exposing an environment variable vulnerable to buffer overflow.",
            "summary": "This attack pattern involves causing a buffer overflow through manipulation of environment variables. Once the attacker finds that they can modify an environment variable, they may try to overflow associated buffers. This attack leverages implicit trust often placed in environment variables."
        },
        {
            "id": "101",
            "name": "Server Side Include (SSI) Injection",
            "prerequisites": "A web server that supports server side includes and has them enabled\nUser controllable input that can carry include directives to the web server",
            "related_weakness": [
                "97",
                "74",
                "20",
                "713"
            ],
            "solutions": "Set the OPTIONS IncludesNOEXEC in the global access.conf file or local .htaccess (Apache) file to deny SSI execution in directories that do not need them\nAll user controllable input must be appropriately sanitized before use in the application. This includes omitting, or encoding, certain characters or strings that have the potential of being interpreted as part of an SSI directive\nServer Side Includes must be enabled only if there is a strong business reason to do so. Every additional component enabled on the web server increases the attack surface as well as administrative overhead",
            "summary": "An attacker can use Server Side Include (SSI) Injection to send code to a web application that then gets executed by the web server. Doing so enables the attacker to achieve similar results to Cross Site Scripting, viz., arbitrary code execution and information disclosure, albeit on a more limited scale, since the SSI directives are nowhere near as powerful as a full-fledged scripting language. Nonetheless, the attacker can conveniently gain access to sensitive files, such as password files, and execute shell commands."
        },
        {
            "id": "104",
            "name": "Cross Zone Scripting",
            "prerequisites": "The target must be using a zone-aware browser.",
            "related_weakness": [
                "250",
                "638",
                "285",
                "116",
                "20"
            ],
            "solutions": "Disable script execution.\nEnsure that sufficient input validation is performed for any potentially untrusted data before it is used in any privileged context or zone\nLimit the flow of untrusted data into the privileged areas of the system that run in the higher trust zone\nLimit the sites that are being added to the local machine zone and restrict the privileges of the code running in that zone to the bare minimum\nEnsure proper HTML output encoding before writing user supplied data to the page",
            "summary": "An attacker is able to cause a victim to load content into their web-browser that bypasses security zone controls and gain access to increased privileges to execute scripting code or other web objects such as unsigned ActiveX controls or applets. This is a privilege elevation attack targeted at zone-based web-browser security. In a zone-based model, pages belong to one of a set of zones corresponding to the level of privilege assigned to that page. Pages in an untrusted zone would have a lesser level of access to the system and/or be restricted in the types of executable content it was allowed to invoke. In a cross-zone scripting attack, a page that should be assigned to a less privileged zone is granted the privileges of a more trusted zone. This can be accomplished by exploiting bugs in the browser, exploiting incorrect configuration in the zone controls, through a cross-site scripting attack that causes the attackers' content to be treated as coming from a more trusted page, or by leveraging some piece of system functionality that is accessible from both the trusted and less trusted zone. This attack differs from \"Restful Privilege Escalation\" in that the latter correlates to the inadequate securing of RESTful access methods (such as HTTP DELETE) on the server, while cross-zone scripting attacks the concept of security zones as implemented by a browser."
        },
        {
            "id": "106",
            "name": "Cross Site Scripting through Log Files",
            "prerequisites": "The system uses a web based interface\nThe system does not cleanse / validate user supplied data before writing it to logs\nInformation from logs is displayed in a web based interface\nThe web based log interface does not HTML output encode the log data prior to displaying it in the administrator console.",
            "related_weakness": [
                "79",
                "117",
                "74",
                "20"
            ],
            "solutions": "Cleanse all user supplied data before placing it in the logs. Reject all bad data. Ensure that the data is in the expected form.\nUse proper HTML output encoding techniques to strip the log data of potentially dangerous scripting characters before displaying it in the administrative console\nIf possible, disable script execution in the administrative interface.",
            "summary": "An attacker may leverage a system weakness where logs are susceptible to log injection to insert scripts into the system's logs. If these logs are later viewed by an administrator through a thin administrative interface and the log data is not properly HTML encoded before being written to the page, the attackers' scripts stored in the log will be executed in the administrative interface with potentially serious consequences. This attack pattern is really a combination of two other attack patterns: log injection and stored cross site scripting."
        },
        {
            "id": "108",
            "name": "Command Line Execution through SQL Injection",
            "prerequisites": "The application does not properly validate data before storing in the database\nBackend application implicitly trusts the data stored in the database\nMalicious data is used on the backend as a command line argument",
            "related_weakness": [
                "89",
                "74",
                "20",
                "78",
                "114"
            ],
            "solutions": "Disable MSSQL xp_cmdshell directive on the database\nProperly validate the data (syntactically and semantically) before writing it to the database.\nDo not implicitly trust the data stored in the database. Re-validate it prior to usage to make sure that it is safe to use in a given context (e.g. as a command line argument).",
            "summary": "An attacker uses standard SQL injection methods to inject data into the command line for execution. This could be done directly through misuse of directives such as MSSQL_xp_cmdshell or indirectly through injection of data into the database that would be interpreted as shell commands. Sometime later, an unscrupulous backend application (or could be part of the functionality of the same application) fetches the injected data stored in the database and uses this data as command line arguments without performing proper validation. The malicious data escapes that data plane by spawning new commands to be executed on the host."
        },
        {
            "id": "109",
            "name": "Object Relational Mapping Injection",
            "prerequisites": "An application uses data access layer generated by an ORM tool or framework\nAn application uses user supplied data in queries executed against the database\nThe separation between data plane and control plane is not ensured, through either developer error or an underlying weakness in the data access layer code generation framework",
            "related_weakness": [
                "20",
                "100",
                "89",
                "564"
            ],
            "solutions": "Remember to understand how to use the data access methods generated by the ORM tool / framework properly in a way that would leverage the built-in security mechanisms of the framework\nEnsure to keep up to date with security relevant updates to the persistence framework used within your application.",
            "summary": "An attacker leverages a weakness present in the database access layer code generated with an Object Relational Mapping (ORM) tool or a weakness in the way that a developer used a persistence framework to inject his or her own SQL commands to be executed against the underlying database. The attack here is similar to plain SQL injection, except that the application does not use JDBC to directly talk to the database, but instead it uses a data access layer generated by an ORM tool or framework (e.g. Hibernate). While most of the time code generated by an ORM tool contains safe access methods that are immune to SQL injection, sometimes either due to some weakness in the generated code or due to the fact that the developer failed to use the generated access methods properly, SQL injection is still possible."
        },
        {
            "id": "110",
            "name": "SQL Injection through SOAP Parameter Tampering",
            "prerequisites": "SOAP messages are used as a communication mechanism in the system\nSOAP parameters are not properly validated at the service provider\nThe service provider does not properly utilize parameter binding when building SQL queries",
            "related_weakness": [
                "89",
                "20"
            ],
            "solutions": "Properly validate and sanitize/reject user input at the service provider.\nEnsure that prepared statements or other mechanism that enables parameter binding is used when accessing the database in a way that would prevent the attackers' supplied data from controlling the structure of the executed query.\nAt the database level, ensure that the database user used by the application in a particular context has the minimum needed privileges to the database that are needed to perform the operation. When possible, run queries against pre-generated views rather than the tables directly.",
            "summary": "An attacker modifies the parameters of the SOAP message that is sent from the service consumer to the service provider to initiate a SQL injection attack. On the service provider side, the SOAP message is parsed and parameters are not properly validated before being used to access a database in a way that does not use parameter binding, thus enabling the attacker to control the structure of the executed SQL query. This pattern describes a SQL injection attack with the delivery mechanism being a SOAP message."
        },
        {
            "id": "13",
            "name": "Subverting Environment Variable Values",
            "prerequisites": "An environment variable is accessible to the user.\nAn environment variable used by the application can be tainted with user supplied data.\nInput data used in an environment variable is not validated properly.\nThe variables encapsulation is not done properly. For instance setting a variable as public in a class makes it visible and an attacker may attempt to manipulate that variable.",
            "related_weakness": [
                "353",
                "285",
                "302",
                "74",
                "15",
                "73",
                "20",
                "200"
            ],
            "solutions": "Protect environment variables against unauthorized read and write access.\nProtect the configuration files which contain environment variables against illegitimate read and write access.\nAssume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system.\nApply the least privilege principles. If a process has no legitimate reason to read an environment variable do not give that privilege.",
            "summary": "The attacker directly or indirectly modifies environment variables used by or controlling the target software. The attacker's goal is to cause the target software to deviate from its expected operation in a manner that benefits the attacker."
        },
        {
            "id": "135",
            "name": "Format String Injection",
            "prerequisites": "The target application must accept a strings as user input, fail to sanitize string formatting characters in the user input, and process this string using functions that interpret string formatting characters.",
            "related_weakness": [
                "134",
                "20",
                "74",
                "133"
            ],
            "solutions": "Limit the usage of formatting string functions.\nStrong input validation - All user-controllable input must be validated and filtered for illegal formatting characters.",
            "summary": "An attacker includes formatting characters in a string input field on the target application. Most applications assume that users will provide static text and may respond unpredictably to the presence of formatting character. For example, in certain functions of the C programming languages such as printf, the formatting character %s will print the contents of a memory location expecting this location to identify a string and the formatting character %n prints the number of DWORD written in the memory. An attacker can use this to read or write to memory locations or files, or simply to manipulate the value of the resulting text in unexpected ways. Reading or writing memory may result in program crashes and writing memory could result in the execution of arbitrary code if the attacker can write to the program stack."
        },
        {
            "id": "136",
            "name": "LDAP Injection",
            "prerequisites": "The target application must accept a string as user input, fail to sanitize characters that have a special meaning in LDAP queries in the user input, and insert the user-supplied string in an LDAP query which is then processed.",
            "related_weakness": [
                "77",
                "90",
                "20"
            ],
            "solutions": "Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as LDAP content.\nUse of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the LDAP or application.",
            "summary": "An attacker manipulates or crafts an LDAP query for the purpose of undermining the security of the target. Some applications use user input to create LDAP queries that are processed by an LDAP server. For example, a user might provide their username during authentication and the username might be inserted in an LDAP query during the authentication process. An attacker could use this input to inject additional commands into an LDAP query that could disclose sensitive information. For example, entering a * in the aforementioned query might return information about all users on the system. This attack is very similar to an SQL injection attack in that it manipulates a query to gather additional information or coerce a particular return value."
        },
        {
            "id": "139",
            "name": "Relative Path Traversal",
            "prerequisites": "The target application must accept a string as user input, fail to sanitize combinations of characters in the input that have a special meaning in the context of path navigation, and insert the user-supplied string into path navigation commands.",
            "related_weakness": [
                "22",
                "20"
            ],
            "solutions": "Design: Input validation. Assume that user inputs are malicious. Utilize strict type, character, and encoding enforcement\nImplementation: Perform input validation for all remote content, including remote and user-generated content.\nImplementation: Validate user input by only accepting known good. Ensure all content that is delivered to client is sanitized against an acceptable content specification -- whitelisting approach.\nImplementation: Prefer working without user input when using file system calls\nImplementation: Use indirect references rather than actual file names.\nImplementation: Use possible permissions on file access when developing and deploying web applications.",
            "summary": "An attacker exploits a weakness in input validation on the target by supplying a specially constructed path utilizing dot and slash characters for the purpose of obtaining access to arbitrary files or resources. An attacker modifies a known path on the target in order to reach material that is not available through intended channels. These attacks normally involve adding additional path separators (/ or \\) and/or dots (.), or encodings thereof, in various combinations in order to reach parent directories or entirely separate trees of the target's directory structure."
        },
        {
            "id": "14",
            "name": "Client-side Injection-induced Buffer Overflow",
            "prerequisites": "The targeted client software communicates with an external server.\nThe targeted client software has a buffer overflow vulnerability.",
            "related_weakness": [
                "120",
                "353",
                "118",
                "119",
                "74",
                "20",
                "680",
                "697",
                "713"
            ],
            "solutions": "The client software should not install untrusted code from a non-authenticated server.\nThe client software should have the latest patches and should be audited for vulnerabilities before being used to communicate with potentially hostile servers.\nPerform input validation for length of buffer inputs.\nUse a language or compiler that performs automatic bounds checking.\nUse an abstraction library to abstract away risky APIs. Not a complete solution.\nCompiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.\nEnsure all buffer uses are consistently bounds-checked.\nUse OS-level preventative functionality. Not a complete solution.",
            "summary": "This type of attack exploits a buffer overflow vulnerability in targeted client software through injection of malicious content from a custom-built hostile service."
        },
        {
            "id": "171",
            "name": "Variable Manipulation",
            "prerequisites": "The targeted application must rely on external variables (e.g. environment variables) or user-controlled variables (e.g. call parameters) in such a way that malicious manipulation of them can subvert functionality.",
            "related_weakness": [
                "471",
                "20"
            ],
            "solutions": "Design: Range, size and value and consistency verification for any arguments supplied to application from external sources and devise appropriate error response.\nDesign: Ensure that variables that should not be manipulated by a user are not accessible to them.",
            "summary": "An attacker manipulates variables used by an application to perform a variety of possible attacks. This can either be performed through the manipulation of function call parameters or by manipulating external variables, such as environment variables, that are used by an application. Changing variable values is usually undertaken as part of another attack; for example, a path traversal (inserting relative path modifiers) or buffer overflow (enlarging a variable value beyond an application's ability to store it)."
        },
        {
            "id": "18",
            "name": "Embedding Scripts in Non-Script Elements",
            "prerequisites": "Target client software must be a client that allows script execution based on scripts generated by remote hosts.",
            "related_weakness": [
                "79",
                "80",
                "83",
                "84",
                "82",
                "348",
                "96",
                "20",
                "116",
                "184",
                "86",
                "350",
                "692",
                "697",
                "713",
                "71"
            ],
            "solutions": "Design: Use browser technologies that do not allow client side scripting.\nImplementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.\nImplementation: Perform input validation for all remote content.\nImplementation: Perform output validation for all remote content.\nImplementation: Disable scripting languages such as JavaScript in browser\nImplementation: Session tokens for specific host\nImplementation: Service provider should not use the XMLHttpRequest method to create a local proxy for content from other sites, because the client will not be able to discern what content comes from which host.",
            "summary": "This attack is a form of Cross-Site Scripting (XSS) where malicious scripts are embedded in elements that are not expected to host scripts such as image tags (<img>), comments in XML documents (< !-CDATA->), etc. These tags may not be subject to the same input validation, output validation, and other content filtering and checking routines, so this can create an opportunity for an attacker to tunnel through the application's elements and launch a XSS attack through other elements.\nAs with all remote attacks, it is important to differentiate the ability to launch an attack (such as probing an internal network for unpatched servers) and the ability of the remote attacker to collect and interpret the output of said attack."
        },
        {
            "id": "182",
            "name": "Flash Injection",
            "prerequisites": "The target must be capable of running Flash applications. In some cases, the victim must follow an attacker-supplied link.",
            "related_weakness": [
                "20",
                "184",
                "697"
            ],
            "solutions": "Implementation: remove sensitive information such as user name and password in the SWF file.\nImplementation: use validation on both client and server side.\nImplementation: remove debug information.\nImplementation: use SSL when loading external data\nImplementation: use crossdomain.xml file to allow the application domain to load stuff or the SWF file called by other domain.",
            "summary": "An attacker tricks a victim to execute malicious flash content that executes commands or makes flash calls specified by the attacker. One example of this attack is cross-site flashing, an attacker controlled parameter to a reference call loads from content specified by the attacker."
        },
        {
            "id": "199",
            "name": "Cross-Site Scripting Using Alternate Syntax",
            "prerequisites": "Target client software must allow scripting such as JavaScript.",
            "related_weakness": [
                "79",
                "87",
                "85",
                "20",
                "86",
                "692",
                "697",
                "713",
                "71"
            ],
            "solutions": "Design: Use browser technologies that do not allow client side scripting.\nDesign: Utilize strict type, character, and encoding enforcement\nImplementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.\nImplementation: Ensure all content coming from the client is using the same encoding; if not, the server-side application must canonicalize the data before applying any filtering.\nImplementation: Perform input validation for all remote content, including remote and user-generated content\nImplementation: Perform output validation for all remote content.\nImplementation: Disable scripting languages such as JavaScript in browser\nImplementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.",
            "summary": "The attacker uses alternate forms of keywords or commands that result in the same action as the primary form but which may not be caught by filters. For example, many keywords are processed in a case insensitive manner. If the site's web filtering algorithm does not convert all tags into a consistent case before the comparison with forbidden keywords it is possible to bypass filters (e.g., incomplete black lists) by using an alternate case structure. For example, the \"script\" tag using the alternate forms of \"Script\" or \"ScRiPt\" may bypass filters where \"script\" is the only form tested. Other variants using different syntax representations are also possible as well as using pollution meta-characters or entities that are eventually ignored by the rendering engine. The attack can result in the execution of otherwise prohibited functionality."
        },
        {
            "id": "22",
            "name": "Exploiting Trust in Client (aka Make the Client Invisible)",
            "prerequisites": "Server software must rely on client side formatted and validated values, and not reinforce these checks on the server side.",
            "related_weakness": [
                "290",
                "287",
                "20",
                "200",
                "693"
            ],
            "solutions": "Design: Ensure that client process and/or message is authenticated so that anonymous communications and/or messages are not accepted by the system.\nDesign: Do not rely on client validation or encoding for security purposes.\nDesign: Utilize digital signatures to increase authentication assurance.\nDesign: Utilize two factor authentication to increase authentication assurance.\nImplementation: Perform input validation for all remote content.",
            "summary": "An attack of this type exploits a programs' vulnerabilities in client/server communication channel authentication and data integrity. It leverages the implicit trust a server places in the client, or more importantly, that which the server believes is the client.\nAn attacker executes this type of attack by placing themselves in the communication channel between client and server such that communication directly to the server is possible where the server believes it is communicating only with a valid client.\nThere are numerous variations of this type of attack."
        },
        {
            "id": "230",
            "name": "XML Nested Payloads",
            "prerequisites": "An application uses an XML parser to perform transformation on user-controllable data.\nAn application does not perform sufficient validation to ensure that user-controllable data is safe for an XML parser.",
            "related_weakness": [
                "112",
                "20",
                "19",
                "674",
                "770"
            ],
            "solutions": "Carefully validate and sanitize all user-controllable data prior to passing it to the XML parser routine. Ensure that the resultant data is safe to pass to the XML parser.\nPerform validation on canonical data.\nPick a robust implementation of an XML parser.\nValidate XML against a valid schema or DTD prior to parsing.",
            "summary": "Applications often need to transform data in and out of the XML format by using an XML parser. It may be possible for an attacker to inject data that may have an adverse effect on the XML parser when it is being processed. By nesting XML data and causing this data to be continuously self-referential, an attacker can cause the XML parser to consume more resources while processing, causing excessive memory consumption and CPU utilization. An attacker's goal is to leverage parser failure to his or her advantage. In most cases this type of an attack will result in a denial of service due to an application becoming unstable, freezing, or crash. However it may be possible to cause a crash resulting in arbitrary code execution, leading to a jump from the data plane to the control plane [R.230.1]."
        },
        {
            "id": "231",
            "name": "XML Oversized Payloads",
            "prerequisites": "An application uses an XML parser to perform transformation on user-controllable data.\nAn application does not perform sufficient validation to ensure that user-controllable data is safe for an XML parser.",
            "related_weakness": [
                "112",
                "20",
                "19",
                "674",
                "770"
            ],
            "solutions": "Carefully validate and sanitize all user-controllable data prior to passing it to the XML parser routine. Ensure that the resultant data is safe to pass to the XML parser.\nPerform validation on canonical data.\nPick a robust implementation of an XML parser.\nValidate XML against a valid schema or DTD prior to parsing.",
            "summary": "Applications often need to transform data in and out of the XML format by using an XML parser. It may be possible for an attacker to inject data that may have an adverse effect on the XML parser when it is being processed. By supplying oversized payloads in input vectors that will be processed by the XML parser, an attacker can cause the XML parser to consume more resources while processing, causing excessive memory consumption and CPU utilization, and potentially cause execution of arbitrary code. An attacker's goal is to leverage parser failure to his or her advantage. In many cases this type of an attack will result in a denial of service due to an application becoming unstable, freezing, or crash. However it is possible to cause a crash resulting in arbitrary code execution, leading to a jump from the data plane to the control plane [R.231.1]."
        },
        {
            "id": "24",
            "name": "Filter Failure through Buffer Overflow",
            "prerequisites": "Ability to control the length of data passed to an active filter.",
            "related_weakness": [
                "120",
                "119",
                "118",
                "74",
                "20",
                "680",
                "733",
                "697"
            ],
            "solutions": "Make sure that ANY failure occurring in the filtering or input validation routine is properly handled and that offending input is NOT allowed to go through. Basically make sure that the vault is closed when failure occurs.\nPre-design: Use a language or compiler that performs automatic bounds checking.\nPre-design through Build: Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.\nOperational: Use OS-level preventative functionality. Not a complete solution.\nDesign: Use an abstraction library to abstract away risky APIs. Not a complete solution.",
            "summary": "In this attack, the idea is to cause an active filter to fail by causing an oversized transaction. An attacker may try to feed overly long input strings to the program in an attempt to overwhelm the filter (by causing a buffer overflow) and hoping that the filter does not fail securely (i.e. the user input is let into the system unfiltered)."
        },
        {
            "id": "244",
            "name": "Cross-Site Scripting via Encoded URI Schemes ",
            "prerequisites": "Target client software must allow scripting such as JavaScript and allows executable content delivered using a data URI scheme.",
            "related_weakness": [
                "79",
                "84",
                "85",
                "20",
                "86",
                "692",
                "697",
                "713",
                "71"
            ],
            "solutions": "Design: Use browser technologies that do not allow client side scripting.\nDesign: Utilize strict type, character, and encoding enforcement.\nImplementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.\nImplementation: Ensure all content coming from the client is using the same encoding; if not, the server-side application must canonicalize the data before applying any filtering.\nImplementation: Perform input validation for all remote content, including remote and user-generated content\nImplementation: Perform output validation for all remote content.\nImplementation: Disable scripting languages such as JavaScript in browser\nImplementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.",
            "summary": "An attack of this type exploits the ability of most browsers to interpret \"data\", \"javascript\" or other URI schemes as client-side executable content placeholders. This attack consists of passing a malicious URI in an anchor tag HREF attribute or any other similar attributes in other HTML tags. Such malicious URI contains, for example, a base64 encoded HTML content with an embedded cross-site scripting payload. The attack is executed when the browser interprets the malicious content i.e., for example, when the victim clicks on the malicious link."
        },
        {
            "id": "250",
            "name": "XML Injection",
            "prerequisites": "XML queries used to process user input and retrieve information stored in XML documents\nUser-controllable input not properly sanitized",
            "related_weakness": [
                "91",
                "74",
                "20",
                "390",
                "713",
                "707"
            ],
            "solutions": "Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.",
            "summary": "An attacker utilizes crafted XML user-controllable input to probe, attack, and inject data into the XML database, using techniques similar to SQL injection. The user-controllable input can allow for unauthorized viewing of data, bypassing authentication or the front-end application for direct XML database access, and possibly altering database information."
        },
        {
            "id": "264",
            "name": "Environment Variable Manipulation",
            "prerequisites": "The targeted application must rely on external variables in such a way that malicious manipulation of them can subvert functionality.",
            "related_weakness": [
                "471",
                "20"
            ],
            "solutions": "Design: Ensure that variables that should not be manipulated by a user are not accessible to them.",
            "summary": "An attacker manipulates environment variables used by an application to perform a variety of possible attacks. Changing variable values is usually undertaken as part of another attack; for example, a path traversal (inserting relative path modifiers) or buffer overflow (enlarging a variable value beyond an application's ability to store it)."
        },
        {
            "id": "265",
            "name": "Global variable manipulation",
            "prerequisites": "The targeted application must rely on external variables in such a way that malicious manipulation of them can subvert functionality.",
            "related_weakness": [
                "471",
                "20"
            ],
            "solutions": "Design: Range, size and value and consistency verification for any arguments supplied to application from external sources and devise appropriate error response.\nDesign: Ensure that variables that should not be manipulated by a user are not accessible to them.",
            "summary": "An attacker manipulates global variables used by an application to perform a variety of possible attacks. Changing variable values is usually undertaken as part of another attack; for example, a path traversal (inserting relative path modifiers) or buffer overflow (enlarging a variable value beyond an application's ability to store it)."
        },
        {
            "id": "267",
            "name": "Leverage Alternate Encoding",
            "prerequisites": "The application's decoder accepts and interprets encoded characters. Data canonicalization, input filtering and validating is not done properly leaving the door open to harmful characters for the target host.",
            "related_weakness": [
                "173",
                "172",
                "180",
                "181",
                "171",
                "73",
                "21",
                "74",
                "20",
                "697",
                "692"
            ],
            "solutions": "Assume all input might use an improper representation. Use canonicalized data inside the application; all data must be converted into the representation used inside the application (UTF-8, UTF-16, etc.)\nAssume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system. Test your decoding process against malicious input.",
            "summary": "This attack leverages the possibility to encode potentially harmful input and submit it to applications not expecting or effective at validating this encoding standard making input filtering difficult."
        },
        {
            "id": "28",
            "name": "Fuzzing",
            "prerequisites": "",
            "related_weakness": [
                "74",
                "388",
                "20",
                "728"
            ],
            "solutions": "Test to ensure that the software behaves as per specification and that there are no unintended side effects. Ensure that no assumptions about the validity of data are made.\nUse fuzz testing during the software QA process to uncover any surprises, uncover any assumptions or unexpected behavior.",
            "summary": "Fuzzing is a software testing method that feeds randomly constructed input to the system and looks for an indication that a failure in response to that input has occurred. Fuzzing treats the system as a black box and is totally free from any preconceptions or assumptions about the system.\nAn attacker can leverage fuzzing to try to identify weaknesses in the system. For instance fuzzing can help an attacker discover certain assumptions made in the system about user input. Fuzzing gives an attacker a quick way of potentially uncovering some of these assumptions without really knowing anything about the internals of the system. These assumptions can then be turned against the system by specially crafting user input that may allow an attacker to achieve his goals."
        },
        {
            "id": "3",
            "name": "Using Leading 'Ghost' Character Sequences to Bypass Input Filters",
            "prerequisites": "The targeted API must ignore the leading ghost characters that are used to get past the filters for the semantics to be the same.",
            "related_weakness": [
                "173",
                "41",
                "172",
                "171",
                "179",
                "180",
                "181",
                "183",
                "184",
                "20",
                "74",
                "697",
                "707"
            ],
            "solutions": "Perform white list rather than black list input validation.\nCanonicalize all data prior to validation.\nTake an iterative approach to input validation (defense in depth).",
            "summary": "An attacker intentionally introduces leading characters that enable getting the input past the filters. The API that is being targeted, ignores the leading \"ghost\" characters, and therefore processes the attackers' input. This occurs when the targeted API will accept input data in several syntactic forms and interpret it in the equivalent semantic way, while the filter does not take into account the full spectrum of the syntactic forms acceptable to the targeted API.\nSome APIs will strip certain leading characters from a string of parameters. Perhaps these characters are considered redundant, and for this reason they are removed. Another possibility is the parser logic at the beginning of analysis is specialized in some way that causes some characters to be removed. The attacker can specify multiple types of alternative encodings at the beginning of a string as a set of probes.\nOne commonly used possibility involves adding ghost characters--extra characters that don't affect the validity of the request at the API layer. If the attacker has access to the API libraries being targeted, certain attack ideas can be tested directly in advance. Once alternative ghost encodings emerge through testing, the attacker can move from lab-based API testing to testing real-world service implementations."
        },
        {
            "id": "31",
            "name": "Accessing/Intercepting/Modifying HTTP Cookies",
            "prerequisites": "Target server software must be a HTTP daemon that relies on cookies.",
            "related_weakness": [
                "565",
                "302",
                "311",
                "113",
                "539",
                "20",
                "315",
                "384",
                "472",
                "724",
                "602",
                "642"
            ],
            "solutions": "Design: Use input validation for cookies\nDesign: Generate and validate MAC for cookies\nImplementation: Use SSL/TLS to protect cookie in transit\nImplementation: Ensure the web server implements all relevant security patches, many exploitable buffer overflows are fixed in patches issued for the software.",
            "summary": "This attack relies on the use of HTTP Cookies to store credentials, state information and other critical data on client systems.\nThe first form of this attack involves accessing HTTP Cookies to mine for potentially sensitive data contained therein.\nThe second form of this attack involves intercepting this data as it is transmitted from client to server. This intercepted information is then used by the attacker to impersonate the remote user/session.\nThe third form is when the cookie's content is modified by the attacker before it is sent back to the server. Here the attacker seeks to convince the target server to operate on this falsified information."
        },
        {
            "id": "32",
            "name": "Embedding Scripts in HTTP Query Strings",
            "prerequisites": "Target client software must allow scripting such as JavaScript. Server software must allow display of remote generated HTML without sufficient input or output validation.",
            "related_weakness": [
                "79",
                "84",
                "85",
                "20",
                "86",
                "692",
                "697",
                "713",
                "71"
            ],
            "solutions": "Design: Use browser technologies that do not allow client side scripting.\nDesign: Utilize strict type, character, and encoding enforcement\nDesign: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.\nImplementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.\nImplementation: Perform input validation for all remote content, including remote and user-generated content\nImplementation: Perform output validation for all remote content.\nImplementation: Disable scripting languages such as JavaScript in browser\nImplementation: Session tokens for specific host\nImplementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.\nImplementation: Privileges are constrained, if a script is loaded, ensure system runs in chroot jail or other limited authority mode",
            "summary": "A variant of cross-site scripting called \"reflected\" cross-site scripting, the HTTP Query Strings attack consists of passing a malicious script inside an otherwise valid HTTP request query string. This is of significant concern for sites that rely on dynamic, user-generated content such as bulletin boards, news sites, blogs, and web enabled administration GUIs. The malicious script may steal session data, browse history, probe files, or otherwise execute attacks on the client side. Once the attacker has prepared the malicious HTTP query it is sent to a victim user (perhaps by email, IM, or posted on an online forum), who clicks on a normal looking link that contains a poison query string. This technique can be made more effective through the use of services like http://tinyurl.com/, which makes very small URLs that will redirect to very large, complex ones. The victim will not know what he is really clicking on."
        },
        {
            "id": "42",
            "name": "MIME Conversion",
            "prerequisites": "The target system uses a mail server.\nMail server vendor has not released a patch for the MIME conversion routine, the patch itself has a security hole or does not fix the original problem, or the patch has not been applied to the user's system.",
            "related_weakness": [
                "120",
                "119",
                "74",
                "20"
            ],
            "solutions": "Stay up to date with third party vendor patches\nFrom \"Exploiting Software\", please see reference below.\nUse the sendmail restricted shell program (smrsh)\nUse mail.local",
            "summary": "An attacker exploits a weakness in the MIME conversion routine to cause a buffer overflow and gain control over the mail server machine. The MIME system is designed to allow various different information formats to be interpreted and sent via e-mail. Attack points exist when data are converted to MIME compatible format and back."
        },
        {
            "id": "43",
            "name": "Exploiting Multiple Input Interpretation Layers",
            "prerequisites": "User input is used to construct a command to be executed on the target system or as part of the file name.\nMultiple parser passes are performed on the data supplied by the user.",
            "related_weakness": [
                "171",
                "179",
                "181",
                "184",
                "183",
                "77",
                "78",
                "74",
                "20",
                "697",
                "707"
            ],
            "solutions": "An iterative approach to input validation may be required to ensure that no dangerous characters are present. It may be necessary to implement redundant checking across different input validation layers. Ensure that invalid data is rejected as soon as possible and do not continue to work with it.\nMake sure to perform input validation on canonicalized data (i.e. data that is data in its most standard form). This will help avoid tricky encodings getting past the filters.\nAssume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system.",
            "summary": "An attacker supplies the target software with input data that contains sequences of special characters designed to bypass input validation logic. This exploit relies on the target making multiples passes over the input data and processing a \"layer\" of special characters with each pass. In this manner, the attacker can disguise input that would otherwise be rejected as invalid by concealing it with layers of special/escape characters that are stripped off by subsequent processing steps.\nThe goal is to first discover cases where the input validation layer executes before one or more parsing layers. That is, user input may go through the following logic in an application:\nIn such cases, the attacker will need to provide input that will pass through the input validator, but after passing through parser2, will be converted into something that the input validator was supposed to stop."
        },
        {
            "id": "45",
            "name": "Buffer Overflow via Symbolic Links",
            "prerequisites": "The attacker can create symbolic link on the target host.\nThe target host does not perform correct boundary checking while consuming data from a resources.",
            "related_weakness": [
                "120",
                "285",
                "302",
                "118",
                "119",
                "74",
                "20",
                "680",
                "697"
            ],
            "solutions": "Pay attention to the fact that the resource you read from can be a replaced by a Symbolic link. You can do a Symlink check before reading the file and decide that this is not a legitimate way of accessing the resource.\nBecause Symlink can be modified by an attacker, make sure that the ones you read are located in protected directories.\nPay attention to the resource pointed to by your symlink links (See attack pattern named \"Forced Symlink race\"), they can be replaced by malicious resources.\nAlways check the size of the input data before copying to a buffer.\nUse a language or compiler that performs automatic bounds checking.\nUse an abstraction library to abstract away risky APIs. Not a complete solution.\nCompiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.\nUse OS-level preventative functionality. Not a complete solution.",
            "summary": "This type of attack leverages the use of symbolic links to cause buffer overflows. An attacker can try to create or manipulate a symbolic link file such that its contents result in out of bounds data. When the target software processes the symbolic link file, it could potentially overflow internal buffers with insufficient bounds checking."
        },
        {
            "id": "46",
            "name": "Overflow Variables and Tags",
            "prerequisites": "The target program consumes user-controllable data in the form of tags or variables.\nThe target program does not perform sufficient boundary checking.",
            "related_weakness": [
                "120",
                "118",
                "119",
                "74",
                "20",
                "680",
                "733",
                "697"
            ],
            "solutions": "Use a language or compiler that performs automatic bounds checking.\nUse an abstraction library to abstract away risky APIs. Not a complete solution.\nCompiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.\nUse OS-level preventative functionality. Not a complete solution.\nDo not trust input data from user. Validate all user input.",
            "summary": "This type of attack leverages the use of tags or variables from a formatted configuration data to cause buffer overflow. The attacker crafts a malicious HTML page or configuration file that includes oversized strings, thus causing an overflow."
        },
        {
            "id": "47",
            "name": "Buffer Overflow via Parameter Expansion",
            "prerequisites": "The program expands one of the parameters passed to a function with input controlled by the user, but a later function making use of the expanded parameter erroneously considers the original, not the expanded size of the parameter.\nThe expanded parameter is used in the context where buffer overflow may become possible due to the incorrect understanding of the parameter size (i.e. thinking that it is smaller than it really is).",
            "related_weakness": [
                "120",
                "119",
                "118",
                "130",
                "131",
                "74",
                "20",
                "680",
                "697"
            ],
            "solutions": "Ensure that when parameter expansion happens in the code that the assumptions used to determine the resulting size of the parameter are accurate and that the new size of the parameter is visible to the whole system",
            "summary": "In this attack, the target software is given input that the attacker knows will be modified and expanded in size during processing. This attack relies on the target software failing to anticipate that the expanded data may exceed some internal limit, thereby creating a buffer overflow."
        },
        {
            "id": "473",
            "name": "Signature Spoof",
            "prerequisites": "The victim or victim system is dependent upon a cryptographic signature-based verification system for validation of one or more security events or actions.\nThe validation can be bypassed via an attacker-provided signature that makes it appear that the legitimate authoritative or reputable source provided the signature.",
            "related_weakness": [
                "20",
                "327",
                "290"
            ],
            "solutions": "",
            "summary": "An attacker generates a message or datablock that causes the recipient to believe that the message or datablock was generated and cryptographically signed by an authoritative or reputable source, misleading a victim or victim operating system into performing malicious actions."
        },
        {
            "id": "484",
            "name": "XML Client-Side Attack",
            "prerequisites": "An application uses an XML parser to perform transformation on user-controllable data.\nAn application does not perform sufficient validation to ensure that user-controllable data is safe for an XML parser.",
            "related_weakness": [
                "112",
                "20",
                "19"
            ],
            "solutions": "Carefully validate and sanitize all user-controllable data prior to passing it to the XML parser routine. Ensure that the resultant data is safe to pass to the XML parser.\nThe client software should have the latest patches and should be audited for vulnerabilities before being used to communicate with potentially hostile servers.",
            "summary": "Client applications such as web browsers that process HTML data often need to transform data in and out of the XML format by using an XML parser. It may be possible for an attacker to inject data that may have an adverse effect on the XML parser when it is being processed. These adverse effects may include the parser crashing, consuming too much of a resource, executing too slowly, executing code supplied by an attacker, allowing usage of unintended system functionality, etc. An attacker's goal is to leverage parser failure to his or her advantage. In some cases it may be possible to jump from the data plane to the control plane via bad data being passed to an XML parser. [R.484.1]"
        },
        {
            "id": "52",
            "name": "Embedding NULL Bytes",
            "prerequisites": "The program does not properly handle postfix NULL terminators",
            "related_weakness": [
                "158",
                "172",
                "173",
                "171",
                "74",
                "20",
                "697",
                "707"
            ],
            "solutions": "Properly handle the NULL characters supplied as part of user input prior to doing anything with the data.",
            "summary": "An attacker embeds one or more null bytes in input to the target software. This attack relies on the usage of a null-valued byte as a string terminator in many environments. The goal is for certain components of the target software to stop processing the input when it encounters the null byte(s)."
        },
        {
            "id": "53",
            "name": "Postfix, Null Terminate, and Backslash",
            "prerequisites": "Null terminators are not properly handled by the filter.",
            "related_weakness": [
                "158",
                "172",
                "173",
                "171",
                "74",
                "20",
                "697",
                "707"
            ],
            "solutions": "Properly handle Null characters. Make sure canonicalization is properly applied. Do not pass Null characters to the underlying APIs.\nAssume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system.",
            "summary": "If a string is passed through a filter of some kind, then a terminal NULL may not be valid. Using alternate representation of NULL allows an attacker to embed the NULL mid-string while postfixing the proper data so that the filter is avoided. One example is a filter that looks for a trailing slash character. If a string insertion is possible, but the slash must exist, an alternate encoding of NULL in mid-string may be used."
        },
        {
            "id": "63",
            "name": "Simple Script Injection",
            "prerequisites": "Target client software must be a client that allows scripting communication from remote hosts, such as a JavaScript-enabled Web Browser",
            "related_weakness": [
                "79",
                "20",
                "184",
                "96",
                "113",
                "348",
                "116",
                "350",
                "86",
                "602",
                "692",
                "697",
                "713",
                "71"
            ],
            "solutions": "Design: Use browser technologies that do not allow client side scripting.\nDesign: Utilize strict type, character, and encoding enforcement\nDesign: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.\nImplementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.\nImplementation: Perform input validation for all remote content.\nImplementation: Perform output validation for all remote content.\nImplementation: Session tokens for specific host\nImplementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.",
            "summary": "An attacker embeds malicious scripts in content that will be served to web browsers. The goal of the attack is for the target software, the client-side browser, to execute the script with the users' privilege level.\nAn attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute code and scripts. Web browsers, for example, have some simple security controls in place, but if a remote attacker is allowed to execute scripts (through injecting them in to user-generated content like bulletin boards) then these controls may be bypassed. Further, these attacks are very difficult for an end user to detect."
        },
        {
            "id": "64",
            "name": "Using Slashes and URL Encoding Combined to Bypass Validation Logic",
            "prerequisites": "The application accepts and decodes URL string request.\nThe application performs insufficient filtering/canonicalization on the URLs.",
            "related_weakness": [
                "177",
                "171",
                "173",
                "172",
                "73",
                "21",
                "22",
                "74",
                "20",
                "697",
                "707"
            ],
            "solutions": "Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system. Test your decoding process against malicious input.\nBe aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding.\nWhen client input is required from web-based forms, avoid using the \"GET\" method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the \"POST method whenever possible.\nAny security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.\nRefer to the RFCs to safely decode URL.\nRegular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.\nThere are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).",
            "summary": "This attack targets the encoding of the URL combined with the encoding of the slash characters. An attacker can take advantage of the multiple way of encoding an URL and abuse the interpretation of the URL. An URL may contain special character that need special syntax handling in order to be interpreted. Special characters are represented using a percentage character followed by two digits representing the octet code of the original character (%HEX-CODE). For instance US-ASCII space character would be represented with %20. This is often referred as escaped ending or percent-encoding. Since the server decodes the URL from the requests, it may restrict the access to some URL paths by validating and filtering out the URL requests it received. An attacker will try to craft an URL with a sequence of special characters which once interpreted by the server will be equivalent to a forbidden URL. It can be difficult to protect against this attack since the URL can contain other format of encoding such as UTF-8 encoding, Unicode-encoding, etc."
        },
        {
            "id": "66",
            "name": "SQL Injection",
            "prerequisites": "SQL queries used by the application to store, retrieve or modify data.\nUser-controllable input that is not properly validated by the application as part of SQL queries.",
            "related_weakness": [
                "89",
                "74",
                "20",
                "390",
                "697",
                "713",
                "707"
            ],
            "solutions": "Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear.\nUse of parameterized queries or stored procedures - Parameterization causes the input to be restricted to certain domains, such as strings or integers, and any input outside such domains is considered invalid and the query fails. Note that SQL Injection is possible even in the presence of stored procedures if the eventual query is constructed dynamically.\nUse of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.",
            "summary": "This attack exploits target software that constructs SQL statements based on user input. An attacker crafts input strings so that when the target software constructs SQL statements based on the input, the resulting SQL statement performs actions other than those the application intended.\nSQL Injection results from failure of the application to appropriately validate input. When specially crafted user-controlled input consisting of SQL syntax is used without proper validation as part of SQL queries, it is possible to glean information from the database in ways not envisaged during application design. Depending upon the database and the design of the application, it may also be possible to leverage injection to have the database execute system-related commands of the attackers' choice. SQL Injection enables an attacker to talk directly to the database, thus bypassing the application completely. Successful injection can cause information disclosure as well as ability to add or modify data in the database. In order to successfully inject SQL and retrieve information from a database, an attacker:"
        },
        {
            "id": "67",
            "name": "String Format Overflow in syslog()",
            "prerequisites": "The format string argument of the Syslog function can be tainted with user supplied data.",
            "related_weakness": [
                "120",
                "134",
                "74",
                "20",
                "680",
                "697"
            ],
            "solutions": "The following code shows a vulnerable usage of Syslog():",
            "summary": "This attack targets the format string vulnerabilities in the syslog() function. An attacker would typically inject malicious input in the format string parameter of the syslog function. This is a common problem, and many public vulnerabilities and associated exploits have been posted."
        },
        {
            "id": "7",
            "name": "Blind SQL Injection",
            "prerequisites": "SQL queries used by the application to store, retrieve or modify data.\nUser-controllable input that is not properly validated by the application as part of SQL queries.",
            "related_weakness": [
                "89",
                "209",
                "74",
                "20",
                "390",
                "697",
                "713",
                "707"
            ],
            "solutions": "Security by Obscurity is not a solution to preventing SQL Injection. Rather than suppress error messages and exceptions, the application must handle them gracefully, returning either a custom error page or redirecting the user to a default page, without revealing any information about the database or the application internals.\nStrong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear.",
            "summary": "Blind SQL Injection results from an insufficient mitigation for SQL Injection. Although suppressing database error messages are considered best practice, the suppression alone is not sufficient to prevent SQL Injection. Blind SQL Injection is a form of SQL Injection that overcomes the lack of error messages. Without the error messages that facilitate SQL Injection, the attacker constructs input strings that probe the target through simple Boolean SQL expressions. The attacker can determine if the syntax and structure of the injection was successful based on whether the query was executed or not. Applied iteratively, the attacker determines how and where the target is vulnerable to SQL Injection.\nFor example, an attacker may try entering something like \"username' AND 1=1; --\" in an input field. If the result is the same as when the attacker entered \"username\" in the field, then the attacker knows that the application is vulnerable to SQL Injection. The attacker can then ask yes/no questions from the database server to extract information from it. For example, the attacker can extract table names from a database using the following types of queries:\nIf the above query executes properly, then the attacker knows that the first character in a table name in the database is a letter between m and z. If it doesn't, then the attacker knows that the character must be between a and l (assuming of course that table names only contain alphabetic characters). By performing a binary search on all character positions, the attacker can determine all table names in the database. Subsequently, the attacker may execute an actual attack and send something like:"
        },
        {
            "id": "71",
            "name": "Using Unicode Encoding to Bypass Validation Logic",
            "prerequisites": "Filtering is performed on data that has not be properly canonicalized.",
            "related_weakness": [
                "176",
                "171",
                "179",
                "180",
                "173",
                "172",
                "184",
                "183",
                "74",
                "20",
                "697",
                "692"
            ],
            "solutions": "Ensure that the system is Unicode aware and can properly process Unicode data. Do not make an assumption that data will be in ASCII.\nEnsure that filtering or input validation is applied to canonical data.\nAssume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system.",
            "summary": "An attacker may provide a Unicode string to a system component that is not Unicode aware and use that to circumvent the filter or cause the classifying mechanism to fail to properly understanding the request. That may allow the attacker to slip malicious data past the content filter and/or possibly cause the application to route the request incorrectly."
        },
        {
            "id": "72",
            "name": "URL Encoding",
            "prerequisites": "The application should accepts and decodes URL input.\nThe application performs insufficient filtering/canonicalization on the URLs.",
            "related_weakness": [
                "173",
                "177",
                "171",
                "172",
                "73",
                "21",
                "74",
                "20"
            ],
            "solutions": "Refer to the RFCs to safely decode URL.\nRegular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.\nThere are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).\nAny security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.\nAssume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system. Test your decoding process against malicious input.\nBe aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. (See related guideline section)\nWhen client input is required from web-based forms, avoid using the \"GET\" method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the \"POST method whenever possible.",
            "summary": "This attack targets the encoding of the URL. An attacker can take advantage of the multiple way of encoding an URL and abuse the interpretation of the URL. An URL may contain special character that need special syntax handling in order to be interpreted. Special characters are represented using a percentage character followed by two digits representing the octet code of the original character (%HEX-CODE). For instance US-ASCII space character would be represented with %20. This is often referred as escaped ending or percent-encoding. Since the server decodes the URL from the requests, it may restrict the access to some URL paths by validating and filtering out the URL requests it received. An attacker will try to craft an URL with a sequence of special characters which once interpreted by the server will be equivalent to a forbidden URL. It can be difficult to protect against this attack since the URL can contain other format of encoding such as UTF-8 encoding, Unicode-encoding, etc. The attacker could also subvert the meaning of the URL string request by encoding the data being sent to the server through a GET request. For instance an attacker may subvert the meaning of parameters used in a SQL request and sent through the URL string (See Example section)."
        },
        {
            "id": "73",
            "name": "User-Controlled Filename",
            "prerequisites": "The victim must trust the name and locale of user controlled filenames.",
            "related_weakness": [
                "20",
                "184",
                "96",
                "348",
                "116",
                "350",
                "86",
                "697"
            ],
            "solutions": "Design: Use browser technologies that do not allow client side scripting.\nImplementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.\nImplementation: Perform input validation for all remote content.\nImplementation: Perform output validation for all remote content.\nImplementation: Disable scripting languages such as JavaScript in browser\nImplementation: Scan dynamically generated content against validation specification",
            "summary": "An attack of this type involves an attacker inserting malicious characters (such as a XSS redirection) into a filename, directly or indirectly that is then used by the target software to generate HTML text or other potentially executable content. Many websites rely on user-generated content and dynamically build resources like files, filenames, and URL links directly from user supplied data. In this attack pattern, the attacker uploads code that can execute in the client browser and/or redirect the client browser to a site that the attacker owns. All XSS attack payload variants can be used to pass and exploit these vulnerabilities."
        },
        {
            "id": "78",
            "name": "Using Escaped Slashes in Alternate Encoding",
            "prerequisites": "The application accepts the backlash character as escape character.\nThe application server does incomplete input data decoding, filtering and validation.",
            "related_weakness": [
                "180",
                "181",
                "173",
                "171",
                "172",
                "73",
                "21",
                "22",
                "74",
                "20",
                "697",
                "707"
            ],
            "solutions": "Verify that the user-supplied data does not use backslash character to escape malicious characters.\nAssume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system.\nBe aware of the threat of alternative method of data encoding.\nRegular expressions can be used to filter out backslash. Make sure you decode before filtering and validating the untrusted input data.\nIn the case of path traversals, use the principle of least privilege when determining access rights to file systems. Do not allow users to access directories/files that they should not access.\nAny security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.\nAvoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.",
            "summary": "This attack targets the use of the backslash in alternate encoding. An attacker can provide a backslash as a leading character and causes a parser to believe that the next character is special. This is called an escape. By using that trick, the attacker tries to exploit alternate ways to encode the same character which leads to filter problems and opens avenues to attack."
        },
        {
            "id": "79",
            "name": "Using Slashes in Alternate Encoding",
            "prerequisites": "The application server accepts paths to locate resources.\nThe application server does insufficient input data validation on the resource path requested by the user.\nThe access right to resources are not set properly.",
            "related_weakness": [
                "173",
                "171",
                "180",
                "181",
                "20",
                "74",
                "73",
                "21",
                "22",
                "185",
                "200",
                "697",
                "707"
            ],
            "solutions": "Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process. Refer to the RFCs to safely decode URL.\nWhen client input is required from web-based forms, avoid using the \"GET\" method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the \"POST method whenever possible.\nThere are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx)\nBe aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. (See related guideline section)\nTest your path decoding process against malicious input.\nIn the case of path traversals, use the principle of least privilege when determining access rights to file systems. Do not allow users to access directories/files that they should not access.\nAssume all input is malicious. Create a white list that defines all valid input to the application based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system.",
            "summary": "This attack targets the encoding of the Slash characters. An attacker would try to exploit common filtering problems related to the use of the slashes characters to gain access to resources on the target host. Directory-driven systems, such as file systems and databases, typically use the slash character to indicate traversal between directories or other container components. For murky historical reasons, PCs (and, as a result, Microsoft OSs) choose to use a backslash, whereas the UNIX world typically makes use of the forward slash. The schizophrenic result is that many MS-based systems are required to understand both forms of the slash. This gives the attacker many opportunities to discover and abuse a number of common filtering problems. The goal of this pattern is to discover server software that only applies filters to one version, but not the other."
        },
        {
            "id": "8",
            "name": "Buffer Overflow in an API Call",
            "prerequisites": "The target host exposes an API to the user.\nOne or more API functions exposed by the target host has a buffer overflow vulnerability.",
            "related_weakness": [
                "120",
                "119",
                "118",
                "74",
                "20",
                "680",
                "733",
                "697"
            ],
            "solutions": "Use a language or compiler that performs automatic bounds checking.\nUse secure functions not vulnerable to buffer overflow.\nIf you have to use dangerous functions, make sure that you do boundary checking.\nCompiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.\nUse OS-level preventative functionality. Not a complete solution.",
            "summary": "This attack targets libraries or shared code modules which are vulnerable to buffer overflow attacks. An attacker who has access to an API may try to embed malicious code in the API function call and exploit a buffer overflow vulnerability in the function's implementation. All clients that make use of the code library thus become vulnerable by association. This has a very broad effect on security across a system, usually affecting more than one software process."
        },
        {
            "id": "80",
            "name": "Using UTF-8 Encoding to Bypass Validation Logic",
            "prerequisites": "The application's UTF-8 decoder accepts and interprets illegal UTF-8 characters or non-shortest format of UTF-8 encoding.\nInput filtering and validating is not done properly leaving the door open to harmful characters for the target host.",
            "related_weakness": [
                "173",
                "172",
                "180",
                "181",
                "171",
                "73",
                "21",
                "74",
                "20",
                "697",
                "692"
            ],
            "solutions": "The Unicode Consortium recognized multiple representations to be a problem and has revised the Unicode Standard to make multiple representations of the same code point with UTF-8 illegal. The UTF-8 Corrigendum lists the newly restricted UTF-8 range (See references). Many current applications may not have been revised to follow this rule. Verify that your application conform to the latest UTF-8 encoding specification. Pay extra attention to the filtering of illegal characters.\nAnother consideration is error recovery. To guarantee correct recovery after corrupt or lost bytes, decoders must be able to recognize the difference between lead and trail bytes, rather than just assuming that bytes will be of the type allowed in their position.\nFor security reasons, a UTF-8 decoder must not accept UTF-8 sequences that are longer than necessary to encode a character. If you use a parser to decode the UTF-8 encoding, make sure that parser filter the invalid UTF-8 characters (invalid forms or overlong forms).\nLook for overlong UTF-8 sequences starting with malicious pattern. You can also use a UTF-8 decoder stress test to test your UTF-8 parser (See Markus Kuhn's UTF-8 and Unicode FAQ in reference section)\nAssume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system. Test your decoding process against malicious input.",
            "summary": "This attack is a specific variation on leveraging alternate encodings to bypass validation logic. This attack leverages the possibility to encode potentially harmful input in UTF-8 and submit it to applications not expecting or effective at validating this encoding standard making input filtering difficult. UTF-8 (8-bit UCS/Unicode Transformation Format) is a variable-length character encoding for Unicode. Legal UTF-8 characters are one to four bytes long. However, early version of the UTF-8 specification got some entries wrong (in some cases it permitted overlong characters). UTF-8 encoders are supposed to use the \"shortest possible\" encoding, but naive decoders may accept encodings that are longer than necessary. According to the RFC 3629, a particularly subtle form of this attack can be carried out against a parser which performs security-critical validity checks against the UTF-8 encoded form of its input, but interprets certain illegal octet sequences as characters."
        },
        {
            "id": "81",
            "name": "Web Logs Tampering",
            "prerequisites": "Target server software must be a HTTP server that performs web logging.",
            "related_weakness": [
                "117",
                "93",
                "92",
                "221",
                "96",
                "20",
                "150",
                "276",
                "279",
                "116",
                "713"
            ],
            "solutions": "Design: Use input validation before writing to web log\nDesign: Validate all log data before it is output",
            "summary": "Web Logs Tampering attacks involve an attacker injecting, deleting or otherwise tampering with the contents of web logs typically for the purposes of masking other malicious behavior. Additionally, writing malicious data to log files may target jobs, filters, reports, and other agents that process the logs in an asynchronous attack pattern. This pattern of attack is similar to \"Log Injection-Tampering-Forging\" except that in this case, the attack is targeting the logs of the web server and not the application."
        },
        {
            "id": "83",
            "name": "XPath Injection",
            "prerequisites": "XPath queries used to retrieve information stored in XML documents\nUser-controllable input not properly sanitized before being used as part of XPath queries",
            "related_weakness": [
                "91",
                "74",
                "20",
                "390",
                "713",
                "707"
            ],
            "solutions": "Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as content that can be interpreted in the context of an XPath expression. Characters such as a single-quote(') or operators such as or (|), and (&) and such should be filtered if the application does not expect them in the context in which they appear. If such content cannot be filtered, it must at least be properly escaped to avoid them being interpreted as part of XPath expressions.\nUse of parameterized XPath queries - Parameterization causes the input to be restricted to certain domains, such as strings or integers, and any input outside such domains is considered invalid and the query fails.\nUse of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.",
            "summary": "An attacker can craft special user-controllable input consisting of XPath expressions to inject the XML database and bypass authentication or glean information that he normally would not be able to. XPath Injection enables an attacker to talk directly to the XML database, thus bypassing the application completely. XPath Injection results from the failure of an application to properly sanitize input used as part of dynamic XPath expressions used to query an XML database. In order to successfully inject XML and retrieve information from a database, an attacker:"
        },
        {
            "id": "85",
            "name": "AJAX Fingerprinting",
            "prerequisites": "The user must allow JavaScript to execute in their browser",
            "related_weakness": [
                "79",
                "113",
                "348",
                "96",
                "20",
                "116",
                "184",
                "86",
                "712",
                "692"
            ],
            "solutions": "Design: Use browser technologies that do not allow client side scripting.\nDesign: Utilize strict type, character, and encoding enforcement\nImplementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.\nImplementation: Perform input validation for all remote content.\nImplementation: Perform output validation for all remote content.\nImplementation: Disable scripting languages such as JavaScript in browser\nImplementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.",
            "summary": "This attack utilizes the frequent client-server roundtrips in Ajax conversation to scan a system. While Ajax does not open up new vulnerabilities per se, it does optimize them from an attacker point of view. In many XSS attacks the attacker must get a \"hole in one\" and successfully exploit the vulnerability on the victim side the first time, once the client is redirected the attacker has many chances to engage in follow on probes, but there is only one first chance. In a widely used web application this is not a major problem because 1 in a 1,000 is good enough in a widely used application.\nA common first step for an attacker is to footprint the environment to understand what attacks will work. Since footprinting relies on enumeration, the conversational pattern of rapid, multiple requests and responses that are typical in Ajax applications enable an attacker to look for many vulnerabilities, well-known ports, network locations and so on."
        },
        {
            "id": "86",
            "name": "Embedding Script (XSS) in HTTP Headers",
            "prerequisites": "Target software must be a client that allows scripting communication from remote hosts, and attacker must control a remote site of some sort to redirect client and data to.",
            "related_weakness": [
                "79",
                "184",
                "348",
                "96",
                "20",
                "116",
                "86",
                "692",
                "697",
                "713",
                "71"
            ],
            "solutions": "Design: Use browser technologies that do not allow client side scripting.\nDesign: Utilize strict type, character, and encoding enforcement\nDesign: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.\nImplementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.\nImplementation: Perform input validation for all remote content.\nImplementation: Perform output validation for all remote content.\nImplementation: Disable scripting languages such as JavaScript in browser\nImplementation: Session tokens for specific host\nImplementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.",
            "summary": "An attack of this type exploits web applications that generate web content, such as links in a HTML page, based on unvalidated or improperly validated data submitted by other actors. XSS in HTTP Headers attacks target the HTTP headers which are hidden from most users and may not be validated by web applications."
        },
        {
            "id": "88",
            "name": "OS Command Injection",
            "prerequisites": "User controllable input used as part of commands to the underlying operating system.",
            "related_weakness": [
                "78",
                "88",
                "20",
                "697",
                "713"
            ],
            "solutions": "Use language APIs rather than relying on passing data to the operating system shell or command line. Doing so ensures that the available protection mechanisms in the language are intact and applicable.\nFilter all incoming data to escape or remove characters or strings that can be potentially misinterpreted as operating system or shell commands\nAll application processes should be run with the minimal privileges required. Also, processes must shed privileges as soon as they no longer require them.",
            "summary": "In this type of an attack, an adversary injects operating system commands into existing application functions. An application that uses untrusted input to build command strings is vulnerable. An adversary can leverage OS command injection in an application to elevate privileges, execute arbitrary commands and compromise the underlying operating system."
        },
        {
            "id": "9",
            "name": "Buffer Overflow in Local Command-Line Utilities",
            "prerequisites": "The target host exposes a command-line utility to the user.\nThe command-line utility exposed by the target host has a buffer overflow vulnerability that can be exploited.",
            "related_weakness": [
                "120",
                "118",
                "119",
                "74",
                "20",
                "680",
                "733",
                "697"
            ],
            "solutions": "Carefully review the service's implementation before making it available to user. For instance you can use manual or automated code review to uncover vulnerabilities such as buffer overflow.\nUse a language or compiler that performs automatic bounds checking.\nUse an abstraction library to abstract away risky APIs. Not a complete solution.\nCompiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.\nOperational: Use OS-level preventative functionality. Not a complete solution.\nApply the latest patches to your user exposed services. This may not be a complete solution, especially against a zero day attack.\nDo not unnecessarily expose services.",
            "summary": "This attack targets command-line utilities available in a number of shells. An attacker can leverage a vulnerability found in a command-line utility to escalate privilege to root."
        },
        {
            "id": "91",
            "name": "XSS in IMG Tags",
            "prerequisites": "Application permitting the inclusion or use of IMG tags",
            "related_weakness": [
                "82",
                "79",
                "74",
                "20",
                "692",
                "697",
                "713",
                "71"
            ],
            "solutions": "In addition to the traditional input fields, all other user controllable inputs, such as image tags within messages or the likes, must also be subjected to input validation. Such validation should ensure that content that can be potentially interpreted as script by the browser is appropriately filtered.\nAll output displayed to clients must be properly escaped. Escaping ensures that the browser interprets special scripting characters literally and not as script to be executed.",
            "summary": "Image tags are an often overlooked, but convenient, means for a Cross Site Scripting attack. The attacker can inject script contents into an image (IMG) tag in order to steal information from a victim's browser and execute malicious scripts."
        },
        {
            "id": "99",
            "name": "XML Parser Attack",
            "prerequisites": "An application uses an XML parser to perform transformation on user-controllable data.\nAn application does not perform sufficient validation to ensure that user-controllable data is safe for an XML parser.",
            "related_weakness": [
                "112",
                "20",
                "19",
                "674",
                "770"
            ],
            "solutions": "Carefully validate and sanitize all user-controllable data prior to passing it to the XML parser routine. Ensure that the resultant data is safe to pass to the XML parser.\nPerform validation on canonical data.\nPick a robust implementation of an XML parser.\nValidate XML against a valid schema or DTD prior to parsing.",
            "summary": "Applications often need to transform data in and out of the XML format by using an XML parser. It may be possible for an attacker to inject data that may have an adverse effect on the XML parser when it is being processed. These adverse effects may include the parser crashing, consuming too much of a resource, executing too slowly, executing code supplied by an attacker, allowing usage of unintended system functionality, etc. An attacker's goal is to leverage parser failure to his or her advantage. In some cases it may be possible to jump from the data plane to the control plane via bad data being passed to an XML parser. [R.99.1]"
        }
    ],
    "cvss": "4.3",
    "cvss-time": "2016-09-02T16:56:30.947000",
    "cwe": "CWE-20",
    "id": "CVE-2011-3389",
    "impact": {
        "availability": "NONE",
        "confidentiality": "PARTIAL",
        "integrity": "NONE"
    },
    "last-modified": "2018-10-12T18:01:28.537000",
    "msbulletin": [
        {
            "bulletin_id": "MS12-006",
            "bulletin_url": null,
            "date": "2012-01-10T00:00:00",
            "impact": "Information Disclosure",
            "knowledgebase_id": "2643584",
            "knowledgebase_url": null,
            "severity": "Important",
            "title": "Vulnerability in SSL/TLS Could Allow Information Disclosure"
        }
    ],
    "nessus": [
        {
            "NASL family": "Mandriva Local Security Checks",
            "NASL id": "MANDRIVA_MDVSA-2013-037.NASL",
            "description": "Multiple vulnerabilities has been found and corrected in fetchmail :\n\nFetchmail version 6.3.9 enabled all SSL workarounds (SSL_OP_ALL) which contains a switch to disable a countermeasure against certain attacks against block ciphers that permit guessing the initialization vectors, providing that an attacker can make the application (fetchmail) encrypt some data for him -- which is not easily the case (aka a BEAST attack) (CVE-2011-3389).\n\nA denial of service flaw was found in the way Fetchmail, a remote mail retrieval and forwarding utility, performed base64 decoding of certain NTLM server responses. Upon sending the NTLM authentication request, Fetchmail did not check if the received response was actually part of NTLM protocol exchange, or server-side error message and session abort. A rogue NTML server could use this flaw to cause fetchmail executable crash (CVE-2012-3482).\n\nThis advisory provides the latest version of fetchmail (6.3.22) which is not vulnerable to these issues.",
            "last seen": "2019-02-21",
            "modified": "2018-07-19",
            "plugin id": "66051",
            "published": "2013-04-20",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=66051",
            "title": "Mandriva Linux Security Advisory : fetchmail (MDVSA-2013:037)"
        },
        {
            "NASL family": "Fedora Local Security Checks",
            "NASL id": "FEDORA_2012-5916.NASL",
            "description": "Rebase of Python 3 ('python3') from 3.2 to 3.2.3 bringing in security fixes, along with other bugfixes.\n\nSee http://python.org/download/releases/3.2.3/\n\nNote that Tenable Network Security has extracted the preceding description block directly from the Fedora security advisory. Tenable has attempted to automatically clean and format it as much as possible without introducing additional issues.",
            "last seen": "2019-02-21",
            "modified": "2018-12-24",
            "plugin id": "58979",
            "published": "2012-05-04",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=58979",
            "title": "Fedora 15 : python3-3.2.3-1.fc15 (2012-5916) (BEAST)"
        },
        {
            "NASL family": "SuSE Local Security Checks",
            "NASL id": "SUSE_11_4_CURL-120124.NASL",
            "description": "The following vulnerabilities have been fixed in curl :\n\n  - IMAP, POP3 and SMTP URL sanitization vulnerability     (CVE-2012-0036)\n\n  - disable SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS     (CVE-2011-3389)\n\n  - disable SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG option     for older openssl versions (CVE-2010-4180)",
            "last seen": "2019-02-21",
            "modified": "2018-11-10",
            "plugin id": "75806",
            "published": "2014-06-13",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=75806",
            "title": "openSUSE Security Update : curl (openSUSE-SU-2012:0229-1) (BEAST)"
        },
        {
            "NASL family": "MacOS X Local Security Checks",
            "NASL id": "MACOSX_10_7_5.NASL",
            "description": "The remote host is running a version of Mac OS X 10.7.x that is prior to 10.7.5. The newer version contains multiple security-related fixes for the following components :\n\n  - Apache\n  - BIND\n  - CoreText\n  - Data Security\n  - ImageIO\n  - Installer\n  - International Components for Unicode\n  - Kernel\n  - Mail\n  - PHP\n  - Profile Manager\n  - QuickLook\n  - QuickTime\n  - Ruby\n  - USB",
            "last seen": "2019-02-21",
            "modified": "2018-07-16",
            "plugin id": "62214",
            "published": "2012-09-20",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=62214",
            "title": "Mac OS X 10.7.x < 10.7.5 Multiple Vulnerabilities (BEAST)"
        },
        {
            "NASL family": "MacOS X Local Security Checks",
            "NASL id": "MACOSX_SECUPD2012-004.NASL",
            "description": "The remote host is running a version of Mac OS X 10.6 that does not have Security Update 2012-004 applied. This update contains multiple security-related fixes for the following components :\n\n  - Apache\n  - Data Security\n  - DirectoryService\n  - ImageIO\n  - International Components for Unicode\n  - Mail\n  - PHP\n  - QuickLook\n  - QuickTime\n  - Ruby",
            "last seen": "2019-02-21",
            "modified": "2018-07-16",
            "plugin id": "62213",
            "published": "2012-09-20",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=62213",
            "title": "Mac OS X Multiple Vulnerabilities (Security Update 2012-004) (BEAST)"
        },
        {
            "NASL family": "SuSE Local Security Checks",
            "NASL id": "SUSE_PYTHON-8080.NASL",
            "description": "The following issues have been fixed in this update :\n\n  - hash randomization issues (CVE-2012-115) (see below)\n\n  - SimpleHTTPServer XSS. (CVE-2011-1015)\n\n  - SSL BEAST vulnerability (CVE-2011-3389) The hash     randomization fix is by default disabled to keep     compatibility with existing python code when it extracts     hashes.\n\nTo enable the hash seed randomization you can either use :\n\n  - pass -R to the python interpreter commandline.\n\n  - set the environment variable PYTHONHASHSEED=random to     enable it for programs. You can also set this     environment variable to a fixed hash seed by specifying     a integer value between 0 and MAX_UINT.\n\nIn generally enabling this is only needed when malicious third parties can inject values into your hash tables.",
            "last seen": "2019-02-21",
            "modified": "2012-06-14",
            "plugin id": "58891",
            "published": "2012-04-27",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=58891",
            "title": "SuSE 10 Security Update : Python (ZYPP Patch Number 8080)"
        },
        {
            "NASL family": "SuSE Local Security Checks",
            "NASL id": "SUSE_11_3_OPERA-110906.NASL",
            "description": "The Opera browser received a security and bugfix update to 11.51.\n\nMore information can be found here:\nhttp://www.opera.com/docs/changelogs/unix/1151/\n\nCVE-2011-3388 - incorrect security information display CVE-2011-3389 - unspecified 'low severity issue, as reported by Thai Duong and Juliano Rizzo.'",
            "last seen": "2019-02-21",
            "modified": "2018-12-18",
            "plugin id": "75697",
            "published": "2014-06-13",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=75697",
            "title": "openSUSE Security Update : opera (openSUSE-SU-2011:1025-1) (BEAST)"
        },
        {
            "NASL family": "Debian Local Security Checks",
            "NASL id": "DEBIAN_DLA-154.NASL",
            "description": "nss 3.12.8-1+squeeze11 fixes two security issues :\n\nCVE-2011-3389\n\nSSL 3.0 and TLS 1.0 connections were vulnerable to some chosen plaintext attacks which allowed man-in-the middle attackers to obtain plaintext HTTP headers on an HTTPS session. This issue is known as the 'BEAST' attack.\n\nCVE-2014-1569\n\nPossible information leak with too-permissive ASN.1 DER decoding of length.\n\nNOTE: Tenable Network Security has extracted the preceding description block directly from the DLA security advisory. Tenable has attempted to automatically clean and format it as much as possible without introducing additional issues.",
            "last seen": "2019-02-21",
            "modified": "2018-07-06",
            "plugin id": "82137",
            "published": "2015-03-26",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=82137",
            "title": "Debian DLA-154-1 : nss security update (BEAST)"
        },
        {
            "NASL family": "Debian Local Security Checks",
            "NASL id": "DEBIAN_DSA-2398.NASL",
            "description": "Several vulnerabilities have been discovered in cURL, an URL transfer library. The Common Vulnerabilities and Exposures project identifies the following problems :\n\n  - CVE-2011-3389     This update enables OpenSSL workarounds against the     'BEAST' attack. Additional information can be found in     the cURL advisory\n\n  - CVE-2012-0036     Dan Fandrich discovered that cURL performs insufficient     sanitising when extracting the file path part of an URL.",
            "last seen": "2019-02-21",
            "modified": "2018-12-18",
            "plugin id": "57738",
            "published": "2012-01-31",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=57738",
            "title": "Debian DSA-2398-2 : curl - several vulnerabilities (BEAST)"
        },
        {
            "NASL family": "SuSE Local Security Checks",
            "NASL id": "OPENSUSE-2012-76.NASL",
            "description": "- Fix IMAP, POP3 and SMTP URL sanitization (bnc#740452,     CVE-2012-0036)\n\n  - Disable SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG option     when built against an older OpenSSL version     (CVE-2010-4180).\n\n  - Don't enable SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS     (bnc#742306, CVE-2011-3389).",
            "last seen": "2019-02-21",
            "modified": "2015-10-22",
            "plugin id": "74807",
            "published": "2014-06-13",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=74807",
            "title": "openSUSE Security Update : curl (openSUSE-2012-76) (BEAST)"
        },
        {
            "NASL family": "Fedora Local Security Checks",
            "NASL id": "FEDORA_2012-5785.NASL",
            "description": "Rebase of python3 from 3.2.2 to 3.2.3 bringing in security fixes, along with other bugfixes.\n\nSee http://python.org/download/releases/3.2.3/\n\nNote that Tenable Network Security has extracted the preceding description block directly from the Fedora security advisory. Tenable has attempted to automatically clean and format it as much as possible without introducing additional issues.",
            "last seen": "2019-02-21",
            "modified": "2018-12-24",
            "plugin id": "58996",
            "published": "2012-05-07",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=58996",
            "title": "Fedora 17 : python3-3.2.3-5.fc17 (2012-5785) (BEAST)"
        },
        {
            "NASL family": "Databases",
            "NASL id": "ORACLE_RDBMS_CPU_OCT_2013.NASL",
            "description": "The remote Oracle database server is missing the October 2013 Critical Patch Update (CPU). It is, therefore, affected by multiple security vulnerabilities in the following components :\n\n  - Core RDBMS\n  - Oracle Security service\n  - XML Parser",
            "last seen": "2019-02-21",
            "modified": "2018-07-18",
            "plugin id": "70460",
            "published": "2013-10-16",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=70460",
            "title": "Oracle Database Multiple Vulnerabilities (October 2013 CPU) (BEAST)"
        },
        {
            "NASL family": "Windows",
            "NASL id": "OPERA_1151.NASL",
            "description": "The version of Opera installed on the remote Windows host is prior to 11.51. It is, therefore, affected by multiple vulnerabilities :\n\n  - An unspecified error can allow an insecure or malicious     site to cause the browser to display security     information belonging to another, secure site in the     address bar. This causes the insecure or malicious site     to appear to be part of, or secured by, a third-party     site. (CVE-2011-3388)\n\n  - An information disclosure vulnerability, known as BEAST,     exists in the SSL 3.0 and TLS 1.0 protocols due to a     flaw in the way the initialization vector (IV) is     selected when operating in cipher-block chaining (CBC)     modes. A man-in-the-middle attacker can exploit this     to obtain plaintext HTTP header data, by using a     blockwise chosen-boundary attack (BCBA) on an HTTPS     session, in conjunction with JavaScript code that uses     the HTML5 WebSocket API, the Java URLConnection API,     or the Silverlight WebClient API. (CVE-2011-3389)",
            "last seen": "2019-02-21",
            "modified": "2018-11-15",
            "plugin id": "56042",
            "published": "2011-09-01",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=56042",
            "title": "Opera < 11.51 Multiple Vulnerabilities (BEAST)"
        },
        {
            "NASL family": "SuSE Local Security Checks",
            "NASL id": "SUSE_11_4_OPERA-110906.NASL",
            "description": "The Opera browser received a security and bugfix update to 11.51.\n\nMore information can be found here:\nhttp://www.opera.com/docs/changelogs/unix/1151/\n\nCVE-2011-3388 - incorrect security information display CVE-2011-3389 - unspecified 'low severity issue, as reported by Thai Duong and Juliano Rizzo.'",
            "last seen": "2019-02-21",
            "modified": "2018-12-18",
            "plugin id": "75984",
            "published": "2014-06-13",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=75984",
            "title": "openSUSE Security Update : opera (openSUSE-SU-2011:1025-1) (BEAST)"
        },
        {
            "NASL family": "Mandriva Local Security Checks",
            "NASL id": "MANDRIVA_MDVSA-2012-096.NASL",
            "description": "Multiple vulnerabilities has been discovered and corrected in python :\n\nThe _ssl module would always disable the CBC IV attack countermeasure (CVE-2011-3389).\n\nA flaw was found in the way the Python SimpleHTTPServer module generated directory listings. An attacker able to upload a file with a specially crafted name to a server could possibly perform a cross-site scripting (XSS) attack against victims visiting a listing page generated by SimpleHTTPServer, for a directory containing the crafted file (if the victims were using certain web browsers) (CVE-2011-4940).\n\nA race condition was found in the way the Python distutils module set file permissions during the creation of the .pypirc file. If a local user had access to the home directory of another user who is running distutils, they could use this flaw to gain access to that user's .pypirc file, which can contain usernames and passwords for code repositories (CVE-2011-4944).\n\nA flaw was found in the way the Python SimpleXMLRPCServer module handled clients disconnecting prematurely. A remote attacker could use this flaw to cause excessive CPU consumption on a server using SimpleXMLRPCServer (CVE-2012-0845).\n\nHash table collisions CPU usage DoS for the embedded copy of expat (CVE-2012-0876).\n\nA denial of service flaw was found in the implementation of associative arrays (dictionaries) in Python. An attacker able to supply a large number of inputs to a Python application (such as HTTP POST request parameters sent to a web application) that are used as keys when inserting data into an array could trigger multiple hash function collisions, making array operations take an excessive amount of CPU time. To mitigate this issue, randomization has been added to the hash function to reduce the chance of an attacker successfully causing intentional collisions (CVE-2012-1150).\n\nThe updated packages have been patched to correct these issues.",
            "last seen": "2019-02-21",
            "modified": "2018-07-19",
            "plugin id": "59635",
            "published": "2012-06-21",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=59635",
            "title": "Mandriva Linux Security Advisory : python (MDVSA-2012:096)"
        },
        {
            "NASL family": "MacOS X Local Security Checks",
            "NASL id": "MACOSX_XCODE_4_4.NASL",
            "description": "The remote Mac OS X host has a version of Apple Xcode installed that is prior to 4.4. It is, therefore, affected by multiple vulnerabilities :\n\n  - An information disclosure vulnerability, known as BEAST,     exists in the SSL 3.0 and TLS 1.0 protocols due to a     flaw in the way the initialization vector (IV) is     selected when operating in cipher-block chaining (CBC)     modes. A man-in-the-middle attacker can exploit this     to obtain plaintext HTTP header data, by using a     blockwise chosen-boundary attack (BCBA) on an HTTPS     session, in conjunction with JavaScript code that uses     the HTML5 WebSocket API, the Java URLConnection API,     or the Silverlight WebClient API. (CVE-2011-3389)\n\n  - An information disclosure vulnerability exists that may     allow a specially crafted App Store application to read     entries in the keychain. (CVE-2012-3698)",
            "last seen": "2019-02-21",
            "modified": "2018-07-14",
            "plugin id": "61413",
            "published": "2012-08-03",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=61413",
            "title": "Apple Xcode < 4.4 Multiple Vulnerabilities (Mac OS X) (BEAST)"
        },
        {
            "NASL family": "Solaris Local Security Checks",
            "NASL id": "SOLARIS11_PYTHON_20130410.NASL",
            "description": "The remote Solaris system is missing necessary patches to address security updates :\n\n  - The SSL protocol, as used in certain configurations in     Microsoft Windows and Microsoft Internet Explorer,     Mozilla Firefox, Google Chrome, Opera, and other     products, encrypts data by using CBC mode with chained     initialization vectors, which allows man-in-the-middle     attackers to obtain plaintext HTTP headers via a     blockwise chosen-boundary attack (BCBA) on an HTTPS     session, in conjunction with JavaScript code that uses     (1) the HTML5 WebSocket API, (2) the Java URLConnection     API, or (3) the Silverlight WebClient API, aka a 'BEAST'     attack. (CVE-2011-3389)\n\n  - SimpleXMLRPCServer.py in SimpleXMLRPCServer in Python     before 2.6.8, 2.7.x before 2.7.3, 3.x before 3.1.5, and     3.2.x before 3.2.3 allows remote attackers to cause a     denial of service (infinite loop and CPU consumption)     via an XML-RPC POST request that contains a smaller     amount of data than specified by the Content-Length     header. (CVE-2012-0845)\n\n  - The XML parser (xmlparse.c) in expat before 2.1.0     computes hash values without restricting the ability to     trigger hash collisions predictably, which allows     context-dependent attackers to cause a denial of service     (CPU consumption) via an XML file with many identifiers     with the same value. (CVE-2012-0876)\n\n  - Python before 2.6.8, 2.7.x before 2.7.3, 3.x before     3.1.5, and 3.2.x before 3.2.3 computes hash values     without restricting the ability to trigger hash     collisions predictably, which allows context-dependent     attackers to cause a denial of service (CPU consumption)     via crafted input to an application that maintains a     hash table. (CVE-2012-1150)",
            "last seen": "2019-02-21",
            "modified": "2018-11-15",
            "plugin id": "80749",
            "published": "2015-01-19",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=80749",
            "title": "Oracle Solaris Third-Party Patch Update : python (multiple_vulnerabilities_in_python) (BEAST)"
        },
        {
            "NASL family": "Windows",
            "NASL id": "OPERA_1160.NASL",
            "description": "The version of Opera installed on the remote Windows host is prior to 11.60. It is, therefore, affected by multiple vulnerabilities :\n\n  - An unspecified error exists that can allow URL     spoofing in the address bar. (CVE-2011-4010)\n\n  - Top level domain separation rules are not honored for     two-letter top level domains, e.g., '.us' or '.uk', and     some three-letter top level domains. This error can     allow sites to set the scripting context to the top     level domain. Further, this can allow sites to set and     read cookies from other sites whose scripting context is     set to the same top level domain. (CVE-2011-4681)\n\n  - An error exists in the implementation of the JavaScript     'in' operator that can allow sites to verify the     existence of variables of sites in other domains.\n    (CVE-2011-4682)\n\n  - An unspecified, moderately severe issue exists. Details     are to be disclosed by the vendor at a later date.\n    (CVE-2011-4683)\n\n  - The browser does not properly handle certain corner     cases related to certificate revocation. (CVE-2011-4684)\n\n  - Unspecified content can cause the 'Dragonfly' component     of the browser to crash. (CVE-2011-4685)\n\n  - An unspecified error exists related to the 'Web     Workers' implementation that can allow application     crashes. (CVE-2011-4686)\n\n  - An unspecified error exists that can allow remote     content to cause denial of service conditions via     resource consumption. (CVE-2011-4687)\n\n  - An information disclosure vulnerability, known as BEAST,     exists in the SSL 3.0 and TLS 1.0 protocols due to a     flaw in the way the initialization vector (IV) is     selected when operating in cipher-block chaining (CBC)     modes. A man-in-the-middle attacker can exploit this     to obtain plaintext HTTP header data, by using a     blockwise chosen-boundary attack (BCBA) on an HTTPS     session, in conjunction with JavaScript code that uses     the HTML5 WebSocket API, the Java URLConnection API,     or the Silverlight WebClient API. (CVE-2011-3389)",
            "last seen": "2019-02-21",
            "modified": "2018-11-15",
            "plugin id": "57039",
            "published": "2011-12-07",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=57039",
            "title": "Opera < 11.60 Multiple Vulnerabilities (BEAST)"
        },
        {
            "NASL family": "SuSE Local Security Checks",
            "NASL id": "SUSE_11_4_NSS-201112-111220.NASL",
            "description": "The Mozilla NSS libraries were updated to version 3.13.1 to fix various bugs and security problems.\n\nFollowing security issues were fixed: dbg114-nss-201112-5564 new_updateinfo nss-201112-5564 SSL 2.0 is disabled by default dbg114-nss-201112-5564 new_updateinfo nss-201112-5564 A defense against the SSL 3.0 and TLS 1.0 CBC chosen plaintext attack demonstrated by Rizzo and Duong (CVE-2011-3389) is enabled by default.\nSet the SSL_CBC_RANDOM_IV SSL option to PR_FALSE to disable it. bnc# dbg114-nss-201112-5564 new_updateinfo nss-201112-5564 SHA-224 is supported dbg114-nss-201112-5564 new_updateinfo nss-201112-5564 NSS_NoDB_Init does not try to open /pkcs11.txt and /secmod.db anymore (bmo#641052, bnc#726096) (CVE-2011-3640)\n\nAlso following bugs were fixed: dbg114-nss-201112-5564 new_updateinfo nss-201112-5564 fix spec file syntax for qemu-workaround dbg114-nss-201112-5564 new_updateinfo nss-201112-5564 Added a patch to fix errors in the pkcs11n.h header file. (bmo#702090) dbg114-nss-201112-5564 new_updateinfo nss-201112-5564 better SHA-224 support (bmo#647706) dbg114-nss-201112-5564 new_updateinfo nss-201112-5564 SHA-224 is supported dbg114-nss-201112-5564 new_updateinfo nss-201112-5564 Added PORT_ErrorToString and PORT_ErrorToName to return the error message and symbolic name of an NSS error code dbg114-nss-201112-5564 new_updateinfo nss-201112-5564 Added NSS_GetVersion to return the NSS version string dbg114-nss-201112-5564 new_updateinfo nss-201112-5564 Added experimental support of RSA-PSS to the softoken only",
            "last seen": "2019-02-21",
            "modified": "2018-11-10",
            "plugin id": "75980",
            "published": "2014-06-13",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=75980",
            "title": "openSUSE Security Update : nss-201112 (openSUSE-SU-2012:0030-1) (BEAST)"
        },
        {
            "NASL family": "MacOS X Local Security Checks",
            "NASL id": "MACOSX_SECUPD2012-002.NASL",
            "description": "The remote host is running a version of Mac OS X 10.6 that does not have Security Update 2012-002 applied. This update contains multiple security-related fixes for the following components :\n\n  - curl\n  - Directory Service\n  - ImageIO\n  - libarchive\n  - libsecurity\n  - libxml\n  - Quartz Composer\n  - QuickTime\n  - Ruby\n  - Samba\n  - Security Framework",
            "last seen": "2019-02-21",
            "modified": "2018-07-14",
            "plugin id": "59067",
            "published": "2012-05-10",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=59067",
            "title": "Mac OS X Multiple Vulnerabilities (Security Update 2012-002) (BEAST)"
        },
        {
            "NASL family": "MacOS X Local Security Checks",
            "NASL id": "MACOSX_10_9.NASL",
            "description": "The remote host is running a version of Mac OS X 10.x that is prior to version 10.9. The newer version contains multiple security-related fixes for the following components :\n\n  - Application Firewall\n  - App Sandbox\n  - Bluetooth\n  - CFNetwork\n  - CFNetwork SSL\n  - Console\n  - CoreGraphics\n  - curl\n  - dyld\n  - IOKitUser\n  - IOSerialFamily\n  - Kernel\n  - Kext Management\n  - LaunchServices\n  - Libc\n  - Mail Accounts\n  - Mail Header Display\n  - Mail Networking\n  - OpenLDAP\n  - perl\n  - Power Management\n  - python\n  - ruby\n  - Security\n  - Security - Authorization\n  - Security - Smart Card Services\n  - Screen Lock\n  - Screen Sharing Server\n  - syslog\n  - USB",
            "last seen": "2019-02-21",
            "modified": "2018-07-14",
            "plugin id": "70561",
            "published": "2013-10-23",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=70561",
            "title": "Mac OS X 10.x < 10.9 Multiple Vulnerabilities (BEAST)"
        },
        {
            "NASL family": "MacOS X Local Security Checks",
            "NASL id": "MACOSX_SECUPD2012-001.NASL",
            "description": "The remote host is running a version of Mac OS X 10.6 that does not have Security Update 2012-001 applied. This update contains multiple security-related fixes for the following components :\n\n  - Apache\n  - ATS\n  - ColorSync\n  - CoreAudio\n  - CoreMedia\n  - CoreText\n  - curl\n  - Data Security\n  - dovecot\n  - filecmds\n  - libresolv\n  - libsecurity\n  - OpenGL\n  - PHP\n  - QuickTime\n  - SquirrelMail\n  - Subversion\n  - Tomcat\n  - X11",
            "last seen": "2019-02-21",
            "modified": "2018-07-14",
            "plugin id": "57798",
            "published": "2012-02-02",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=57798",
            "title": "Mac OS X Multiple Vulnerabilities (Security Update 2012-001) (BEAST)"
        },
        {
            "NASL family": "Mandriva Local Security Checks",
            "NASL id": "MANDRIVA_MDVSA-2012-058.NASL",
            "description": "Multiple vulnerabilities has been found and corrected in curl :\n\ncurl is vulnerable to a SSL CBC IV vulnerability when built to use OpenSSL for the SSL/TLS layer. A work-around has been added to mitigate the problem (CVE-2011-3389).\n\ncurl is vulnerable to a data injection attack for certain protocols through control characters embedded or percent-encoded in URLs (CVE-2012-0036).\n\nThe updated packages have been patched to correct these issues.",
            "last seen": "2019-02-21",
            "modified": "2019-01-02",
            "plugin id": "58759",
            "published": "2012-04-16",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=58759",
            "title": "Mandriva Linux Security Advisory : curl (MDVSA-2012:058)"
        },
        {
            "NASL family": "MacOS X Local Security Checks",
            "NASL id": "MACOSX_10_7_3.NASL",
            "description": "The remote host is running a version of Mac OS X 10.7.x that is prior to 10.7.3. The newer version contains multiple security-related fixes for the following components :\n\n  - Address Book\n  - Apache\n  - ATS\n  - CFNetwork\n  - CoreMedia\n  - CoreText\n  - CoreUI\n  - curl\n  - Data Security\n  - dovecot\n  - filecmds\n  - ImageIO\n  - Internet Sharing\n  - Libinfo\n  - libresolv\n  - libsecurity\n  - OpenGL\n  - PHP\n  - QuickTime\n  - Subversion\n  - Time Machine\n  - WebDAV Sharing\n  - Webmail\n  - X11",
            "last seen": "2019-02-21",
            "modified": "2018-07-14",
            "plugin id": "57797",
            "published": "2012-02-02",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=57797",
            "title": "Mac OS X 10.7.x < 10.7.3 Multiple Vulnerabilities (BEAST)"
        },
        {
            "NASL family": "Mandriva Local Security Checks",
            "NASL id": "MANDRIVA_MDVSA-2012-149.NASL",
            "description": "Multiple vulnerabilities has been found and corrected in fetchmail :\n\nFetchmail version 6.3.9 enabled all SSL workarounds (SSL_OP_ALL) which contains a switch to disable a countermeasure against certain attacks against block ciphers that permit guessing the initialization vectors, providing that an attacker can make the application (fetchmail) encrypt some data for him -- which is not easily the case (aka a BEAST attack) (CVE-2011-3389).\n\nA denial of service flaw was found in the way Fetchmail, a remote mail retrieval and forwarding utility, performed base64 decoding of certain NTLM server responses. Upon sending the NTLM authentication request, Fetchmail did not check if the received response was actually part of NTLM protocol exchange, or server-side error message and session abort. A rogue NTML server could use this flaw to cause fetchmail executable crash (CVE-2012-3482).\n\nThis advisory provides the latest version of fetchmail (6.3.22) which is not vulnerable to these issues.",
            "last seen": "2019-02-21",
            "modified": "2019-01-02",
            "plugin id": "61992",
            "published": "2012-09-06",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=61992",
            "title": "Mandriva Linux Security Advisory : fetchmail (MDVSA-2012:149)"
        },
        {
            "NASL family": "FreeBSD Local Security Checks",
            "NASL id": "FREEBSD_PKG_A4A809D825C811E1B53100215C6A37BB.NASL",
            "description": "Opera software reports :\n\n- Fixed a moderately severe issue; details will be disclosed at a later date\n\n- Fixed an issue that could allow pages to set cookies or communicate cross-site for some top level domains; see our advisory\n\n- Improved handling of certificate revocation corner cases\n\n- Added a fix for a weakness in the SSL v3.0 and TLS 1.0 specifications, as reported by Thai Duong and Juliano Rizzo; see our advisory\n\n- Fixed an issue where the JavaScript 'in' operator allowed leakage of cross-domain information, as reported by David Bloom; see our advisory",
            "last seen": "2019-02-21",
            "modified": "2018-12-19",
            "plugin id": "57294",
            "published": "2011-12-14",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=57294",
            "title": "FreeBSD : opera -- multiple vulnerabilities (a4a809d8-25c8-11e1-b531-00215c6a37bb) (BEAST)"
        },
        {
            "NASL family": "Fedora Local Security Checks",
            "NASL id": "FEDORA_2012-9135.NASL",
            "description": "Fixes debug build systemtap support. Rebase of python3 from 3.2.1 to 3.2.3 bringing in security fixes, along with many other bug fixes. The compiled *.pyc and *.pyo files are now properly compiled so python3 doesn't try to recompile them over and over on runtime anymore.\n\nNote that Tenable Network Security has extracted the preceding description block directly from the Fedora security advisory. Tenable has attempted to automatically clean and format it as much as possible without introducing additional issues.",
            "last seen": "2019-02-21",
            "modified": "2018-11-28",
            "plugin id": "59580",
            "published": "2012-06-20",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=59580",
            "title": "Fedora 16 : python3-3.2.3-2.fc16 (2012-9135) (BEAST)"
        },
        {
            "NASL family": "FreeBSD Local Security Checks",
            "NASL id": "FREEBSD_PKG_559F3D1BCB1D11E580A4001999F8D30B.NASL",
            "description": "The Asterisk project reports :\n\nAST-2016-001 - BEAST vulnerability in HTTP server\n\nAST-2016-002 - File descriptor exhaustion in chan_sip\n\nAST-2016-003 - Remote crash vulnerability when receiving UDPTL FAX data",
            "last seen": "2019-02-21",
            "modified": "2018-11-10",
            "plugin id": "88584",
            "published": "2016-02-05",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=88584",
            "title": "FreeBSD : asterisk -- Multiple vulnerabilities (559f3d1b-cb1d-11e5-80a4-001999f8d30b) (BEAST)"
        },
        {
            "NASL family": "Gentoo Local Security Checks",
            "NASL id": "GENTOO_GLSA-201203-02.NASL",
            "description": "The remote host is affected by the vulnerability described in GLSA-201203-02 (cURL: Multiple vulnerabilities)\n\n    Multiple vulnerabilities have been found in cURL:\n      When zlib is enabled, the amount of data sent to an application for         automatic decompression is not restricted (CVE-2010-0734).\n      When performing GSSAPI authentication, credential delegation is         always used (CVE-2011-2192).\n      When SSL is enabled, cURL improperly disables the OpenSSL workaround         to mitigate an information disclosure vulnerability in the SSL and TLS         protocols (CVE-2011-3389).\n      libcurl does not properly verify file paths for escape control         characters in IMAP, POP3 or SMTP URLs (CVE-2012-0036).\n  Impact :\n\n    A remote attacker could entice a user or automated process to open a       specially crafted file or URL using cURL, possibly resulting in the       remote execution of arbitrary code, a Denial of Service condition,       disclosure of sensitive information, or unwanted actions performed via       the IMAP, POP3 or SMTP protocols. Furthermore, remote servers may be able       to impersonate clients via GSSAPI requests.\n  Workaround :\n\n    There is no known workaround at this time.",
            "last seen": "2019-02-21",
            "modified": "2018-07-11",
            "plugin id": "58212",
            "published": "2012-03-06",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=58212",
            "title": "GLSA-201203-02 : cURL: Multiple vulnerabilities (BEAST)"
        },
        {
            "NASL family": "SuSE Local Security Checks",
            "NASL id": "SUSE_11_3_NSS-201112-111220.NASL",
            "description": "The Mozilla NSS libraries were updated to version 3.13.1 to fix various bugs and security problems.\n\nFollowing security issues were fixed :\n\n  - SSL 2.0 is disabled by default\n\n  - A defense against the SSL 3.0 and TLS 1.0 CBC chosen     plaintext attack demonstrated by Rizzo and Duong     (CVE-2011-3389) is enabled by default. Set the     SSL_CBC_RANDOM_IV SSL option to PR_FALSE to disable it.\n    bnc#\n\n  - SHA-224 is supported\n\n  - NSS_NoDB_Init does not try to open /pkcs11.txt and     /secmod.db anymore (bmo#641052, bnc#726096)     (CVE-2011-3640)\n\nAlso following bugs were fixed :\n\n  - fix spec file syntax for qemu-workaround\n\n  - Added a patch to fix errors in the pkcs11n.h header     file. (bmo#702090)\n\n  - better SHA-224 support (bmo#647706)\n\n  - SHA-224 is supported\n\n  - Added PORT_ErrorToString and PORT_ErrorToName to return     the error message and symbolic name of an NSS error code\n\n  - Added NSS_GetVersion to return the NSS version string\n\n  - Added experimental support of RSA-PSS to the softoken     only",
            "last seen": "2019-02-21",
            "modified": "2018-11-10",
            "plugin id": "75685",
            "published": "2014-06-13",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=75685",
            "title": "openSUSE Security Update : nss-201112 (openSUSE-SU-2012:0030-1) (BEAST)"
        },
        {
            "NASL family": "Misc.",
            "NASL id": "VMWARE_ESXI_5_1_BUILD_2323236_REMOTE.NASL",
            "description": "The remote VMware ESXi host is version 5.1 prior to build 2323236. It is, therefore, affected by the following vulnerabilities in bundled third-party libraries :\n\n  - Multiple vulnerabilities exist in the bundled Python     library. (CVE-2011-3389, CVE-2012-0845, CVE-2012-0876,     CVE-2012-1150, CVE-2013-1752, CVE-2013-4238)\n\n  - Multiple vulnerabilities exist in the bundled GNU C     Library (glibc). (CVE-2013-0242, CVE-2013-1914,     CVE-2013-4332)\n\n  - Multiple vulnerabilities exist in the bundled XML     Parser library (libxml2). (CVE-2013-2877, CVE-2014-0191)\n\n  - Multiple vulnerabilities exist in the bundled cURL     library (libcurl). (CVE-2014-0015, CVE-2014-0138)",
            "last seen": "2019-02-21",
            "modified": "2018-11-15",
            "plugin id": "79862",
            "published": "2014-12-12",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=79862",
            "title": "ESXi 5.1 < Build 2323236 Third-Party Libraries Multiple Vulnerabilities (remote check) (BEAST)"
        },
        {
            "NASL family": "Solaris Local Security Checks",
            "NASL id": "SOLARIS11_FETCHMAIL_20121016.NASL",
            "description": "The remote Solaris system is missing necessary patches to address security updates :\n\n  - The SSL protocol, as used in certain configurations in     Microsoft Windows and Microsoft Internet Explorer,     Mozilla Firefox, Google Chrome, Opera, and other     products, encrypts data by using CBC mode with chained     initialization vectors, which allows man-in-the-middle     attackers to obtain plaintext HTTP headers via a     blockwise chosen-boundary attack (BCBA) on an HTTPS     session, in conjunction with JavaScript code that uses     (1) the HTML5 WebSocket API, (2) the Java URLConnection     API, or (3) the Silverlight WebClient API, aka a 'BEAST'     attack. (CVE-2011-3389)\n\n  - Fetchmail 5.0.8 through 6.3.21, when using NTLM     authentication in debug mode, allows remote NTLM servers     to (1) cause a denial of service (crash and delayed     delivery of inbound mail) via a crafted NTLM response     that triggers an out-of-bounds read in the base64     decoder, or (2) obtain sensitive information from memory     via an NTLM Type 2 message with a crafted Target Name     structure, which triggers an out-of-bounds read.\n    (CVE-2012-3482)",
            "last seen": "2019-02-21",
            "modified": "2018-11-15",
            "plugin id": "80605",
            "published": "2015-01-19",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=80605",
            "title": "Oracle Solaris Third-Party Patch Update : fetchmail (multiple_vulnerabilities_in_fetchmail) (BEAST)"
        },
        {
            "NASL family": "Fedora Local Security Checks",
            "NASL id": "FEDORA_2012-5924.NASL",
            "description": "Rebase of Python 2 ('python' and 'python-docs') from 2.7.2 to 2.7.3 bringing in security fixes, along with other bugfixes.\n\nSee http://python.org/download/releases/2.7.3/\n\nNote that Tenable Network Security has extracted the preceding description block directly from the Fedora security advisory. Tenable has attempted to automatically clean and format it as much as possible without introducing additional issues.",
            "last seen": "2019-02-21",
            "modified": "2018-12-24",
            "plugin id": "58997",
            "published": "2012-05-07",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=58997",
            "title": "Fedora 16 : python-2.7.3-1.fc16 / python-docs-2.7.3-1.fc16 (2012-5924) (BEAST)"
        },
        {
            "NASL family": "Red Hat Local Security Checks",
            "NASL id": "REDHAT-RHSA-2013-1455.NASL",
            "description": "Updated java-1.6.0-ibm packages that fix several security issues are now available for Red Hat Network Satellite Server 5.4.\n\nThe Red Hat Security Response Team has rated this update as having low security impact. Common Vulnerability Scoring System (CVSS) base scores, which give detailed severity ratings, are available for each vulnerability from the CVE links in the References section.\n\nThis update corrects several security vulnerabilities in the IBM Java Runtime Environment shipped as part of Red Hat Network Satellite Server 5.4. In a typical operating environment, these are of low security risk as the runtime is not used on untrusted applets.\n\nSeveral flaws were fixed in the IBM Java 2 Runtime Environment.\nn\nUsers of Red Hat Network Satellite Server 5.4 are advised to upgrade to these updated packages, which contain the IBM Java SE 6 SR14 release. For this update to take effect, Red Hat Network Satellite Server must be restarted ('/usr/sbin/rhn-satellite restart'), as well as all running instances of IBM Java.",
            "last seen": "2019-02-21",
            "modified": "2018-11-26",
            "plugin id": "78975",
            "published": "2014-11-08",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=78975",
            "title": "RHEL 5 / 6 : IBM Java Runtime in Satellite Server (RHSA-2013:1455) (BEAST) (ROBOT)"
        },
        {
            "NASL family": "Gentoo Local Security Checks",
            "NASL id": "GENTOO_GLSA-201406-32.NASL",
            "description": "The remote host is affected by the vulnerability described in GLSA-201406-32 (IcedTea JDK: Multiple vulnerabilities)\n\n    Multiple vulnerabilities have been discovered in the IcedTea JDK. Please       review the CVE identifiers referenced below for details.\n  Impact :\n\n    A remote attacker could possibly execute arbitrary code with the       privileges of the process, cause a Denial of Service condition, obtain       sensitive information, bypass intended security policies, or have other       unspecified impact.\n  Workaround :\n\n    There is no known workaround at this time.",
            "last seen": "2019-02-21",
            "modified": "2018-07-12",
            "plugin id": "76303",
            "published": "2014-06-30",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=76303",
            "title": "GLSA-201406-32 : IcedTea JDK: Multiple vulnerabilities (BEAST) (ROBOT)"
        },
        {
            "NASL family": "Solaris Local Security Checks",
            "NASL id": "SOLARIS10_119213-27.NASL",
            "description": "NSS_NSPR_JSS 3.13.1: NSPR 4.8.9 / NSS 3.13.1 / JSS 4.3.2.\nDate this patch was last updated by Sun : Feb/08/12",
            "last seen": "2018-10-27",
            "modified": "2018-10-26",
            "plugin id": "107308",
            "published": "2018-03-12",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=107308",
            "title": "Solaris 10 (sparc) : 119213-27 (BEAST)"
        },
        {
            "NASL family": "Web Servers",
            "NASL id": "HPSMH_7_2_1_0.NASL",
            "description": "According to the web server's banner, the version of HP System Management Homepage (SMH) hosted on the remote web server is a version prior to 7.2.1.0. It is, therefore, affected by the following vulnerabilities :\n\n  - An information disclosure vulnerability, known as BEAST,     exists in the SSL 3.0 and TLS 1.0 protocols due to a     flaw in the way the initialization vector (IV) is     selected when operating in cipher-block chaining (CBC)     modes. A man-in-the-middle attacker can exploit this     to obtain plaintext HTTP header data, by using a     blockwise chosen-boundary attack (BCBA) on an HTTPS     session, in conjunction with JavaScript code that uses     the HTML5 WebSocket API, the Java URLConnection API,     or the Silverlight WebClient API. (CVE-2011-3389)\n\n  - The utility 'apachectl' can receive a zero-length     directory name in the LD_LIBRARY_PATH via the 'envvars'     file. A local attacker with access to that utility     could exploit this to load a malicious Dynamic Shared     Object (DSO), leading to arbitrary code execution.\n    (CVE-2012-0883)\n\n  - Numerous, unspecified errors could allow remote denial     of service attacks. (CVE-2012-2110, CVE-2012-2329,     CVE-2012-2336, CVE-2013-2357, CVE-2013-2358,     CVE-2013-2359, CVE-2013-2360)\n\n  - The fix for CVE-2012-1823 does not completely correct     the CGI query parameter vulnerability. Disclosure of     PHP source code and code execution are still possible.\n    Note that this vulnerability is exploitable only when     PHP is used in CGI-based configurations.  Apache with     'mod_php' is not an exploitable configuration.\n    (CVE-2012-2311, CVE-2012-2335)\n\n  - Unspecified errors exist that could allow unauthorized     access. (CVE-2012-5217, CVE-2013-2355)\n\n  - Unspecified errors exist that could allow disclosure of     sensitive information. (CVE-2013-2356, CVE-2013-2363)\n\n  - An unspecified error exists that could allow cross-site     scripting attacks. (CVE-2013-2361)\n\n  - Unspecified errors exist that could allow a local     attacker to cause denial of service conditions.\n    (CVE-2013-2362, CVE-2013-2364)\n\n  - An as-yet unspecified vulnerability exists that could     cause a denial of service condition. (CVE-2013-4821)",
            "last seen": "2019-02-21",
            "modified": "2018-11-15",
            "plugin id": "69020",
            "published": "2013-07-23",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=69020",
            "title": "HP System Management Homepage < 7.2.1.0 Multiple Vulnerabilities (BEAST)"
        },
        {
            "NASL family": "Debian Local Security Checks",
            "NASL id": "DEBIAN_DSA-2368.NASL",
            "description": "Several vulnerabilities have been discovered in lighttpd, a small and fast webserver with minimal memory footprint.\n\n  - CVE-2011-4362     Xi Wang discovered that the base64 decoding routine     which is used to decode user input during an HTTP     authentication, suffers of a signedness issue when     processing user input. As a result it is possible to     force lighttpd to perform an out-of-bounds read which     results in Denial of Service conditions.\n\n  - CVE-2011-3389     When using CBC ciphers on an SSL enabled virtual host to     communicate with certain client, a so called 'BEAST'     attack allows man-in-the-middle attackers to obtain     plaintext HTTP traffic via a blockwise chosen-boundary     attack (BCBA) on an HTTPS session. Technically this is     no lighttpd vulnerability. However, lighttpd offers a     workaround to mitigate this problem by providing a     possibility to disable CBC ciphers.\n\n  This updates includes this option by default. System administrators   are advised to read the NEWS file of this update (as this may break   older clients).",
            "last seen": "2019-02-21",
            "modified": "2018-11-10",
            "plugin id": "57508",
            "published": "2012-01-12",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=57508",
            "title": "Debian DSA-2368-1 : lighttpd - multiple vulnerabilities (BEAST)"
        },
        {
            "NASL family": "Solaris Local Security Checks",
            "NASL id": "SOLARIS10_X86_119214-27.NASL",
            "description": "NSS_NSPR_JSS 3.13.1_x86: NSPR 4.8.9 / NSS 3.13.1 / JSS 4.3.2.\nDate this patch was last updated by Sun : Feb/08/12",
            "last seen": "2018-10-31",
            "modified": "2018-10-29",
            "plugin id": "107811",
            "published": "2018-03-12",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=107811",
            "title": "Solaris 10 (x86) : 119214-27 (BEAST)"
        },
        {
            "NASL family": "MacOS X Local Security Checks",
            "NASL id": "MACOSX_SECUPD2014-001.NASL",
            "description": "The remote host is running a version of Mac OS X 10.7 or 10.8 that does not have Security Update 2014-001 applied. This update contains several security-related fixes for the following components :\n\n  - Apache\n  - App Sandbox\n  - ATS\n  - Certificate Trust Policy\n  - CFNetwork Cookies\n  - CoreAnimation\n  - Date and Time\n  - File Bookmark\n  - ImageIO\n  - IOSerialFamily\n  - LaunchServices\n  - NVIDIA Drivers\n  - PHP\n  - QuickLook\n  - QuickTime\n  - Secure Transport\n\nNote that successful exploitation of the most serious issues could result in arbitrary code execution.",
            "last seen": "2019-02-21",
            "modified": "2018-07-14",
            "plugin id": "72688",
            "published": "2014-02-25",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=72688",
            "title": "Mac OS X Multiple Vulnerabilities (Security Update 2014-001) (BEAST)"
        },
        {
            "NASL family": "Gentoo Local Security Checks",
            "NASL id": "GENTOO_GLSA-201301-01.NASL",
            "description": "The remote host is affected by the vulnerability described in GLSA-201301-01 (Mozilla Products: Multiple vulnerabilities)\n\n    Multiple vulnerabilities have been discovered in Mozilla Firefox,       Thunderbird, SeaMonkey, NSS, GNU IceCat, and XULRunner. Please review the       CVE identifiers referenced below for details.\n  Impact :\n\n    A remote attacker could entice a user to view a specially crafted web       page or email, possibly resulting in execution of arbitrary code or a       Denial of Service condition. Furthermore, a remote attacker may be able       to perform Man-in-the-Middle attacks, obtain sensitive information,       bypass restrictions and protection mechanisms, force file downloads,       conduct XML injection attacks, conduct XSS attacks, bypass the Same       Origin Policy, spoof URL&rsquo;s for phishing attacks, trigger a vertical       scroll, spoof the location bar, spoof an SSL indicator, modify the       browser&rsquo;s font, conduct clickjacking attacks, or have other unspecified       impact.\n    A local attacker could gain escalated privileges, obtain sensitive       information, or replace an arbitrary downloaded file.\n  Workaround :\n\n    There is no known workaround at this time.",
            "last seen": "2019-02-21",
            "modified": "2018-11-19",
            "plugin id": "63402",
            "published": "2013-01-08",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=63402",
            "title": "GLSA-201301-01 : Mozilla Products: Multiple vulnerabilities (BEAST)"
        },
        {
            "NASL family": "SuSE Local Security Checks",
            "NASL id": "SUSE_LIBCURL4-8618.NASL",
            "description": "This update of curl fixes several security issues :\n\n  - libcurl URL decode buffer boundary flaw. (bnc#824517 /     CVE-2013-2174)\n\n  - cookie domain tailmatch. (bnc#814655 / CVE-2013-1944)\n\n  - curl sets SSL_OP_ALL. (bnc#742306 / CVE-2011-3389)\n\n  - When SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG is enabled,     does not properly prevent modification of the     ciphersuite in the session cache, which allows remote     attackers to force the downgrade to an unintended cipher     via vectors involving sniffing network traffic to     discover a session identifier. (CVE-2010-4180)",
            "last seen": "2019-02-21",
            "modified": "2013-08-01",
            "plugin id": "67223",
            "published": "2013-07-10",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=67223",
            "title": "SuSE 10 Security Update : libcurl4 (ZYPP Patch Number 8618)"
        },
        {
            "NASL family": "Debian Local Security Checks",
            "NASL id": "DEBIAN_DLA-400.NASL",
            "description": "This update fixes certain known vulnerabilities in pound in squeeze-lts by backporting the version in wheezy.\n\nCVE-2009-3555 The TLS protocol, and the SSL protocol 3.0 and possibly earlier, as used in Microsoft Internet Information Services (IIS) 7.0, mod_ssl in the Apache HTTP Server 2.2.14 and earlier, OpenSSL before 0.9.8l, GnuTLS 2.8.5 and earlier, Mozilla Network Security Services (NSS) 3.12.4 and earlier, multiple Cisco products, and other products, does not properly associate renegotiation handshakes with an existing connection, which allows man-in-the-middle attackers to insert data into HTTPS sessions, and possibly other types of sessions protected by TLS or SSL, by sending an unauthenticated request that is processed retroactively by a server in a post-renegotiation context, related to a 'plaintext injection' attack, aka the 'Project Mogul' issue.\n\nCVE-2011-3389 The SSL protocol, as used in certain configurations in Microsoft Windows and Microsoft Internet Explorer, Mozilla Firefox, Google Chrome, Opera, and other products, encrypts data by using CBC mode with chained initialization vectors, which allows man-in-the-middle attackers to obtain plaintext HTTP headers via a blockwise chosen-boundary attack (BCBA) on an HTTPS session, in conjunction with JavaScript code that uses (1) the HTML5 WebSocket API, (2) the Java URLConnection API, or (3) the Silverlight WebClient API, aka a 'BEAST' attack.\n\nCVE-2012-4929 The TLS protocol 1.2 and earlier, as used in Mozilla Firefox, Google Chrome, Qt, and other products, can encrypt compressed data without properly obfuscating the length of the unencrypted data, which allows man-in-the-middle attackers to obtain plaintext HTTP headers by observing length differences during a series of guesses in which a string in an HTTP request potentially matches an unknown string in an HTTP header, aka a 'CRIME' attack.\n\nCVE-2014-3566 The SSL protocol 3.0, as used in OpenSSL through 1.0.1i and other products, uses nondeterministic CBC padding, which makes it easier for man-in-the-middle attackers to obtain cleartext data via a padding-oracle attack, aka the 'POODLE' issue.\n\nNOTE: Tenable Network Security has extracted the preceding description block directly from the DLA security advisory. Tenable has attempted to automatically clean and format it as much as possible without introducing additional issues.",
            "last seen": "2019-02-21",
            "modified": "2018-08-31",
            "plugin id": "88107",
            "published": "2016-01-25",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=88107",
            "title": "Debian DLA-400-1 : pound security update (BEAST) (POODLE)"
        },
        {
            "NASL family": "MacOS X Local Security Checks",
            "NASL id": "MACOSX_10_7_4.NASL",
            "description": "The remote host is running a version of Mac OS X 10.7.x that is prior to 10.7.4. The newer version contains numerous security-related fixes for the following components :\n\n  - Login Window\n  - Bluetooth\n  - curl\n  - HFS\n  - Kernel\n  - libarchive\n  - libsecurity\n  - libxml\n  - LoginUIFramework\n  - PHP\n  - Quartz Composer\n  - QuickTime\n  - Ruby\n  - Security Framework\n  - Time Machine\n  - X11\n\nNote that this update addresses the recent FileVault password vulnerability, in which user passwords are stored in plaintext to a system-wide debug log if the legacy version of FileVault is used to encrypt user directories after a system upgrade to Lion. Since the patch only limits further exposure, though, we recommend that all users on the system change their passwords if user folders were encrypted using the legacy version of FileVault prior to and after an upgrade to OS X 10.7.",
            "last seen": "2019-02-21",
            "modified": "2018-07-16",
            "plugin id": "59066",
            "published": "2012-05-10",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=59066",
            "title": "Mac OS X 10.7.x < 10.7.4 Multiple Vulnerabilities (BEAST)"
        },
        {
            "NASL family": "SuSE Local Security Checks",
            "NASL id": "OPENSUSE-2012-302.NASL",
            "description": "4 vulnerabilities were discovered for the python (2.7) and python3 packages in openSUSE versions 11.4 and 12.1.",
            "last seen": "2019-02-21",
            "modified": "2018-11-10",
            "plugin id": "74640",
            "published": "2014-06-13",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=74640",
            "title": "openSUSE Security Update : python (openSUSE-SU-2012:0667-1) (BEAST)"
        },
        {
            "NASL family": "SuSE Local Security Checks",
            "NASL id": "SUSE_JAVA-1_4_2-IBM-7908.NASL",
            "description": "IBM Java 1.4.2 SR13 FP11 has been released and contains various security fixes.\n\nhttp://www.ibm.com/developerworks/java/jdk/alerts/ http://www.mozilla.org/en-US/firefox/10.0/releasenotes/\n\n(CVEs fixed: CVE-2011-3547 / CVE-2011-3548 / CVE-2011-3549 / CVE-2011-3552 / CVE-2011-3545 / CVE-2011-3556 / CVE-2011-3557 / CVE-2011-3389 / CVE-2011-3560 )",
            "last seen": "2019-02-21",
            "modified": "2017-06-05",
            "plugin id": "57683",
            "published": "2012-01-25",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=57683",
            "title": "SuSE 10 Security Update : IBM Java 1.4.2 (ZYPP Patch Number 7908)"
        },
        {
            "NASL family": "Fedora Local Security Checks",
            "NASL id": "FEDORA_2012-5892.NASL",
            "description": "Rebase of Python 2 ('python') from 2.7.2 to 2.7.3, bringing in security fixes, along with numerous other bugfixes.\n\nSee http://python.org/download/releases/2.7.3/\n\nNote that Tenable Network Security has extracted the preceding description block directly from the Fedora security advisory. Tenable has attempted to automatically clean and format it as much as possible without introducing additional issues.",
            "last seen": "2019-02-21",
            "modified": "2018-12-24",
            "plugin id": "58956",
            "published": "2012-05-02",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=58956",
            "title": "Fedora 17 : python-2.7.3-3.fc17 / python-docs-2.7.3-1.fc17 (2012-5892) (BEAST)"
        },
        {
            "NASL family": "Misc.",
            "NASL id": "VMWARE_VMSA-2012-0005_REMOTE.NASL",
            "description": "The remote VMware ESX / ESXi host is missing a security-related patch.\nIt is, therefore, affected by multiple vulnerabilities, including remote code execution vulnerabilities, in the following components :\n\n  - Apache Tomcat\n  - bzip2 library\n  - JRE\n  - WDDM display driver\n  - XPDM display driver",
            "last seen": "2019-02-21",
            "modified": "2018-09-06",
            "plugin id": "89106",
            "published": "2016-03-03",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=89106",
            "title": "VMware ESX / ESXi Multiple Vulnerabilities (VMSA-2012-0005) (BEAST) (remote check)"
        },
        {
            "NASL family": "Fedora Local Security Checks",
            "NASL id": "FEDORA_2011-15020.NASL",
            "description": "Update to latest upstream bugfix release\n\n  - Security fixes\n\n    - S7000600, CVE-2011-3547: InputStream skip()       information leak\n\n    - S7019773, CVE-2011-3548: mutable static       AWTKeyStroke.ctor\n\n    - S7023640, CVE-2011-3551: Java2D TransformHelper       integer overflow\n\n    - S7032417, CVE-2011-3552: excessive default UDP socket       limit under SecurityManager\n\n    - S7046794, CVE-2011-3553: JAX-WS stack-traces       information leak\n\n    - S7046823, CVE-2011-3544: missing SecurityManager       checks in scripting engine\n\n    - S7055902, CVE-2011-3521: IIOP deserialization code       execution\n\n    - S7057857, CVE-2011-3554: insufficient pack200 JAR       files uncompress error checks\n\n    - S7064341, CVE-2011-3389: HTTPS: block-wise       chosen-plaintext attack against SSL/TLS (BEAST)\n\n    - S7070134, CVE-2011-3558: HotSpot crashes with sigsegv       from PorterStemmer\n\n    - S7077466, CVE-2011-3556: RMI DGC server remote code       execution\n\n    - S7083012, CVE-2011-3557: RMI registry privileged code       execution\n\n    - S7096936, CVE-2011-3560: missing checkSetFactory calls       in HttpsURLConnection\n\n    - Bug fixes\n\n    - RH727195: Japanese font mappings are broken\n\n    - Backports\n\n    - S6826104, RH730015: Getting a NullPointer exception       when clicked on Application & Toolkit Modal dialog\n\n    - Zero/Shark\n\n    - PR690: Shark fails to JIT using hs20.\n\n    - PR696: Zero fails to handle fast_aldc and fast_aldc_w       in hs20.\n\n  - Added Patch6 as (probably temporally) solution for     S7103224 for buildability on newest glibc libraries.\n\nNote that Tenable Network Security has extracted the preceding description block directly from the Fedora security advisory. Tenable has attempted to automatically clean and format it as much as possible without introducing additional issues.",
            "last seen": "2019-02-21",
            "modified": "2017-06-05",
            "plugin id": "56719",
            "published": "2011-11-07",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=56719",
            "title": "Fedora 16 : java-1.6.0-openjdk-1.6.0.0-60.1.10.4.fc16 (2011-15020) (BEAST)"
        },
        {
            "NASL family": "Debian Local Security Checks",
            "NASL id": "DEBIAN_DSA-2356.NASL",
            "description": "Several vulnerabilities have been discovered in OpenJDK, an implementation of the Java platform :\n\n  - CVE-2011-3389     The TLS implementation does not guard properly against     certain chosen-plaintext attacks when block ciphers are     used in CBC mode.\n\n  - CVE-2011-3521     The CORBA implementation contains a deserialization     vulnerability in the IIOP implementation, allowing     untrusted Java code (such as applets) to elevate its     privileges.\n\n  - CVE-2011-3544     The Java scripting engine lacks necessary security     manager checks, allowing untrusted Java code (such as     applets) to elevate its privileges.\n\n  - CVE-2011-3547     The skip() method in java.io.InputStream uses a shared     buffer, allowing untrusted Java code (such as applets)     to access data that is skipped by other code.\n\n  - CVE-2011-3548     The java.awt.AWTKeyStroke class contains a flaw which     allows untrusted Java code (such as applets) to elevate     its privileges.\n\n  - CVE-2011-3551     The Java2D C code contains an integer overflow which     results in a heap-based buffer overflow, potentially     allowing untrusted Java code (such as applets) to     elevate its privileges.\n\n  - CVE-2011-3552     Malicous Java code can use up an excessive amount of UDP     ports, leading to a denial of service.\n\n  - CVE-2011-3553     JAX-WS enables stack traces for certain server responses     by default, potentially leaking sensitive information.\n\n  - CVE-2011-3554     JAR files in pack200 format are not properly checked for     errors, potentially leading to arbitrary code execution     when unpacking crafted pack200 files.\n\n  - CVE-2011-3556     The RMI Registry server lacks access restrictions on     certain methods, allowing a remote client to execute     arbitary code.\n\n  - CVE-2011-3557     The RMI Registry server fails to properly restrict     privileges of untrusted Java code, allowing RMI clients     to elevate their privileges on the RMI Registry server.\n\n  - CVE-2011-3560     The com.sun.net.ssl.HttpsURLConnection class does not     perform proper security manager checks in the     setSSLSocketFactory() method, allowing untrusted Java     code to bypass security policy restrictions.",
            "last seen": "2019-02-21",
            "modified": "2018-11-10",
            "plugin id": "56987",
            "published": "2011-12-02",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=56987",
            "title": "Debian DSA-2356-1 : openjdk-6 - several vulnerabilities (BEAST)"
        },
        {
            "NASL family": "Debian Local Security Checks",
            "NASL id": "DEBIAN_DSA-2358.NASL",
            "description": "Several vulnerabilities have been discovered in OpenJDK, an implementation of the Java platform. This combines the two previous openjdk-6 advisories, DSA-2311-1 and DSA-2356-1.\n\n  - CVE-2011-0862     Integer overflow errors in the JPEG and font parser     allow untrusted code (including applets) to elevate its     privileges.\n\n  - CVE-2011-0864     Hotspot, the just-in-time compiler in OpenJDK,     mishandled certain byte code instructions, allowing     untrusted code (including applets) to crash the virtual     machine.\n\n  - CVE-2011-0865     A race condition in signed object deserialization could     allow untrusted code to modify signed content,     apparently leaving its signature intact.\n\n  - CVE-2011-0867     Untrusted code (including applets) could access     information about network interfaces which was not     intended to be public. (Note that the interface MAC     address is still available to untrusted code.)\n\n  - CVE-2011-0868     A float-to-long conversion could overflow, allowing     untrusted code (including applets) to crash the virtual     machine.\n\n  - CVE-2011-0869     Untrusted code (including applets) could intercept HTTP     requests by reconfiguring proxy settings through a SOAP     connection.\n\n  - CVE-2011-0871     Untrusted code (including applets) could elevate its     privileges through the Swing MediaTracker code.\n\n  - CVE-2011-3389     The TLS implementation does not guard properly against     certain chosen-plaintext attacks when block ciphers are     used in CBC mode.\n\n  - CVE-2011-3521     The CORBA implementation contains a deserialization     vulnerability in the IIOP implementation, allowing     untrusted Java code (such as applets) to elevate its     privileges.\n\n  - CVE-2011-3544     The Java scripting engine lacks necessary security     manager checks, allowing untrusted Java code (such as     applets) to elevate its privileges.\n\n  - CVE-2011-3547     The skip() method in java.io.InputStream uses a shared     buffer, allowing untrusted Java code (such as applets)     to access data that is skipped by other code.\n\n  - CVE-2011-3548     The java.awt.AWTKeyStroke class contains a flaw which     allows untrusted Java code (such as applets) to elevate     its privileges.\n\n  - CVE-2011-3551     The Java2D C code contains an integer overflow which     results in a heap-based buffer overflow, potentially     allowing untrusted Java code (such as applets) to     elevate its privileges.\n\n  - CVE-2011-3552     Malicous Java code can use up an excessive amount of UDP     ports, leading to a denial of service.\n\n  - CVE-2011-3553     JAX-WS enables stack traces for certain server responses     by default, potentially leaking sensitive information.\n\n  - CVE-2011-3554     JAR files in pack200 format are not properly checked for     errors, potentially leading to arbitrary code execution     when unpacking crafted pack200 files.\n\n  - CVE-2011-3556     The RMI Registry server lacks access restrictions on     certain methods, allowing a remote client to execute     arbitary code.\n\n  - CVE-2011-3557     The RMI Registry server fails to properly restrict     privileges of untrusted Java code, allowing RMI clients     to elevate their privileges on the RMI Registry server.\n\n  - CVE-2011-3560     The com.sun.net.ssl.HttpsURLConnection class does not     perform proper security manager checks in the     setSSLSocketFactory() method, allowing untrusted Java     code to bypass security policy restrictions.",
            "last seen": "2019-02-21",
            "modified": "2018-11-10",
            "plugin id": "57499",
            "published": "2012-01-12",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=57499",
            "title": "Debian DSA-2358-1 : openjdk-6 - several vulnerabilities (BEAST)"
        },
        {
            "NASL family": "FreeBSD Local Security Checks",
            "NASL id": "FREEBSD_PKG_18CE9A90F26911E1BE53080027EF73EC.NASL",
            "description": "Matthias Andree reports :\n\nFetchmail version 6.3.9 enabled 'all SSL workarounds' (SSL_OP_ALL) which contains a switch to disable a countermeasure against certain attacks against block ciphers that permit guessing the initialization vectors, providing that an attacker can make the application (fetchmail) encrypt some data for him -- which is not easily the case.\n\nStream ciphers (such as RC4) are unaffected.\n\nCredits to Apple Product Security for reporting this.",
            "last seen": "2019-02-21",
            "modified": "2018-11-10",
            "plugin id": "61725",
            "published": "2012-08-30",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=61725",
            "title": "FreeBSD : fetchmail -- chosen plaintext attack against SSL CBC initialization vectors (18ce9a90-f269-11e1-be53-080027ef73ec) (BEAST)"
        },
        {
            "NASL family": "Misc.",
            "NASL id": "KERIO_CONNECT_810.NASL",
            "description": "According to its banner, the remote host is running a version of Kerio Connect (formerly known Kerio MailServer) prior to 8.1.0. It is, therefore, affected by an information disclosure vulnerability, known as BEAST, in the SSL 3.0 and TLS 1.0 protocols due to a flaw in the way the initialization vector (IV) is selected when operating in cipher-block chaining (CBC) modes. A man-in-the-middle attacker can exploit this to obtain plaintext HTTP header data, by using a blockwise chosen-boundary attack (BCBA) on an HTTPS session, in conjunction with JavaScript code that uses the HTML5 WebSocket API, the Java URLConnection API, or the Silverlight WebClient API.\n\nTLS 1.1, TLS 1.2, and all cipher suites that do not use CBC mode are not affected.",
            "last seen": "2019-02-21",
            "modified": "2018-07-12",
            "plugin id": "72393",
            "published": "2014-02-07",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=72393",
            "title": "Kerio Connect < 8.1.0 SSL/TLS Information Disclosure (BEAST)"
        },
        {
            "NASL family": "Solaris Local Security Checks",
            "NASL id": "SOLARIS10_X86_125359-15.NASL",
            "description": "NSS_NSPR_JSS 3.13.1 Solaris_x86: NSPR 4.8.9 / NSS 3.13.1 / JSS 4.3.\nDate this patch was last updated by Sun : Feb/08/12",
            "last seen": "2018-10-31",
            "modified": "2018-10-29",
            "plugin id": "107926",
            "published": "2018-03-12",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=107926",
            "title": "Solaris 10 (x86) : 125359-15 (BEAST)"
        },
        {
            "NASL family": "Solaris Local Security Checks",
            "NASL id": "SOLARIS10_125358-15.NASL",
            "description": "NSS_NSPR_JSS 3.13.1 Solaris: NSPR 4.8.9 / NSS 3.13.1 / JSS 4.3.2 M.\nDate this patch was last updated by Sun : Feb/08/12",
            "last seen": "2018-10-27",
            "modified": "2018-10-26",
            "plugin id": "107424",
            "published": "2018-03-12",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=107424",
            "title": "Solaris 10 (sparc) : 125358-15 (BEAST)"
        },
        {
            "NASL family": "SuSE Local Security Checks",
            "NASL id": "SUSE_11_JAVA-1_6_0-IBM-120223.NASL",
            "description": "IBM Java 1.6.0 SR10 has been released fixing the following CVE's/security Issues :\n\n  - CVE-2011-3389\n\n  - CVE-2011-3516\n\n  - CVE-2011-3521\n\n  - CVE-2011-3544\n\n  - CVE-2011-3545\n\n  - CVE-2011-3546\n\n  - CVE-2011-3547\n\n  - CVE-2011-3548\n\n  - CVE-2011-3549\n\n  - CVE-2011-3550\n\n  - CVE-2011-3551\n\n  - CVE-2011-3552\n\n  - CVE-2011-3553\n\n  - CVE-2011-3554\n\n  - CVE-2011-3556\n\n  - CVE-2011-3557\n\n  - CVE-2011-3560\n\n  - CVE-2011-3561",
            "last seen": "2019-02-21",
            "modified": "2017-06-05",
            "plugin id": "58164",
            "published": "2012-02-29",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=58164",
            "title": "SuSE 11.1 Security Update : IBM Java 1.6.0 (SAT Patch Number 5872)"
        },
        {
            "NASL family": "VMware ESX Local Security Checks",
            "NASL id": "VMWARE_VMSA-2012-0003.NASL",
            "description": "a. VirtualCenter and ESX, Oracle (Sun) JRE update 1.5.0_32\n\n   Oracle (Sun) JRE is updated to version 1.5.0_32, which addresses    multiple security issues that existed in earlier releases of Oracle    (Sun) JRE.\n\n   Oracle has documented the CVE identifiers that are addressed in    JRE 1.5.0_32 in the Oracle Java SE Critical Patch Update Advisory of    October 2011.",
            "last seen": "2019-02-21",
            "modified": "2018-08-06",
            "plugin id": "58302",
            "published": "2012-03-09",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=58302",
            "title": "VMSA-2012-0003 : VMware VirtualCenter Update and ESX 3.5 patch update JRE"
        },
        {
            "NASL family": "Ubuntu Local Security Checks",
            "NASL id": "UBUNTU_USN-1263-1.NASL",
            "description": "Deepak Bhole discovered a flaw in the Same Origin Policy (SOP) implementation in the IcedTea web browser plugin. This could allow a remote attacker to open connections to certain hosts that should not be permitted. (CVE-2011-3377)\n\nJuliano Rizzo and Thai Duong discovered that the block-wise AES encryption algorithm block-wise as used in TLS/SSL was vulnerable to a chosen-plaintext attack. This could allow a remote attacker to view confidential data. (CVE-2011-3389)\n\nIt was discovered that a type confusion flaw existed in the in the Internet Inter-Orb Protocol (IIOP) deserialization code. A remote attacker could use this to cause an untrusted application or applet to execute arbitrary code by deserializing malicious input.\n(CVE-2011-3521)\n\nIt was discovered that the Java scripting engine did not perform SecurityManager checks. This could allow a remote attacker to cause an untrusted application or applet to execute arbitrary code with the full privileges of the JVM. (CVE-2011-3544)\n\nIt was discovered that the InputStream class used a global buffer to store input bytes skipped. An attacker could possibly use this to gain access to sensitive information. (CVE-2011-3547)\n\nIt was discovered that a vulnerability existed in the AWTKeyStroke class. A remote attacker could cause an untrusted application or applet to execute arbitrary code. (CVE-2011-3548)\n\nIt was discovered that an integer overflow vulnerability existed in the TransformHelper class in the Java2D implementation. A remote attacker could use this cause a denial of service via an application or applet crash or possibly execute arbitrary code. (CVE-2011-3551)\n\nIt was discovered that the default number of available UDP sockets for applications running under SecurityManager restrictions was set too high. A remote attacker could use this with a malicious application or applet exhaust the number of available UDP sockets to cause a denial of service for other applets or applications running within the same JVM. (CVE-2011-3552)\n\nIt was discovered that Java API for XML Web Services (JAX-WS) could incorrectly expose a stack trace. A remote attacker could potentially use this to gain access to sensitive information. (CVE-2011-3553)\n\nIt was discovered that the unpacker for pack200 JAR files did not sufficiently check for errors. An attacker could cause a denial of service or possibly execute arbitrary code through a specially crafted pack200 JAR file. (CVE-2011-3554)\n\nIt was discovered that the RMI registration implementation did not properly restrict privileges of remotely executed code. A remote attacker could use this to execute code with elevated privileges.\n(CVE-2011-3556, CVE-2011-3557)\n\nIt was discovered that the HotSpot VM could be made to crash, allowing an attacker to cause a denial of service or possibly leak sensitive information. (CVE-2011-3558)\n\nIt was discovered that the HttpsURLConnection class did not properly perform SecurityManager checks in certain situations. This could allow a remote attacker to bypass restrictions on HTTPS connections.\n(CVE-2011-3560).\n\nNote that Tenable Network Security has extracted the preceding description block directly from the Ubuntu security advisory. Tenable has attempted to automatically clean and format it as much as possible without introducing additional issues.",
            "last seen": "2019-02-21",
            "modified": "2018-12-01",
            "plugin id": "56860",
            "published": "2011-11-17",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=56860",
            "title": "Ubuntu 10.04 LTS / 10.10 / 11.04 / 11.10 : icedtea-web, openjdk-6, openjdk-6b18 vulnerabilities (USN-1263-1) (BEAST)"
        },
        {
            "NASL family": "Scientific Linux Local Security Checks",
            "NASL id": "SL_20111019_JAVA_1_6_0_SUN_ON_SL5_X.NASL",
            "description": "The Sun 1.6.0 Java release includes the Sun Java 6 Runtime Environment and the Sun Java 6 Software Development Kit.\n\nThis update fixes several vulnerabilities in the Sun Java 6 Runtime Environment and the Sun Java 6 Software Development Kit. Further information about these flaws can be found on the Oracle Java SE Critical Patch page, listed in the References section. (CVE-2011-3389, CVE-2011-3516, CVE-2011-3521, CVE-2011-3544, CVE-2011-3545, CVE-2011-3546, CVE-2011-3547, CVE-2011-3548, CVE-2011-3549, CVE-2011-3550, CVE-2011-3551, CVE-2011-3552, CVE-2011-3553, CVE-2011-3554, CVE-2011-3555, CVE-2011-3556, CVE-2011-3557, CVE-2011-3558, CVE-2011-3560, CVE-2011-3561)\n\nAll users of java-1.6.0-sun are advised to upgrade to these updated packages, which provide JDK and JRE 6 Update 29 and resolve these issues. All running instances of Sun Java must be restarted for the update to take effect.",
            "last seen": "2019-02-21",
            "modified": "2018-12-31",
            "plugin id": "61158",
            "published": "2012-08-01",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=61158",
            "title": "Scientific Linux Security Update : java-1.6.0-sun on SL5.x i386/x86_64 (BEAST)"
        },
        {
            "NASL family": "Red Hat Local Security Checks",
            "NASL id": "REDHAT-RHSA-2012-0034.NASL",
            "description": "Updated java-1.6.0-ibm packages that fix several security issues are now available for Red Hat Enterprise Linux 4 Extras, and Red Hat Enterprise Linux 5 and 6 Supplementary.\n\nThe Red Hat Security Response Team has rated this update as having critical security impact. Common Vulnerability Scoring System (CVSS) base scores, which give detailed severity ratings, are available for each vulnerability from the CVE links in the References section.\n\nThe IBM Java SE version 6 release includes the IBM Java 6 Runtime Environment and the IBM Java 6 Software Development Kit.\n\nThis update fixes several vulnerabilities in the IBM Java 6 Runtime Environment and the IBM Java 6 Software Development Kit. Detailed vulnerability descriptions are linked from the IBM 'Security alerts' page, listed in the References section. (CVE-2011-3389, CVE-2011-3516, CVE-2011-3521, CVE-2011-3544, CVE-2011-3545, CVE-2011-3546, CVE-2011-3547, CVE-2011-3548, CVE-2011-3549, CVE-2011-3550, CVE-2011-3551, CVE-2011-3552, CVE-2011-3553, CVE-2011-3554, CVE-2011-3556, CVE-2011-3557, CVE-2011-3560, CVE-2011-3561)\n\nAll users of java-1.6.0-ibm are advised to upgrade to these updated packages, containing the IBM Java 6 SR10 release. All running instances of IBM Java must be restarted for the update to take effect.",
            "last seen": "2019-02-21",
            "modified": "2018-12-20",
            "plugin id": "57595",
            "published": "2012-01-19",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=57595",
            "title": "RHEL 4 / 5 / 6 : java-1.6.0-ibm (RHSA-2012:0034) (BEAST)"
        },
        {
            "NASL family": "SuSE Local Security Checks",
            "NASL id": "SUSE_11_3_JAVA-1_6_0-OPENJDK-111025.NASL",
            "description": "Oracle/Sun OpenJDK 1.6.0 was updated to the 1.10.4release, fixing lots of bugs and security issues.\n\nPlease see http://www.oracle.com/technetwork/topics/security/javacpuoct2011-44343 1.html\n\nfor more details.",
            "last seen": "2019-02-21",
            "modified": "2017-06-05",
            "plugin id": "75539",
            "published": "2014-06-13",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=75539",
            "title": "openSUSE Security Update : java-1_6_0-openjdk (java-1_6_0-openjdk-5329) (BEAST)"
        },
        {
            "NASL family": "SuSE Local Security Checks",
            "NASL id": "SUSE_JAVA-1_6_0-IBM-7926.NASL",
            "description": "IBM Java 1.6.0 SR10 has been released fixing the following CVE's :\n\n  - CVE-2011-3389\n\n  - CVE-2011-3516\n\n  - CVE-2011-3521\n\n  - CVE-2011-3544\n\n  - CVE-2011-3545\n\n  - CVE-2011-3546\n\n  - CVE-2011-3547\n\n  - CVE-2011-3548\n\n  - CVE-2011-3549\n\n  - CVE-2011-3550\n\n  - CVE-2011-3551\n\n  - CVE-2011-3552\n\n  - CVE-2011-3553\n\n  - CVE-2011-3554\n\n  - CVE-2011-3556\n\n  - CVE-2011-3557\n\n  - CVE-2011-3560\n\n  - CVE-2011-3561",
            "last seen": "2018-09-01",
            "modified": "2017-06-05",
            "plugin id": "57658",
            "published": "2012-01-24",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=57658",
            "title": "SuSE 10 Security Update : IBM Java (ZYPP Patch Number 7926)"
        },
        {
            "NASL family": "Amazon Linux Local Security Checks",
            "NASL id": "ALA_ALAS-2011-10.NASL",
            "description": "A flaw was found in the Java RMI (Remote Method Invocation) registry implementation. A remote RMI client could use this flaw to execute arbitrary code on the RMI server running the registry. (CVE-2011-3556)\n\nA flaw was found in the Java RMI registry implementation. A remote RMI client could use this flaw to execute code on the RMI server with unrestricted privileges. (CVE-2011-3557)\n\nA flaw was found in the IIOP (Internet Inter-Orb Protocol) deserialization code. An untrusted Java application or applet running in a sandbox could use this flaw to bypass sandbox restrictions by deserializing specially crafted input. (CVE-2011-3521)\n\nIt was found that the Java ScriptingEngine did not properly restrict the privileges of sandboxed applications. An untrusted Java application or applet running in a sandbox could use this flaw to bypass sandbox restrictions. (CVE-2011-3544)\n\nA flaw was found in the AWTKeyStroke implementation. An untrusted Java application or applet running in a sandbox could use this flaw to bypass sandbox restrictions. (CVE-2011-3548)\n\nAn integer overflow flaw, leading to a heap-based buffer overflow, was found in the Java2D code used to perform transformations of graphic shapes and images. An untrusted Java application or applet running in a sandbox could use this flaw to bypass sandbox restrictions.\n(CVE-2011-3551)\n\nAn insufficient error checking flaw was found in the unpacker for JAR files in pack200 format. A specially crafted JAR file could use this flaw to crash the Java Virtual Machine (JVM) or, possibly, execute arbitrary code with JVM privileges. (CVE-2011-3554)\n\nIt was found that HttpsURLConnection did not perform SecurityManager checks in the setSSLSocketFactory method. An untrusted Java application or applet running in a sandbox could use this flaw to bypass connection restrictions defined in the policy. (CVE-2011-3560)\n\nA flaw was found in the way the SSL 3 and TLS 1.0 protocols used block ciphers in cipher-block chaining (CBC) mode. An attacker able to perform a chosen plain text attack against a connection mixing trusted and untrusted data could use this flaw to recover portions of the trusted data sent over the connection. (CVE-2011-3389)\n\nNote: This update mitigates the CVE-2011-3389 issue by splitting the first application data record byte to a separate SSL/TLS protocol record. This mitigation may cause compatibility issues with some SSL/TLS implementations and can be disabled using the jsse.enableCBCProtection boolean property. This can be done on the command line by appending the flag '-Djsse.enableCBCProtection=false' to the java command.\n\nAn information leak flaw was found in the InputStream.skip implementation. An untrusted Java application or applet could possibly use this flaw to obtain bytes skipped by other threads.\n(CVE-2011-3547)\n\nA flaw was found in the Java HotSpot virtual machine. An untrusted Java application or applet could use this flaw to disclose portions of the VM memory, or cause it to crash. (CVE-2011-3558)\n\nThe Java API for XML Web Services (JAX-WS) implementation in OpenJDK was configured to include the stack trace in error messages sent to clients. A remote client could possibly use this flaw to obtain sensitive information. (CVE-2011-3553)\n\nIt was found that Java applications running with SecurityManager restrictions were allowed to use too many UDP sockets by default. If multiple instances of a malicious application were started at the same time, they could exhaust all available UDP sockets on the system.\n(CVE-2011-3552)",
            "last seen": "2019-02-21",
            "modified": "2018-04-18",
            "plugin id": "69569",
            "published": "2013-09-04",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=69569",
            "title": "Amazon Linux AMI : java-1.6.0-openjdk (ALAS-2011-10) (BEAST)"
        },
        {
            "NASL family": "MacOS X Local Security Checks",
            "NASL id": "MACOSX_JAVA_10_6_UPDATE6.NASL",
            "description": "The remote Mac OS X host is running a version of Java for Mac OS X 10.6 that is missing Update 6, which updates the Java version to 1.6.0_29. It is, therefore, affected by multiple security vulnerabilities, the most serious of which may allow an untrusted Java applet to execute arbitrary code with the privileges of the current user outside the Java sandbox.",
            "last seen": "2019-02-21",
            "modified": "2018-07-14",
            "plugin id": "56748",
            "published": "2011-11-09",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=56748",
            "title": "Mac OS X : Java for Mac OS X 10.6 Update 6 (BEAST)"
        },
        {
            "NASL family": "Ubuntu Local Security Checks",
            "NASL id": "UBUNTU_USN-1263-2.NASL",
            "description": "USN-1263-1 fixed vulnerabilities in OpenJDK 6. The upstream patch for the chosen plaintext attack on the block-wise AES encryption algorithm (CVE-2011-3389) introduced a regression that caused TLS/SSL connections to fail when using certain algorithms. This update fixes the problem.\n\nWe apologize for the inconvenience.\n\nDeepak Bhole discovered a flaw in the Same Origin Policy (SOP) implementation in the IcedTea web browser plugin. This could allow a remote attacker to open connections to certain hosts that should not be permitted. (CVE-2011-3377)\n\nJuliano Rizzo and Thai Duong discovered that the block-wise AES encryption algorithm block-wise as used in TLS/SSL was vulnerable to a chosen-plaintext attack. This could allow a remote attacker to view confidential data. (CVE-2011-3389)\n\nIt was discovered that a type confusion flaw existed in the in the Internet Inter-Orb Protocol (IIOP) deserialization code. A remote attacker could use this to cause an untrusted application or applet to execute arbitrary code by deserializing malicious input. (CVE-2011-3521)\n\nIt was discovered that the Java scripting engine did not perform SecurityManager checks. This could allow a remote attacker to cause an untrusted application or applet to execute arbitrary code with the full privileges of the JVM.\n(CVE-2011-3544)\n\nIt was discovered that the InputStream class used a global buffer to store input bytes skipped. An attacker could possibly use this to gain access to sensitive information.\n(CVE-2011-3547)\n\nIt was discovered that a vulnerability existed in the AWTKeyStroke class. A remote attacker could cause an untrusted application or applet to execute arbitrary code.\n(CVE-2011-3548)\n\nIt was discovered that an integer overflow vulnerability existed in the TransformHelper class in the Java2D implementation. A remote attacker could use this cause a denial of service via an application or applet crash or possibly execute arbitrary code. (CVE-2011-3551)\n\nIt was discovered that the default number of available UDP sockets for applications running under SecurityManager restrictions was set too high. A remote attacker could use this with a malicious application or applet exhaust the number of available UDP sockets to cause a denial of service for other applets or applications running within the same JVM. (CVE-2011-3552)\n\nIt was discovered that Java API for XML Web Services (JAX-WS) could incorrectly expose a stack trace. A remote attacker could potentially use this to gain access to sensitive information. (CVE-2011-3553)\n\nIt was discovered that the unpacker for pack200 JAR files did not sufficiently check for errors. An attacker could cause a denial of service or possibly execute arbitrary code through a specially crafted pack200 JAR file.\n(CVE-2011-3554)\n\nIt was discovered that the RMI registration implementation did not properly restrict privileges of remotely executed code. A remote attacker could use this to execute code with elevated privileges. (CVE-2011-3556, CVE-2011-3557)\n\nIt was discovered that the HotSpot VM could be made to crash, allowing an attacker to cause a denial of service or possibly leak sensitive information. (CVE-2011-3558)\n\nIt was discovered that the HttpsURLConnection class did not properly perform SecurityManager checks in certain situations. This could allow a remote attacker to bypass restrictions on HTTPS connections. (CVE-2011-3560).\n\nNote that Tenable Network Security has extracted the preceding description block directly from the Ubuntu security advisory. Tenable has attempted to automatically clean and format it as much as possible without introducing additional issues.",
            "last seen": "2019-02-21",
            "modified": "2018-12-01",
            "plugin id": "57685",
            "published": "2012-01-25",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=57685",
            "title": "Ubuntu 10.04 LTS / 10.10 / 11.04 / 11.10 : openjdk-6, openjdk-6b18 regression (USN-1263-2) (BEAST)"
        },
        {
            "NASL family": "Mandriva Local Security Checks",
            "NASL id": "MANDRIVA_MDVSA-2012-097.NASL",
            "description": "Multiple vulnerabilities has been discovered and corrected in python :\n\nThe _ssl module would always disable the CBC IV attack countermeasure (CVE-2011-3389).\n\nA race condition was found in the way the Python distutils module set file permissions during the creation of the .pypirc file. If a local user had access to the home directory of another user who is running distutils, they could use this flaw to gain access to that user's .pypirc file, which can contain usernames and passwords for code repositories (CVE-2011-4944).\n\nA flaw was found in the way the Python SimpleXMLRPCServer module handled clients disconnecting prematurely. A remote attacker could use this flaw to cause excessive CPU consumption on a server using SimpleXMLRPCServer (CVE-2012-0845).\n\nHash table collisions CPU usage DoS for the embedded copy of expat (CVE-2012-0876).\n\nA denial of service flaw was found in the implementation of associative arrays (dictionaries) in Python. An attacker able to supply a large number of inputs to a Python application (such as HTTP POST request parameters sent to a web application) that are used as keys when inserting data into an array could trigger multiple hash function collisions, making array operations take an excessive amount of CPU time. To mitigate this issue, randomization has been added to the hash function to reduce the chance of an attacker successfully causing intentional collisions (CVE-2012-1150).\n\nThe updated packages have been patched to correct these issues.",
            "last seen": "2019-02-21",
            "modified": "2018-07-19",
            "plugin id": "61956",
            "published": "2012-09-06",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=61956",
            "title": "Mandriva Linux Security Advisory : python (MDVSA-2012:097)"
        },
        {
            "NASL family": "Red Hat Local Security Checks",
            "NASL id": "REDHAT-RHSA-2012-0006.NASL",
            "description": "Updated java-1.4.2-ibm packages that fix several security issues are now available for Red Hat Enterprise Linux 4 Extras and Red Hat Enterprise Linux 5 Supplementary.\n\nThe Red Hat Security Response Team has rated this update as having critical security impact. Common Vulnerability Scoring System (CVSS) base scores, which give detailed severity ratings, are available for each vulnerability from the CVE links in the References section.\n\nThe IBM Java SE version 1.4.2 release includes the IBM Java 1.4.2 Runtime Environment and the IBM Java 1.4.2 Software Development Kit.\n\nThis update fixes several vulnerabilities in the IBM Java 1.4.2 Runtime Environment and the IBM Java 1.4.2 Software Development Kit.\nDetailed vulnerability descriptions are linked from the IBM 'Security alerts' page, listed in the References section. (CVE-2011-3389, CVE-2011-3545, CVE-2011-3547, CVE-2011-3548, CVE-2011-3549, CVE-2011-3552, CVE-2011-3556, CVE-2011-3557, CVE-2011-3560)\n\nAll users of java-1.4.2-ibm are advised to upgrade to these updated packages, which contain the IBM Java 1.4.2 SR13-FP11 release. All running instances of IBM Java must be restarted for this update to take effect.",
            "last seen": "2019-02-21",
            "modified": "2018-12-20",
            "plugin id": "57464",
            "published": "2012-01-10",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=57464",
            "title": "RHEL 4 / 5 : java-1.4.2-ibm (RHSA-2012:0006) (BEAST)"
        },
        {
            "NASL family": "Gentoo Local Security Checks",
            "NASL id": "GENTOO_GLSA-201111-02.NASL",
            "description": "The remote host is affected by the vulnerability described in GLSA-201111-02 (Oracle JRE/JDK: Multiple vulnerabilities)\n\n    Multiple vulnerabilities have been reported in the Oracle Java       implementation. Please review the CVE identifiers referenced below and       the associated Oracle Critical Patch Update Advisory for details.\n  Impact :\n\n    A remote attacker could exploit these vulnerabilities to cause       unspecified impact, possibly including remote execution of arbitrary       code.\n  Workaround :\n\n    There is no known workaround at this time.",
            "last seen": "2019-02-21",
            "modified": "2018-07-11",
            "plugin id": "56724",
            "published": "2011-11-07",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=56724",
            "title": "GLSA-201111-02 : Oracle JRE/JDK: Multiple vulnerabilities (BEAST)"
        },
        {
            "NASL family": "Red Hat Local Security Checks",
            "NASL id": "REDHAT-RHSA-2012-0508.NASL",
            "description": "Updated java-1.5.0-ibm packages that fix several security issues are now available for Red Hat Enterprise Linux 5 and 6 Supplementary.\n\nThe Red Hat Security Response Team has rated this update as having critical security impact. Common Vulnerability Scoring System (CVSS) base scores, which give detailed severity ratings, are available for each vulnerability from the CVE links in the References section.\n\nThe IBM 1.5.0 Java release includes the IBM Java 2 Runtime Environment and the IBM Java 2 Software Development Kit.\n\nThis update fixes several vulnerabilities in the IBM Java 2 Runtime Environment and the IBM Java 2 Software Development Kit. Detailed vulnerability descriptions are linked from the IBM 'Security alerts' page, listed in the References section. (CVE-2011-3389, CVE-2011-3557, CVE-2011-3560, CVE-2011-3563, CVE-2012-0498, CVE-2012-0499, CVE-2012-0501, CVE-2012-0502, CVE-2012-0503, CVE-2012-0505, CVE-2012-0506, CVE-2012-0507)\n\nAll users of java-1.5.0-ibm are advised to upgrade to these updated packages, containing the IBM 1.5.0 SR13-FP1 Java release. All running instances of IBM Java must be restarted for this update to take effect.",
            "last seen": "2019-02-21",
            "modified": "2018-12-20",
            "plugin id": "58840",
            "published": "2012-04-24",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=58840",
            "title": "RHEL 5 / 6 : java-1.5.0-ibm (RHSA-2012:0508) (BEAST)"
        },
        {
            "NASL family": "VMware ESX Local Security Checks",
            "NASL id": "VMWARE_VMSA-2012-0005.NASL",
            "description": "a. VMware Tools Display Driver Privilege Escalation\n\n The VMware XPDM and WDDM display drivers contain buffer overflow  vulnerabilities and the XPDM display driver does not properly  check for NULL pointers. Exploitation of these issues may lead  to local privilege escalation on Windows-based Guest Operating  Systems.\n\n VMware would like to thank Tarjei Mandt for reporting theses  issues to us.\n\n The Common Vulnerabilities and Exposures project (cve.mitre.org)  has assigned the names CVE-2012-1509 (XPDM buffer overrun),  CVE-2012-1510 (WDDM buffer overrun) and CVE-2012-1508 (XPDM null  pointer dereference) to these issues.\n\n Note: CVE-2012-1509 doesn't affect ESXi and ESX.\n\nb. vSphere Client internal browser input validation vulnerability\n\n The vSphere Client has an internal browser that renders html  pages from log file entries. This browser doesn't properly  sanitize input and may run script that is introduced into the  log files. In order for the script to run, the user would need  to open an individual, malicious log file entry. The script  would run with the permissions of the user that runs the vSphere  Client.\n\n VMware would like to thank Edward Torkington for reporting this  issue to us.\n\n The Common Vulnerabilities and Exposures project (cve.mitre.org)  has assigned the name CVE-2012-1512 to this issue.\n\n In order to remediate the issue, the vSphere Client of the  vSphere 5.0 Update 1 release or the vSphere 4.1 Update 2 release  needs to be installed. The vSphere Clients that come with  vSphere 4.0 and vCenter Server 2.5 are not affected.\n\nc. vCenter Orchestrator Password Disclosure\n\n The vCenter Orchestrator (vCO) Web Configuration tool reflects  back the vCenter Server password as part of the webpage. This  might allow the logged-in vCO administrator to retrieve the  vCenter Server password.\n\n VMware would like to thank Alexey Sintsov from Digital Security  Research Group for reporting this issue to us.\n\n The Common Vulnerabilities and Exposures project (cve.mitre.org)  has assigned the name CVE-2012-1513 to this issue.\n\nd. vShield Manager Cross-Site Request Forgery vulnerability\n\n The vShield Manager (vSM) interface has a Cross-Site Request  Forgery vulnerability. If an attacker can convince an  authenticated user to visit a malicious link, the attacker may  force the victim to forward an authenticated request to the  server.\n\n VMware would like to thank Frans Pehrson of Xxor AB  (www.xxor.se<http://www.xxor.se>) and Claudio Criscione for independently reporting  this issue to us\n\n The Common Vulnerabilities and Exposures project (cve.mitre.org)  has assigned the name CVE-2012-1514 to this issue.\n\ne. vCenter Update Manager, Oracle (Sun) JRE update 1.6.0_30\n\n Oracle (Sun) JRE is updated to version 1.6.0_30, which addresses  multiple security issues that existed in earlier releases of  Oracle (Sun) JRE.\n\n Oracle has documented the CVE identifiers that are addressed in  JRE 1.6.0_29 and JRE 1.6.0_30 in the Oracle Java SE Critical  Patch Update Advisory of October 2011. The References section  provides a link to this advisory.\n\nf. vCenter Server Apache Tomcat update 6.0.35\n\n Apache Tomcat has been updated to version 6.0.35 to address  multiple security issues.\n\n The Common Vulnerabilities and Exposures project (cve.mitre.org)  has assigned the names CVE-2011-3190, CVE-2011-3375,  CVE-2011-4858, and CVE-2012-0022 to these issues.\n\n\ng. ESXi update to third-party component bzip2\n\n The bzip2 library is updated to version 1.0.6, which resolves a  security issue.\n\n The Common Vulnerabilities and Exposures project (cve.mitre.org)  has assigned the name CVE-2010-0405 to this issue.",
            "last seen": "2019-02-21",
            "modified": "2018-09-06",
            "plugin id": "58362",
            "published": "2012-03-16",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=58362",
            "title": "VMSA-2012-0005 : VMware vCenter Server, Orchestrator, Update Manager, vShield, vSphere Client, Workstation, Player, ESXi, and ESX address several security issues"
        },
        {
            "NASL family": "SuSE Local Security Checks",
            "NASL id": "SUSE_11_4_JAVA-1_6_0-OPENJDK-111025.NASL",
            "description": "Oracle/Sun OpenJDK 1.6.0 was updated to the 1.10.4release, fixing lots of bugs and security issues.\n\nPlease see http://www.oracle.com/technetwork/topics/security/javacpuoct2011-44343 1.html\n\nfor more details.",
            "last seen": "2019-02-21",
            "modified": "2017-06-05",
            "plugin id": "75870",
            "published": "2014-06-13",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=75870",
            "title": "openSUSE Security Update : java-1_6_0-openjdk (java-1_6_0-openjdk-5329) (BEAST)"
        },
        {
            "NASL family": "SuSE Local Security Checks",
            "NASL id": "SUSE_11_4_JAVA-1_6_0-SUN-111024.NASL",
            "description": "Oracle/Sun Java 1.6.0 was updated to the u26 release, fixing lots of bugs and security issues.\n\nPlease see http://www.oracle.com/technetwork/topics/security/javacpuoct2011-44343 1.html\n\nfor more details.",
            "last seen": "2019-02-21",
            "modified": "2017-06-05",
            "plugin id": "75874",
            "published": "2014-06-13",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=75874",
            "title": "openSUSE Security Update : java-1_6_0-sun (java-1_6_0-sun-5320) (BEAST)"
        },
        {
            "NASL family": "MacOS X Local Security Checks",
            "NASL id": "MACOSX_JAVA_10_7_UPDATE1.NASL",
            "description": "The remote Mac OS X host is running a version of Java for Mac OS X 10.7 that is missing Update 1, which updates the Java version to 1.6.0_29. It is, therefore, affected by multiple security vulnerabilities, the most serious of which may allow an untrusted Java applet to execute arbitrary code with the privileges of the current user outside the Java sandbox.",
            "last seen": "2019-02-21",
            "modified": "2018-07-14",
            "plugin id": "56749",
            "published": "2011-11-09",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=56749",
            "title": "Mac OS X : Java for Mac OS X 10.7 Update 1 (BEAST)"
        },
        {
            "NASL family": "Windows",
            "NASL id": "ORACLE_JAVA_CPU_OCT_2011.NASL",
            "description": "The version of Oracle (formerly Sun) Java SE or Java for Business installed on the remote host is earlier than 7 Update 1 / 6 Update 29 / 5.0 Update 32 / 1.4.2_34 and is potentially affected by security issues in the following components :\n\n  - 2D\n  - AWT\n  - Deployment\n  - Deserialization\n  - Hotspot\n  - Java Runtime Environment\n  - JAXWS\n  - JSSE\n  - Networking\n  - RMI\n  - Scripting\n  - Sound\n  - Swing",
            "last seen": "2019-02-21",
            "modified": "2018-11-15",
            "plugin id": "56566",
            "published": "2011-10-20",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=56566",
            "title": "Oracle Java SE Multiple Vulnerabilities (October 2011 CPU) (BEAST)"
        },
        {
            "NASL family": "Red Hat Local Security Checks",
            "NASL id": "REDHAT-RHSA-2011-1380.NASL",
            "description": "Updated java-1.6.0-openjdk packages that fix several security issues are now available for Red Hat Enterprise Linux 5 and 6.\n\nThe Red Hat Security Response Team has rated this update as having critical security impact. Common Vulnerability Scoring System (CVSS) base scores, which give detailed severity ratings, are available for each vulnerability from the CVE links in the References section.\n\nThese packages provide the OpenJDK 6 Java Runtime Environment and the OpenJDK 6 Software Development Kit.\n\nA flaw was found in the Java RMI (Remote Method Invocation) registry implementation. A remote RMI client could use this flaw to execute arbitrary code on the RMI server running the registry. (CVE-2011-3556)\n\nA flaw was found in the Java RMI registry implementation. A remote RMI client could use this flaw to execute code on the RMI server with unrestricted privileges. (CVE-2011-3557)\n\nA flaw was found in the IIOP (Internet Inter-Orb Protocol) deserialization code. An untrusted Java application or applet running in a sandbox could use this flaw to bypass sandbox restrictions by deserializing specially crafted input. (CVE-2011-3521)\n\nIt was found that the Java ScriptingEngine did not properly restrict the privileges of sandboxed applications. An untrusted Java application or applet running in a sandbox could use this flaw to bypass sandbox restrictions. (CVE-2011-3544)\n\nA flaw was found in the AWTKeyStroke implementation. An untrusted Java application or applet running in a sandbox could use this flaw to bypass sandbox restrictions. (CVE-2011-3548)\n\nAn integer overflow flaw, leading to a heap-based buffer overflow, was found in the Java2D code used to perform transformations of graphic shapes and images. An untrusted Java application or applet running in a sandbox could use this flaw to bypass sandbox restrictions.\n(CVE-2011-3551)\n\nAn insufficient error checking flaw was found in the unpacker for JAR files in pack200 format. A specially crafted JAR file could use this flaw to crash the Java Virtual Machine (JVM) or, possibly, execute arbitrary code with JVM privileges. (CVE-2011-3554)\n\nIt was found that HttpsURLConnection did not perform SecurityManager checks in the setSSLSocketFactory method. An untrusted Java application or applet running in a sandbox could use this flaw to bypass connection restrictions defined in the policy. (CVE-2011-3560)\n\nA flaw was found in the way the SSL 3 and TLS 1.0 protocols used block ciphers in cipher-block chaining (CBC) mode. An attacker able to perform a chosen plain text attack against a connection mixing trusted and untrusted data could use this flaw to recover portions of the trusted data sent over the connection. (CVE-2011-3389)\n\nNote: This update mitigates the CVE-2011-3389 issue by splitting the first application data record byte to a separate SSL/TLS protocol record. This mitigation may cause compatibility issues with some SSL/TLS implementations and can be disabled using the jsse.enableCBCProtection boolean property. This can be done on the command line by appending the flag '-Djsse.enableCBCProtection=false' to the java command.\n\nAn information leak flaw was found in the InputStream.skip implementation. An untrusted Java application or applet could possibly use this flaw to obtain bytes skipped by other threads.\n(CVE-2011-3547)\n\nA flaw was found in the Java HotSpot virtual machine. An untrusted Java application or applet could use this flaw to disclose portions of the VM memory, or cause it to crash. (CVE-2011-3558)\n\nThe Java API for XML Web Services (JAX-WS) implementation in OpenJDK was configured to include the stack trace in error messages sent to clients. A remote client could possibly use this flaw to obtain sensitive information. (CVE-2011-3553)\n\nIt was found that Java applications running with SecurityManager restrictions were allowed to use too many UDP sockets by default. If multiple instances of a malicious application were started at the same time, they could exhaust all available UDP sockets on the system.\n(CVE-2011-3552)\n\nThis erratum also upgrades the OpenJDK package to IcedTea6 1.9.10.\nRefer to the NEWS file, linked to in the References, for further information.\n\nAll users of java-1.6.0-openjdk are advised to upgrade to these updated packages, which resolve these issues. All running instances of OpenJDK Java must be restarted for the update to take effect.",
            "last seen": "2019-02-21",
            "modified": "2018-11-26",
            "plugin id": "56553",
            "published": "2011-10-19",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=56553",
            "title": "RHEL 5 / 6 : java-1.6.0-openjdk (RHSA-2011:1380) (BEAST)"
        },
        {
            "NASL family": "Misc.",
            "NASL id": "ORACLE_JAVA_CPU_OCT_2011_UNIX.NASL",
            "description": "The version of Oracle (formerly Sun) Java SE or Java for Business installed on the remote host is earlier than 7 Update 1 / 6 Update 29 / 5.0 Update 32 / 1.4.2_34.  As such, it is potentially affected by security issues in the following components :\n\n  - 2D\n  - AWT\n  - Deployment\n  - Deserialization\n  - Hotspot\n  - Java Runtime Environment\n  - JAXWS\n  - JSSE\n  - Networking\n  - RMI\n  - Scripting\n  - Sound\n  - Swing",
            "last seen": "2019-02-21",
            "modified": "2018-11-15",
            "plugin id": "64846",
            "published": "2013-02-22",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=64846",
            "title": "Oracle Java SE Multiple Vulnerabilities (October 2011 CPU) (BEAST) (Unix)"
        },
        {
            "NASL family": "Scientific Linux Local Security Checks",
            "NASL id": "SL_20111018_JAVA_1_6_0_OPENJDK_ON_SL5_X.NASL",
            "description": "These packages provide the OpenJDK 6 Java Runtime Environment and the OpenJDK 6 Software Development Kit.\n\nA flaw was found in the Java RMI (Remote Method Invocation) registry implementation. A remote RMI client could use this flaw to execute arbitrary code on the RMI server running the registry. (CVE-2011-3556)\n\nA flaw was found in the Java RMI registry implementation. A remote RMI client could use this flaw to execute code on the RMI server with unrestricted privileges. (CVE-2011-3557)\n\nA flaw was found in the IIOP (Internet Inter-Orb Protocol) deserialization code. An untrusted Java application or applet running in a sandbox could use this flaw to bypass sandbox restrictions by deserializing specially crafted input. (CVE-2011-3521)\n\nIt was found that the Java ScriptingEngine did not properly restrict the privileges of sandboxed applications. An untrusted Java application or applet running in a sandbox could use this flaw to bypass sandbox restrictions. (CVE-2011-3544)\n\nA flaw was found in the AWTKeyStroke implementation. An untrusted Java application or applet running in a sandbox could use this flaw to bypass sandbox restrictions. (CVE-2011-3548)\n\nAn integer overflow flaw, leading to a heap-based buffer overflow, was found in the Java2D code used to perform transformations of graphic shapes and images. An untrusted Java application or applet running in a sandbox could use this flaw to bypass sandbox restrictions.\n(CVE-2011-3551)\n\nAn insufficient error checking flaw was found in the unpacker for JAR files in pack200 format. A specially crafted JAR file could use this flaw to crash the Java Virtual Machine (JVM) or, possibly, execute arbitrary code with JVM privileges. (CVE-2011-3554)\n\nIt was found that HttpsURLConnection did not perform SecurityManager checks in the setSSLSocketFactory method. An untrusted Java application or applet running in a sandbox could use this flaw to bypass connection restrictions defined in the policy. (CVE-2011-3560)\n\nA flaw was found in the way the SSL 3 and TLS 1.0 protocols used block ciphers in cipher-block chaining (CBC) mode. An attacker able to perform a chosen plain text attack against a connection mixing trusted and untrusted data could use this flaw to recover portions of the trusted data sent over the connection. (CVE-2011-3389)\n\nNote: This update mitigates the CVE-2011-3389 issue by splitting the first application data record byte to a separate SSL/TLS protocol record. This mitigation may cause compatibility issues with some SSL/TLS implementations and can be disabled using the jsse.enableCBCProtection boolean property. This can be done on the command line by appending the flag '-Djsse.enableCBCProtection=false' to the java command.\n\nAn information leak flaw was found in the InputStream.skip implementation. An untrusted Java application or applet could possibly use this flaw to obtain bytes skipped by other threads.\n(CVE-2011-3547)\n\nA flaw was found in the Java HotSpot virtual machine. An untrusted Java application or applet could use this flaw to disclose portions of the VM memory, or cause it to crash. (CVE-2011-3558)\n\nThe Java API for XML Web Services (JAX-WS) implementation in OpenJDK was configured to include the stack trace in error messages sent to clients. A remote client could possibly use this flaw to obtain sensitive information. (CVE-2011-3553)\n\nIt was found that Java applications running with SecurityManager restrictions were allowed to use too many UDP sockets by default. If multiple instances of a malicious application were started at the same time, they could exhaust all available UDP sockets on the system.\n(CVE-2011-3552)\n\nThis erratum also upgrades the OpenJDK package to IcedTea6 1.9.10.\nRefer to the NEWS file, linked to in the References, for further information.\n\nAll users of java-1.6.0-openjdk are advised to upgrade to these updated packages, which resolve these issues. All running instances of OpenJDK Java must be restarted for the update to take effect.",
            "last seen": "2019-02-21",
            "modified": "2018-12-31",
            "plugin id": "61156",
            "published": "2012-08-01",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=61156",
            "title": "Scientific Linux Security Update : java-1.6.0-openjdk on SL5.x, SL6.x i386/x86_64 (BEAST)"
        },
        {
            "NASL family": "CentOS Local Security Checks",
            "NASL id": "CENTOS_RHSA-2011-1380.NASL",
            "description": "Updated java-1.6.0-openjdk packages that fix several security issues are now available for Red Hat Enterprise Linux 5 and 6.\n\nThe Red Hat Security Response Team has rated this update as having critical security impact. Common Vulnerability Scoring System (CVSS) base scores, which give detailed severity ratings, are available for each vulnerability from the CVE links in the References section.\n\nThese packages provide the OpenJDK 6 Java Runtime Environment and the OpenJDK 6 Software Development Kit.\n\nA flaw was found in the Java RMI (Remote Method Invocation) registry implementation. A remote RMI client could use this flaw to execute arbitrary code on the RMI server running the registry. (CVE-2011-3556)\n\nA flaw was found in the Java RMI registry implementation. A remote RMI client could use this flaw to execute code on the RMI server with unrestricted privileges. (CVE-2011-3557)\n\nA flaw was found in the IIOP (Internet Inter-Orb Protocol) deserialization code. An untrusted Java application or applet running in a sandbox could use this flaw to bypass sandbox restrictions by deserializing specially crafted input. (CVE-2011-3521)\n\nIt was found that the Java ScriptingEngine did not properly restrict the privileges of sandboxed applications. An untrusted Java application or applet running in a sandbox could use this flaw to bypass sandbox restrictions. (CVE-2011-3544)\n\nA flaw was found in the AWTKeyStroke implementation. An untrusted Java application or applet running in a sandbox could use this flaw to bypass sandbox restrictions. (CVE-2011-3548)\n\nAn integer overflow flaw, leading to a heap-based buffer overflow, was found in the Java2D code used to perform transformations of graphic shapes and images. An untrusted Java application or applet running in a sandbox could use this flaw to bypass sandbox restrictions.\n(CVE-2011-3551)\n\nAn insufficient error checking flaw was found in the unpacker for JAR files in pack200 format. A specially crafted JAR file could use this flaw to crash the Java Virtual Machine (JVM) or, possibly, execute arbitrary code with JVM privileges. (CVE-2011-3554)\n\nIt was found that HttpsURLConnection did not perform SecurityManager checks in the setSSLSocketFactory method. An untrusted Java application or applet running in a sandbox could use this flaw to bypass connection restrictions defined in the policy. (CVE-2011-3560)\n\nA flaw was found in the way the SSL 3 and TLS 1.0 protocols used block ciphers in cipher-block chaining (CBC) mode. An attacker able to perform a chosen plain text attack against a connection mixing trusted and untrusted data could use this flaw to recover portions of the trusted data sent over the connection. (CVE-2011-3389)\n\nNote: This update mitigates the CVE-2011-3389 issue by splitting the first application data record byte to a separate SSL/TLS protocol record. This mitigation may cause compatibility issues with some SSL/TLS implementations and can be disabled using the jsse.enableCBCProtection boolean property. This can be done on the command line by appending the flag '-Djsse.enableCBCProtection=false' to the java command.\n\nAn information leak flaw was found in the InputStream.skip implementation. An untrusted Java application or applet could possibly use this flaw to obtain bytes skipped by other threads.\n(CVE-2011-3547)\n\nA flaw was found in the Java HotSpot virtual machine. An untrusted Java application or applet could use this flaw to disclose portions of the VM memory, or cause it to crash. (CVE-2011-3558)\n\nThe Java API for XML Web Services (JAX-WS) implementation in OpenJDK was configured to include the stack trace in error messages sent to clients. A remote client could possibly use this flaw to obtain sensitive information. (CVE-2011-3553)\n\nIt was found that Java applications running with SecurityManager restrictions were allowed to use too many UDP sockets by default. If multiple instances of a malicious application were started at the same time, they could exhaust all available UDP sockets on the system.\n(CVE-2011-3552)\n\nThis erratum also upgrades the OpenJDK package to IcedTea6 1.9.10.\nRefer to the NEWS file, linked to in the References, for further information.\n\nAll users of java-1.6.0-openjdk are advised to upgrade to these updated packages, which resolve these issues. All running instances of OpenJDK Java must be restarted for the update to take effect.",
            "last seen": "2019-02-21",
            "modified": "2018-11-10",
            "plugin id": "56558",
            "published": "2011-10-20",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=56558",
            "title": "CentOS 5 : java-1.6.0-openjdk (CESA-2011:1380) (BEAST)"
        },
        {
            "NASL family": "Red Hat Local Security Checks",
            "NASL id": "REDHAT-RHSA-2011-1384.NASL",
            "description": "Updated java-1.6.0-sun packages that fix several security issues are now available for Red Hat Enterprise Linux 4 Extras, and Red Hat Enterprise Linux 5 and 6 Supplementary.\n\nThe Red Hat Security Response Team has rated this update as having critical security impact. Common Vulnerability Scoring System (CVSS) base scores, which give detailed severity ratings, are available for each vulnerability from the CVE links in the References section.\n\nThe Sun 1.6.0 Java release includes the Sun Java 6 Runtime Environment and the Sun Java 6 Software Development Kit.\n\nThis update fixes several vulnerabilities in the Sun Java 6 Runtime Environment and the Sun Java 6 Software Development Kit. Further information about these flaws can be found on the Oracle Java SE Critical Patch page, listed in the References section. (CVE-2011-3389, CVE-2011-3516, CVE-2011-3521, CVE-2011-3544, CVE-2011-3545, CVE-2011-3546, CVE-2011-3547, CVE-2011-3548, CVE-2011-3549, CVE-2011-3550, CVE-2011-3551, CVE-2011-3552, CVE-2011-3553, CVE-2011-3554, CVE-2011-3555, CVE-2011-3556, CVE-2011-3557, CVE-2011-3558, CVE-2011-3560, CVE-2011-3561)\n\nAll users of java-1.6.0-sun are advised to upgrade to these updated packages, which provide JDK and JRE 6 Update 29 and resolve these issues. All running instances of Sun Java must be restarted for the update to take effect.",
            "last seen": "2019-02-21",
            "modified": "2018-11-26",
            "plugin id": "56560",
            "published": "2011-10-20",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=56560",
            "title": "RHEL 4 / 5 / 6 : java-1.6.0-sun (RHSA-2011:1384) (BEAST)"
        },
        {
            "NASL family": "SuSE Local Security Checks",
            "NASL id": "SUSE_11_3_JAVA-1_6_0-SUN-111024.NASL",
            "description": "Oracle/Sun Java 1.6.0 was updated to the u26 release, fixing lots of bugs and security issues.\n\nPlease see http://www.oracle.com/technetwork/topics/security/javacpuoct2011-44343 1.html\n\nfor more details.",
            "last seen": "2019-02-21",
            "modified": "2017-06-05",
            "plugin id": "75543",
            "published": "2014-06-13",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=75543",
            "title": "openSUSE Security Update : java-1_6_0-sun (java-1_6_0-sun-5320) (BEAST)"
        },
        {
            "NASL family": "SuSE Local Security Checks",
            "NASL id": "SUSE_11_JAVA-1_4_2-IBM-120105.NASL",
            "description": "IBM Java 1.4.2 SR13 FP11 has been released and contains various security fixes.\n\nhttp://www.ibm.com/developerworks/java/jdk/alerts/ http://www.ibm.com/developerworks/java/jdk/alerts/\n\n(CVEs fixed: CVE-2011-3547 / CVE-2011-3548 / CVE-2011-3549 / CVE-2011-3552 / CVE-2011-3545 / CVE-2011-3556 / CVE-2011-3557 / CVE-2011-3389 / CVE-2011-3560)",
            "last seen": "2019-02-21",
            "modified": "2017-06-05",
            "plugin id": "58113",
            "published": "2012-02-24",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=58113",
            "title": "SuSE 11.1 Security Update : IBM Java 1.4.2 (SAT Patch Number 5609)"
        },
        {
            "NASL family": "Oracle Linux Local Security Checks",
            "NASL id": "ORACLELINUX_ELSA-2011-1380.NASL",
            "description": "From Red Hat Security Advisory 2011:1380 :\n\nUpdated java-1.6.0-openjdk packages that fix several security issues are now available for Red Hat Enterprise Linux 5 and 6.\n\nThe Red Hat Security Response Team has rated this update as having critical security impact. Common Vulnerability Scoring System (CVSS) base scores, which give detailed severity ratings, are available for each vulnerability from the CVE links in the References section.\n\nThese packages provide the OpenJDK 6 Java Runtime Environment and the OpenJDK 6 Software Development Kit.\n\nA flaw was found in the Java RMI (Remote Method Invocation) registry implementation. A remote RMI client could use this flaw to execute arbitrary code on the RMI server running the registry. (CVE-2011-3556)\n\nA flaw was found in the Java RMI registry implementation. A remote RMI client could use this flaw to execute code on the RMI server with unrestricted privileges. (CVE-2011-3557)\n\nA flaw was found in the IIOP (Internet Inter-Orb Protocol) deserialization code. An untrusted Java application or applet running in a sandbox could use this flaw to bypass sandbox restrictions by deserializing specially crafted input. (CVE-2011-3521)\n\nIt was found that the Java ScriptingEngine did not properly restrict the privileges of sandboxed applications. An untrusted Java application or applet running in a sandbox could use this flaw to bypass sandbox restrictions. (CVE-2011-3544)\n\nA flaw was found in the AWTKeyStroke implementation. An untrusted Java application or applet running in a sandbox could use this flaw to bypass sandbox restrictions. (CVE-2011-3548)\n\nAn integer overflow flaw, leading to a heap-based buffer overflow, was found in the Java2D code used to perform transformations of graphic shapes and images. An untrusted Java application or applet running in a sandbox could use this flaw to bypass sandbox restrictions.\n(CVE-2011-3551)\n\nAn insufficient error checking flaw was found in the unpacker for JAR files in pack200 format. A specially crafted JAR file could use this flaw to crash the Java Virtual Machine (JVM) or, possibly, execute arbitrary code with JVM privileges. (CVE-2011-3554)\n\nIt was found that HttpsURLConnection did not perform SecurityManager checks in the setSSLSocketFactory method. An untrusted Java application or applet running in a sandbox could use this flaw to bypass connection restrictions defined in the policy. (CVE-2011-3560)\n\nA flaw was found in the way the SSL 3 and TLS 1.0 protocols used block ciphers in cipher-block chaining (CBC) mode. An attacker able to perform a chosen plain text attack against a connection mixing trusted and untrusted data could use this flaw to recover portions of the trusted data sent over the connection. (CVE-2011-3389)\n\nNote: This update mitigates the CVE-2011-3389 issue by splitting the first application data record byte to a separate SSL/TLS protocol record. This mitigation may cause compatibility issues with some SSL/TLS implementations and can be disabled using the jsse.enableCBCProtection boolean property. This can be done on the command line by appending the flag '-Djsse.enableCBCProtection=false' to the java command.\n\nAn information leak flaw was found in the InputStream.skip implementation. An untrusted Java application or applet could possibly use this flaw to obtain bytes skipped by other threads.\n(CVE-2011-3547)\n\nA flaw was found in the Java HotSpot virtual machine. An untrusted Java application or applet could use this flaw to disclose portions of the VM memory, or cause it to crash. (CVE-2011-3558)\n\nThe Java API for XML Web Services (JAX-WS) implementation in OpenJDK was configured to include the stack trace in error messages sent to clients. A remote client could possibly use this flaw to obtain sensitive information. (CVE-2011-3553)\n\nIt was found that Java applications running with SecurityManager restrictions were allowed to use too many UDP sockets by default. If multiple instances of a malicious application were started at the same time, they could exhaust all available UDP sockets on the system.\n(CVE-2011-3552)\n\nThis erratum also upgrades the OpenJDK package to IcedTea6 1.9.10.\nRefer to the NEWS file, linked to in the References, for further information.\n\nAll users of java-1.6.0-openjdk are advised to upgrade to these updated packages, which resolve these issues. All running instances of OpenJDK Java must be restarted for the update to take effect.",
            "last seen": "2019-02-21",
            "modified": "2018-07-18",
            "plugin id": "68373",
            "published": "2013-07-12",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=68373",
            "title": "Oracle Linux 5 / 6 : java-1.6.0-openjdk (ELSA-2011-1380) (BEAST)"
        },
        {
            "NASL family": "Mandriva Local Security Checks",
            "NASL id": "MANDRIVA_MDVSA-2011-170.NASL",
            "description": "Security issues were identified and fixed in openjdk (icedtea6) and icedtea-web :\n\nIcedTea6 prior to 1.10.4 allows remote untrusted Java Web Start applications and untrusted Java applets to affect confidentiality via unknown vectors related to Networking (CVE-2011-3547).\n\nIcedTea6 prior to 1.10.4 allows remote untrusted Java Web Start applications and untrusted Java applets to affect confidentiality, integrity, and availability, related to AWT (CVE-2011-3548).\n\nIcedTea6 prior to 1.10.4 allows remote attackers to affect confidentiality, integrity, and availability via unknown vectors related to 2D (CVE-2011-3551).\n\nIcedTea6 prior to 1.10.4 allows remote attackers to affect integrity via unknown vectors related to Networking (CVE-2011-3552).\n\nIcedTea6 prior to 1.10.4 allows remote authenticated users to affect confidentiality, related to JAXWS (CVE-2011-3553).\n\nIcedTea6 prior to 1.10.4 allows remote untrusted Java Web Start applications and untrusted Java applets to affect confidentiality, integrity, and availability via unknown vectors related to Scripting (CVE-2011-3544).\n\nIcedTea6 prior to 1.10.4 allows remote untrusted Java Web Start applications and untrusted Java applets to affect confidentiality, integrity, and availability via unknown vectors related to Deserialization (CVE-2011-3521).\n\nIcedTea6 prior to 1.10.4 allows remote untrusted Java Web Start applications and untrusted Java applets to affect confidentiality, integrity, and availability via unknown vectors (CVE-2011-3554).\n\nA flaw was found in the way the SSL 3 and TLS 1.0 protocols used block ciphers in cipher-block chaining (CBC) mode. An attacker able to perform a chosen plain text attack against a connection mixing trusted and untrusted data could use this flaw to recover portions of the trusted data sent over the connection (CVE-2011-3389).\n\nNote: This update mitigates the CVE-2011-3389 issue by splitting the first application data record byte to a separate SSL/TLS protocol record. This mitigation may cause compatibility issues with some SSL/TLS implementations and can be disabled using the jsse.enableCBCProtection boolean property. This can be done on the command line by appending the flag -Djsse.enableCBCProtection=false to the java command.\n\nIcedTea6 prior to 1.10.4 allows remote untrusted Java Web Start applications and untrusted Java applets to affect confidentiality via unknown vectors related to HotSpot (CVE-2011-3558).\n\nIcedTea6 prior to 1.10.4 allows remote attackers to affect confidentiality, integrity, and availability, related to RMI (CVE-2011-3556).\n\nIcedTea6 prior to 1.10.4 allows remote attackers to affect confidentiality, integrity, and availability, related to RMI (CVE-2011-3557).\n\nIcedTea6 prior to 1.10.4 allows remote untrusted Java Web Start applications and untrusted Java applets to affect confidentiality and integrity, related to JSSE (CVE-2011-3560).\n\nDeepak Bhole discovered a flaw in the Same Origin Policy (SOP) implementation in the IcedTea project Web browser plugin. A malicious applet could use this flaw to bypass SOP protection and open connections to any sub-domain of the second-level domain of the applet's origin, as well as any sub-domain of the domain that is the suffix of the origin second-level domain. For example, IcedTea-Web plugin allowed applet from some.host.example.com to connect to other.host.example.com, www.example.com, and example.com, as well as www.ample.com or ample.com. (CVE-2011-3377).",
            "last seen": "2019-02-21",
            "modified": "2018-07-19",
            "plugin id": "56809",
            "published": "2011-11-14",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=56809",
            "title": "Mandriva Linux Security Advisory : java-1.6.0-openjdk (MDVSA-2011:170)"
        },
        {
            "NASL family": "SuSE Local Security Checks",
            "NASL id": "SUSE_MOZILLA-NSS-7842.NASL",
            "description": "This update to version 3.13.1 of mozilla-nss fixes the following issues :\n\n  - Explicitly distrust DigiCert Sdn. Bhd (bmo#698753)\n\n  - Better SHA-224 support (bmo#647706)\n\n  - Fix a regression (causing hangs in some situations)     introduced in 3.13 (bmo#693228)\n\n  - SSL 2.0 is disabled by default\n\n  - A defense against the SSL 3.0 and TLS 1.0 CBC chosen     plaintext attack demonstrated by Rizzo and Duong     (CVE-2011-3389) has been enabled by default. Set the     SSL_CBC_RANDOM_IV SSL option to PR_FALSE to disable it.\n\n  - Support SHA-224\n\n  - Add PORT_ErrorToString and PORT_ErrorToName to return     the error message and symbolic name of an NSS error code\n\n  - Add NSS_GetVersion to return the NSS version string\n\n  - Add experimental support of RSA-PSS to the softoken only\n\n  - NSS_NoDB_Init does not try to open /pkcs11.txt and     /secmod.db anymore (bmo#641052)",
            "last seen": "2019-02-21",
            "modified": "2012-06-14",
            "plugin id": "57226",
            "published": "2011-12-13",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=57226",
            "title": "SuSE 10 Security Update : mozilla-nss (ZYPP Patch Number 7842)"
        },
        {
            "NASL family": "Windows",
            "NASL id": "SMB_KB2588513.NASL",
            "description": "This plugin has been deprecated and is no longer functional.  It was originally written to check Microsoft's workaround for CVE-2011-3389, but was replaced by plugin 57474 which checks for the patch that fixes this CVE.",
            "last seen": "2017-10-29",
            "modified": "2013-05-13",
            "plugin id": "56333",
            "published": "2011-09-29",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=56333",
            "title": "Deprecated"
        },
        {
            "NASL family": "Windows : Microsoft Bulletins",
            "NASL id": "SMB_NT_MS12-006.NASL",
            "description": "The remote host is affected by an information disclosure vulnerability, known as BEAST, in the SSL 3.0 and TLS 1.0 protocols due to a flaw in the way the initialization vector (IV) is selected when operating in cipher-block chaining (CBC) modes. A man-in-the-middle attacker can exploit this to obtain plaintext HTTP header data, by using a blockwise chosen-boundary attack (BCBA) on an HTTPS session, in conjunction with JavaScript code that uses the HTML5 WebSocket API, the Java URLConnection API, or the Silverlight WebClient API.\n\nTLS 1.1, TLS 1.2, and all cipher suites that do not use CBC mode are not affected.",
            "last seen": "2019-02-21",
            "modified": "2018-11-15",
            "plugin id": "57474",
            "published": "2012-01-10",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=57474",
            "title": "MS12-006: Vulnerability in SSL/TLS Could Allow Information Disclosure (2643584)"
        },
        {
            "NASL family": "General",
            "NASL id": "SSL3_TLS1_IV_IMPL_INFO_DISCLOSURE.NASL",
            "description": "A vulnerability exists in SSL 3.0 and TLS 1.0 that could allow information disclosure if an attacker intercepts encrypted traffic served from an affected system.\n\nTLS 1.1, TLS 1.2, and all cipher suites that do not use CBC mode are not affected.\n\nThis plugin tries to establish an SSL/TLS remote connection using an affected SSL version and cipher suite and then solicits return data.\nIf returned application data is not fragmented with an empty or one-byte record, it is likely vulnerable.\n\nOpenSSL uses empty fragments as a countermeasure unless the 'SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS' option is specified when OpenSSL is initialized.\n\nMicrosoft implemented one-byte fragments as a countermeasure, and the setting can be controlled via the registry key HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\SendExtraRecord.\n\nTherefore, if multiple applications use the same SSL/TLS implementation, some may be vulnerable while others may not be, depending on whether or not a countermeasure has been enabled.\n\nNote that this plugin detects the vulnerability in the SSLv3/TLSv1 protocol implemented in the server. It does not detect the BEAST attack where it exploits the vulnerability at HTTPS client-side (i.e., Internet browser). The detection at server-side does not necessarily mean your server is vulnerable to the BEAST attack, because the attack exploits the vulnerability at the client-side, and both SSL/TLS clients and servers can independently employ the split record countermeasure.",
            "last seen": "2019-02-21",
            "modified": "2018-11-15",
            "plugin id": "58751",
            "published": "2012-04-16",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=58751",
            "title": "SSL/TLS Protocol Initialization Vector Implementation Information Disclosure Vulnerability (BEAST)"
        },
        {
            "NASL family": "SuSE Local Security Checks",
            "NASL id": "OPENSUSE-2011-100.NASL",
            "description": "- Added a patch to fix errors in the pkcs11n.h header     file. (bmo#702090)\n\n  - update to 3.13.1 RTM\n\n  - better SHA-224 support (bmo#647706)\n\n  - fixed a regression (causing hangs in some situations)     introduced in 3.13 (bmo#693228)\n\n  - update to 3.13.0 RTM\n\n  - SSL 2.0 is disabled by default\n\n  - A defense against the SSL 3.0 and TLS 1.0 CBC chosen     plaintext attack demonstrated by Rizzo and Duong     (CVE-2011-3389) is enabled by default. Set the     SSL_CBC_RANDOM_IV SSL option to PR_FALSE to disable it.\n\n  - SHA-224 is supported\n\n  - Ported to iOS. (Requires NSPR 4.9.)\n\n  - Added PORT_ErrorToString and PORT_ErrorToName to return     the error message and symbolic name of an NSS error code\n\n  - Added NSS_GetVersion to return the NSS version string\n\n  - Added experimental support of RSA-PSS to the softoken     only\n\n  - NSS_NoDB_Init does not try to open /pkcs11.txt and     /secmod.db anymore (bmo#641052, bnc#726096)",
            "last seen": "2019-02-21",
            "modified": "2015-10-22",
            "plugin id": "74514",
            "published": "2014-06-13",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=74514",
            "title": "openSUSE Security Update : mozilla-nss (openSUSE-2011-100) (BEAST)"
        },
        {
            "NASL family": "Web Servers",
            "NASL id": "ORACLE_HTTP_SERVER_CPU_JAN_2015_LDAP.NASL",
            "description": "The version of Oracle HTTP Server installed on the remote host is affected by an information disclosure vulnerability, known as BEAST, in the SSL 3.0 and TLS 1.0 protocols due to a flaw in the way the initialization vector (IV) is selected when operating in cipher-block chaining (CBC) modes. A man-in-the-middle attacker can exploit this to obtain plaintext HTTP header data, by using a blockwise chosen-boundary attack (BCBA) on an HTTPS session, in conjunction with JavaScript code that uses the HTML5 WebSocket API, the Java URLConnection API, or the Silverlight WebClient API.",
            "last seen": "2019-02-21",
            "modified": "2018-11-15",
            "plugin id": "81003",
            "published": "2015-01-27",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=81003",
            "title": "Oracle Fusion Middleware Security Service Information Disclosure (January 2015 CPU) (BEAST)"
        },
        {
            "NASL family": "Misc.",
            "NASL id": "ASTERISK_AST_2016_003.NASL",
            "description": "According to its SIP banner, the version of Asterisk running on the remote host is affected by the following vulnerabilities :\n\n  - An information disclosure vulnerability, known as BEAST,     exists in the SSL 3.0 and TLS 1.0 protocols due to a     flaw in the way the initialization vector (IV) is     selected when operating in cipher-block chaining (CBC)     modes. A man-in-the-middle attacker can exploit this     to obtain plaintext HTTP header data, by using a     blockwise chosen-boundary attack (BCBA) on an HTTPS     session, in conjunction with JavaScript code that uses     the HTML5 WebSocket API, the Java URLConnection API,     or the Silverlight WebClient API. (CVE-2011-3389)\n\n  - An integer overflow condition exists in sip.conf due to     improper validation of user-supplied input when handling     'timert1' values. A remote attacker can exploit this to     cause a denial of service.\n\n  - An unspecified flaw exists due to improper handling of     FAT data in UDPTL packets. A remote attacker can exploit     this to cause a denial of service.\n\nNote that Nessus has not tested for these issues but has instead relied only on the application's self-reported version number.",
            "last seen": "2019-02-21",
            "modified": "2019-01-02",
            "plugin id": "88715",
            "published": "2016-02-12",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=88715",
            "title": "Asterisk Multiple Vulnerabilities (AST-2016-001 - AST-2016-003) (BEAST)"
        }
    ],
    "oval": [
        {
            "accepted": "2013-05-06T04:01:18.655-04:00",
            "class": "vulnerability",
            "contributors": [
                {
                    "name": "Dragos Prisaca",
                    "organization": "Symantec Corporation"
                },
                {
                    "name": "Dragos Prisaca",
                    "organization": "Symantec Corporation"
                },
                {
                    "name": "Sharath S",
                    "organization": "SecPod Technologies"
                }
            ],
            "definition_extensions": [
                {
                    "comment": "Microsoft Windows XP (x86) SP3 is installed",
                    "oval": "oval:org.mitre.oval:def:5631"
                },
                {
                    "comment": "Microsoft Windows XP x64 Edition SP2 is installed",
                    "oval": "oval:org.mitre.oval:def:4193"
                },
                {
                    "comment": "Microsoft Windows Server 2003 SP2 (x86) is installed",
                    "oval": "oval:org.mitre.oval:def:1935"
                },
                {
                    "comment": "Microsoft Windows Server 2003 SP2 (x64) is installed",
                    "oval": "oval:org.mitre.oval:def:2161"
                },
                {
                    "comment": "Microsoft Windows Server 2003 (ia64) SP2 is installed",
                    "oval": "oval:org.mitre.oval:def:1442"
                },
                {
                    "comment": "Microsoft Windows Vista (32-bit) Service Pack 2 is installed",
                    "oval": "oval:org.mitre.oval:def:6124"
                },
                {
                    "comment": "Microsoft Windows Vista x64 Edition Service Pack 2 is installed",
                    "oval": "oval:org.mitre.oval:def:5594"
                },
                {
                    "comment": "Microsoft Windows Server 2008 (32-bit) Service Pack 2 is installed",
                    "oval": "oval:org.mitre.oval:def:5653"
                },
                {
                    "comment": "Microsoft Windows Server 2008 x64 Edition Service Pack 2 is installed",
                    "oval": "oval:org.mitre.oval:def:6216"
                },
                {
                    "comment": "Microsoft Windows Server 2008 Itanium-Based Edition Service Pack 2 is installed",
                    "oval": "oval:org.mitre.oval:def:6150"
                },
                {
                    "comment": "Microsoft Windows 7 (32-bit) is installed",
                    "oval": "oval:org.mitre.oval:def:6165"
                },
                {
                    "comment": "Microsoft Windows 7 x64 Edition is installed",
                    "oval": "oval:org.mitre.oval:def:5950"
                },
                {
                    "comment": "Microsoft Windows Server 2008 R2 x64 Edition is installed",
                    "oval": "oval:org.mitre.oval:def:6438"
                },
                {
                    "comment": "Microsoft Windows Server 2008 R2 Itanium-Based Edition is installed",
                    "oval": "oval:org.mitre.oval:def:5954"
                },
                {
                    "comment": "Microsoft Windows 7 (32-bit) Service Pack 1 is installed",
                    "oval": "oval:org.mitre.oval:def:12292"
                },
                {
                    "comment": "Microsoft Windows 7 x64 Service Pack 1 is installed",
                    "oval": "oval:org.mitre.oval:def:12627"
                },
                {
                    "comment": "Microsoft Windows Server 2008 R2 x64 Service Pack 1 is installed",
                    "oval": "oval:org.mitre.oval:def:12567"
                },
                {
                    "comment": "Microsoft Windows Server 2008 R2 Itanium-Based Edition Service Pack 1 is installed",
                    "oval": "oval:org.mitre.oval:def:12583"
                }
            ],
            "description": "The SSL protocol, as used in certain configurations in Microsoft Windows and Microsoft Internet Explorer, Mozilla Firefox, Google Chrome, Opera, and other products, encrypts data by using CBC mode with chained initialization vectors, which allows man-in-the-middle attackers to obtain plaintext HTTP headers via a blockwise chosen-boundary attack (BCBA) on an HTTPS session, in conjunction with JavaScript code that uses (1) the HTML5 WebSocket API, (2) the Java URLConnection API, or (3) the Silverlight WebClient API, aka a \"BEAST\" attack.",
            "family": "windows",
            "id": "oval:org.mitre.oval:def:14752",
            "status": "accepted",
            "submitted": "2012-01-10T13:00:00",
            "title": "SSL and TLS Protocols Vulnerability",
            "version": "73"
        }
    ],
    "ranking": [
        [
            {
                "circl": 3
            }
        ]
    ],
    "redhat": {
        "advisories": [
            {
                "rhsa": {
                    "id": "RHSA-2011:1384"
                }
            },
            {
                "rhsa": {
                    "id": "RHSA-2012:0006"
                }
            },
            {
                "rhsa": {
                    "id": "RHSA-2012:0508"
                }
            },
            {
                "rhsa": {
                    "id": "RHSA-2013:1455"
                }
            }
        ],
        "rpms": [
            "java-1.6.0-openjdk-1:1.6.0.0-1.40.1.9.10.el6_1",
            "java-1.6.0-openjdk-demo-1:1.6.0.0-1.40.1.9.10.el6_1",
            "java-1.6.0-openjdk-devel-1:1.6.0.0-1.40.1.9.10.el6_1",
            "java-1.6.0-openjdk-javadoc-1:1.6.0.0-1.40.1.9.10.el6_1",
            "java-1.6.0-openjdk-src-1:1.6.0.0-1.40.1.9.10.el6_1",
            "java-1.6.0-openjdk-1:1.6.0.0-1.23.1.9.10.el5_7",
            "java-1.6.0-openjdk-demo-1:1.6.0.0-1.23.1.9.10.el5_7",
            "java-1.6.0-openjdk-devel-1:1.6.0.0-1.23.1.9.10.el5_7",
            "java-1.6.0-openjdk-javadoc-1:1.6.0.0-1.23.1.9.10.el5_7",
            "java-1.6.0-openjdk-src-1:1.6.0.0-1.23.1.9.10.el5_7"
        ]
    },
    "references": [
        "http://blog.mozilla.com/security/2011/09/27/attack-against-tls-protected-communications/",
        "http://blogs.technet.com/b/msrc/archive/2011/09/26/microsoft-releases-security-advisory-2588513.aspx",
        "http://blogs.technet.com/b/srd/archive/2011/09/26/is-ssl-broken-more-about-security-advisory-2588513.aspx",
        "http://curl.haxx.se/docs/adv_20120124B.html",
        "http://downloads.asterisk.org/pub/security/AST-2016-001.html",
        "http://ekoparty.org/2011/juliano-rizzo.php",
        "http://eprint.iacr.org/2004/111",
        "http://eprint.iacr.org/2006/136",
        "http://googlechromereleases.blogspot.com/2011/10/chrome-stable-release.html",
        "http://isc.sans.edu/diary/SSL+TLS+part+3+/11635",
        "http://lists.apple.com/archives/Security-announce/2011//Oct/msg00001.html",
        "http://lists.apple.com/archives/Security-announce/2011//Oct/msg00002.html",
        "http://lists.apple.com/archives/security-announce/2012/Feb/msg00000.html",
        "http://lists.apple.com/archives/security-announce/2012/Jul/msg00001.html",
        "http://lists.apple.com/archives/security-announce/2012/May/msg00001.html",
        "http://lists.apple.com/archives/security-announce/2012/Sep/msg00004.html",
        "http://lists.apple.com/archives/security-announce/2013/Oct/msg00004.html",
        "http://lists.opensuse.org/opensuse-security-announce/2012-01/msg00049.html",
        "http://lists.opensuse.org/opensuse-security-announce/2012-01/msg00051.html",
        "http://lists.opensuse.org/opensuse-security-announce/2012-05/msg00009.html",
        "http://marc.info/?l=bugtraq&m=132750579901589&w=2",
        "http://marc.info/?l=bugtraq&m=132872385320240&w=2",
        "http://marc.info/?l=bugtraq&m=133365109612558&w=2",
        "http://marc.info/?l=bugtraq&m=133728004526190&w=2",
        "http://marc.info/?l=bugtraq&m=134254866602253&w=2",
        "http://marc.info/?l=bugtraq&m=134254957702612&w=2",
        "http://my.opera.com/securitygroup/blog/2011/09/28/the-beast-ssl-tls-issue",
        "http://rhn.redhat.com/errata/RHSA-2012-0508.html",
        "http://rhn.redhat.com/errata/RHSA-2013-1455.html",
        "http://secunia.com/advisories/47998",
        "http://secunia.com/advisories/48256",
        "http://security.gentoo.org/glsa/glsa-201203-02.xml",
        "http://security.gentoo.org/glsa/glsa-201406-32.xml",
        "http://support.apple.com/kb/HT4999",
        "http://support.apple.com/kb/HT5001",
        "http://support.apple.com/kb/HT5130",
        "http://support.apple.com/kb/HT5281",
        "http://support.apple.com/kb/HT5501",
        "http://support.apple.com/kb/HT6150",
        "http://technet.microsoft.com/security/advisory/2588513",
        "http://vnhacker.blogspot.com/2011/09/beast.html",
        "http://www.apcmedia.com/salestools/SJHN-7RKGNM/SJHN-7RKGNM_R4_EN.pdf",
        "http://www.debian.org/security/2012/dsa-2398",
        "http://www.educatedguesswork.org/2011/09/security_impact_of_the_rizzodu.html",
        "http://www.ibm.com/developerworks/java/jdk/alerts/",
        "http://www.imperialviolet.org/2011/09/23/chromeandbeast.html",
        "http://www.insecure.cl/Beast-SSL.rar",
        "http://www.kb.cert.org/vuls/id/864643",
        "http://www.mandriva.com/security/advisories?name=MDVSA-2012:058",
        "http://www.opera.com/docs/changelogs/mac/1151/",
        "http://www.opera.com/docs/changelogs/mac/1160/",
        "http://www.opera.com/docs/changelogs/unix/1151/",
        "http://www.opera.com/docs/changelogs/unix/1160/",
        "http://www.opera.com/docs/changelogs/windows/1151/",
        "http://www.opera.com/docs/changelogs/windows/1160/",
        "http://www.opera.com/support/kb/view/1004/",
        "http://www.oracle.com/technetwork/topics/security/cpujan2015-1972971.html",
        "http://www.oracle.com/technetwork/topics/security/cpujul2015-2367936.html",
        "http://www.oracle.com/technetwork/topics/security/javacpuoct2011-443431.html",
        "http://www.redhat.com/support/errata/RHSA-2011-1384.html",
        "http://www.redhat.com/support/errata/RHSA-2012-0006.html",
        "http://www.securityfocus.com/bid/49388",
        "http://www.securityfocus.com/bid/49778",
        "http://www.securitytracker.com/id/1029190",
        "http://www.securitytracker.com/id?1025997",
        "http://www.securitytracker.com/id?1026103",
        "http://www.securitytracker.com/id?1026704",
        "http://www.ubuntu.com/usn/USN-1263-1",
        "http://www.us-cert.gov/cas/techalerts/TA12-010A.html",
        "https://blogs.oracle.com/sunsecurity/entry/multiple_vulnerabilities_in_fetchmail",
        "https://bugzilla.novell.com/show_bug.cgi?id=719047",
        "https://bugzilla.redhat.com/show_bug.cgi?id=737506",
        "https://docs.microsoft.com/en-us/security-updates/securitybulletins/2012/ms12-006",
        "https://h20564.www2.hp.com/portal/site/hpsc/public/kb/docDisplay?docId=emr_na-c03839862",
        "https://hermes.opensuse.org/messages/13154861",
        "https://hermes.opensuse.org/messages/13155432",
        "https://ics-cert.us-cert.gov/advisories/ICSMA-18-058-02"
    ],
    "refmap": {
        "apple": [
            "APPLE-SA-2011-10-12-1",
            "APPLE-SA-2011-10-12-2",
            "APPLE-SA-2012-02-01-1",
            "APPLE-SA-2012-05-09-1",
            "APPLE-SA-2012-07-25-2",
            "APPLE-SA-2012-09-19-2",
            "APPLE-SA-2013-10-22-3"
        ],
        "bid": [
            "49388",
            "49778"
        ],
        "cert": [
            "TA12-010A"
        ],
        "cert-vn": [
            "VU#864643"
        ],
        "confirm": [
            "http://blog.mozilla.com/security/2011/09/27/attack-against-tls-protected-communications/",
            "http://blogs.technet.com/b/msrc/archive/2011/09/26/microsoft-releases-security-advisory-2588513.aspx",
            "http://blogs.technet.com/b/srd/archive/2011/09/26/is-ssl-broken-more-about-security-advisory-2588513.aspx",
            "http://curl.haxx.se/docs/adv_20120124B.html",
            "http://downloads.asterisk.org/pub/security/AST-2016-001.html",
            "http://googlechromereleases.blogspot.com/2011/10/chrome-stable-release.html",
            "http://my.opera.com/securitygroup/blog/2011/09/28/the-beast-ssl-tls-issue",
            "http://support.apple.com/kb/HT4999",
            "http://support.apple.com/kb/HT5001",
            "http://support.apple.com/kb/HT5130",
            "http://support.apple.com/kb/HT5281",
            "http://support.apple.com/kb/HT5501",
            "http://support.apple.com/kb/HT6150",
            "http://technet.microsoft.com/security/advisory/2588513",
            "http://www.apcmedia.com/salestools/SJHN-7RKGNM/SJHN-7RKGNM_R4_EN.pdf",
            "http://www.ibm.com/developerworks/java/jdk/alerts/",
            "http://www.imperialviolet.org/2011/09/23/chromeandbeast.html",
            "http://www.opera.com/docs/changelogs/mac/1151/",
            "http://www.opera.com/docs/changelogs/mac/1160/",
            "http://www.opera.com/docs/changelogs/unix/1151/",
            "http://www.opera.com/docs/changelogs/unix/1160/",
            "http://www.opera.com/docs/changelogs/windows/1151/",
            "http://www.opera.com/docs/changelogs/windows/1160/",
            "http://www.opera.com/support/kb/view/1004/",
            "http://www.oracle.com/technetwork/topics/security/cpujan2015-1972971.html",
            "http://www.oracle.com/technetwork/topics/security/cpujul2015-2367936.html",
            "http://www.oracle.com/technetwork/topics/security/javacpuoct2011-443431.html",
            "https://blogs.oracle.com/sunsecurity/entry/multiple_vulnerabilities_in_fetchmail",
            "https://bugzilla.novell.com/show_bug.cgi?id=719047",
            "https://bugzilla.redhat.com/show_bug.cgi?id=737506"
        ],
        "debian": [
            "DSA-2398"
        ],
        "gentoo": [
            "GLSA-201203-02",
            "GLSA-201406-32"
        ],
        "hp": [
            "HPSBMU02742",
            "HPSBMU02797",
            "HPSBMU02799",
            "HPSBMU02900",
            "HPSBUX02730",
            "HPSBUX02760",
            "HPSBUX02777",
            "SSRT100710",
            "SSRT100740",
            "SSRT100805",
            "SSRT100854",
            "SSRT100867"
        ],
        "mandriva": [
            "MDVSA-2012:058"
        ],
        "misc": [
            "http://ekoparty.org/2011/juliano-rizzo.php",
            "http://eprint.iacr.org/2004/111",
            "http://eprint.iacr.org/2006/136",
            "http://isc.sans.edu/diary/SSL+TLS+part+3+/11635",
            "http://vnhacker.blogspot.com/2011/09/beast.html",
            "http://www.educatedguesswork.org/2011/09/security_impact_of_the_rizzodu.html",
            "http://www.insecure.cl/Beast-SSL.rar",
            "https://ics-cert.us-cert.gov/advisories/ICSMA-18-058-02"
        ],
        "ms": [
            "MS12-006"
        ],
        "osvdb": [
            "74829"
        ],
        "sectrack": [
            "1025997",
            "1026103",
            "1026704",
            "1029190"
        ],
        "secunia": [
            "45791",
            "47998",
            "48256",
            "48692",
            "48915",
            "48948",
            "49198",
            "55322",
            "55350",
            "55351"
        ],
        "suse": [
            "SUSE-SU-2012:0114",
            "SUSE-SU-2012:0122",
            "SUSE-SU-2012:0602",
            "openSUSE-SU-2012:0030",
            "openSUSE-SU-2012:0063"
        ],
        "ubuntu": [
            "USN-1263-1"
        ]
    },
    "summary": "The SSL protocol, as used in certain configurations in Microsoft Windows and Microsoft Internet Explorer, Mozilla Firefox, Google Chrome, Opera, and other products, encrypts data by using CBC mode with chained initialization vectors, which allows man-in-the-middle attackers to obtain plaintext HTTP headers via a blockwise chosen-boundary attack (BCBA) on an HTTPS session, in conjunction with JavaScript code that uses (1) the HTML5 WebSocket API, (2) the Java URLConnection API, or (3) the Silverlight WebClient API, aka a \"BEAST\" attack.",
    "vmware": [
        {
            "description": "Oracle (Sun) JRE is updated to version 1.6.0_30which addresses multiple security issues that existed in earlier releases of Oracle (Sun) JRE.",
            "id": "VMSA-2012-0005",
            "last_updated": "2012-12-20T00:00:00",
            "published": "2012-03-15T00:00:00",
            "title": "vCenter Update ManagerOracle (Sun) JRE update 1.6.0_30"
        },
        {
            "description": "Oracle (Sun) JRE is updated to version 1.5.0_32which addresses multiple security issues that existed in earlier releases of Oracle(Sun) JRE ",
            "id": "VMSA-2012-0003",
            "last_updated": "2012-09-13T00:00:00",
            "published": "2012-03-08T00:00:00",
            "title": "VirtualCenter and ESXOracle (Sun) JRE update 1.5.0_32"
        }
    ],
    "vulnerable_configuration": [
        {
            "id": "cpe:2.3:a:google:chrome",
            "title": "cpe:2.3:a:google:chrome"
        },
        {
            "id": "cpe:2.3:a:microsoft:ie",
            "title": "Microsoft Internet Explorer"
        },
        {
            "id": "cpe:2.3:a:mozilla:firefox",
            "title": "Mozilla Firefox"
        },
        {
            "id": "cpe:2.3:a:opera:opera_browser",
            "title": "cpe:2.3:a:opera:opera_browser"
        },
        {
            "id": "cpe:2.3:o:microsoft:windows",
            "title": "Microsoft Windows"
        }
    ],
    "vulnerable_configuration_cpe_2_2": [
        "cpe:/a:google:chrome",
        "cpe:/a:microsoft:ie",
        "cpe:/a:mozilla:firefox",
        "cpe:/a:opera:opera_browser",
        "cpe:/o:microsoft:windows"
    ]
}